(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/* 
 *  DSP.js - a comprehensive digital signal processing  library for javascript
 * 
 *  Created by Corban Brook <corbanbrook@gmail.com> on 2010-01-01.
 *  Copyright 2010 Corban Brook. All rights reserved.
 *
 */

////////////////////////////////////////////////////////////////////////////////
//                                  CONSTANTS                                 //
////////////////////////////////////////////////////////////////////////////////

/**
 * DSP is an object which contains general purpose utility functions and constants
 */
var DSP = {
  // Channels
  LEFT:           0,
  RIGHT:          1,
  MIX:            2,

  // Waveforms
  SINE:           1,
  TRIANGLE:       2,
  SAW:            3,
  SQUARE:         4,

  // Filters
  LOWPASS:        0,
  HIGHPASS:       1,
  BANDPASS:       2,
  NOTCH:          3,

  // Window functions
  BARTLETT:       1,
  BARTLETTHANN:   2,
  BLACKMAN:       3,
  COSINE:         4,
  GAUSS:          5,
  HAMMING:        6,
  HANN:           7,
  LANCZOS:        8,
  RECTANGULAR:    9,
  TRIANGULAR:     10,

  // Loop modes
  OFF:            0,
  FW:             1,
  BW:             2,
  FWBW:           3,

  // Math
  TWO_PI:         2*Math.PI
};

// Setup arrays for platforms which do not support byte arrays
function setupTypedArray(name, fallback) {
  // check if TypedArray exists
  // typeof on Minefield and Chrome return function, typeof on Webkit returns object.
  if (typeof this[name] !== "function" && typeof this[name] !== "object") {
    // nope.. check if WebGLArray exists
    if (typeof this[fallback] === "function" && typeof this[fallback] !== "object") {
      this[name] = this[fallback];
    } else {
      // nope.. set as Native JS array
      this[name] = function(obj) {
        if (obj instanceof Array) {
          return obj;
        } else if (typeof obj === "number") {
          return new Array(obj);
        }
      };
    }
  }
}

setupTypedArray("Float32Array", "WebGLFloatArray");
setupTypedArray("Int32Array",   "WebGLIntArray");
setupTypedArray("Uint16Array",  "WebGLUnsignedShortArray");
setupTypedArray("Uint8Array",   "WebGLUnsignedByteArray");


////////////////////////////////////////////////////////////////////////////////
//                            DSP UTILITY FUNCTIONS                           //
////////////////////////////////////////////////////////////////////////////////

/**
 * Inverts the phase of a signal
 *
 * @param {Array} buffer A sample buffer
 *
 * @returns The inverted sample buffer
 */
DSP.invert = function(buffer) {
  for (var i = 0, len = buffer.length; i < len; i++) {
    buffer[i] *= -1;
  }

  return buffer;
};

/**
 * Converts split-stereo (dual mono) sample buffers into a stereo interleaved sample buffer
 *
 * @param {Array} left  A sample buffer
 * @param {Array} right A sample buffer
 *
 * @returns The stereo interleaved buffer
 */
DSP.interleave = function(left, right) {
  if (left.length !== right.length) {
    throw "Can not interleave. Channel lengths differ.";
  }
 
  var stereoInterleaved = new Float32Array(left.length * 2);
 
  for (var i = 0, len = left.length; i < len; i++) {
    stereoInterleaved[2*i]   = left[i];
    stereoInterleaved[2*i+1] = right[i];
  }
 
  return stereoInterleaved;
};

/**
 * Converts a stereo-interleaved sample buffer into split-stereo (dual mono) sample buffers
 *
 * @param {Array} buffer A stereo-interleaved sample buffer
 *
 * @returns an Array containing left and right channels
 */
DSP.deinterleave = (function() {
  var left, right, mix, deinterleaveChannel = []; 

  deinterleaveChannel[DSP.MIX] = function(buffer) {
    for (var i = 0, len = buffer.length/2; i < len; i++) {
      mix[i] = (buffer[2*i] + buffer[2*i+1]) / 2;
    }
    return mix;
  };

  deinterleaveChannel[DSP.LEFT] = function(buffer) {
    for (var i = 0, len = buffer.length/2; i < len; i++) {
      left[i]  = buffer[2*i];
    }
    return left;
  };

  deinterleaveChannel[DSP.RIGHT] = function(buffer) {
    for (var i = 0, len = buffer.length/2; i < len; i++) {
      right[i]  = buffer[2*i+1];
    }
    return right;
  };

  return function(channel, buffer) { 
    left  = left  || new Float32Array(buffer.length/2);
    right = right || new Float32Array(buffer.length/2);
    mix   = mix   || new Float32Array(buffer.length/2);

    if (buffer.length/2 !== left.length) {
      left  = new Float32Array(buffer.length/2);
      right = new Float32Array(buffer.length/2);
      mix   = new Float32Array(buffer.length/2);
    }

    return deinterleaveChannel[channel](buffer);
  };
}());

/**
 * Separates a channel from a stereo-interleaved sample buffer
 *
 * @param {Array}  buffer A stereo-interleaved sample buffer
 * @param {Number} channel A channel constant (LEFT, RIGHT, MIX)
 *
 * @returns an Array containing a signal mono sample buffer
 */
DSP.getChannel = DSP.deinterleave;

/**
 * Helper method (for Reverb) to mix two (interleaved) samplebuffers. It's possible
 * to negate the second buffer while mixing and to perform a volume correction
 * on the final signal.
 *
 * @param {Array} sampleBuffer1 Array containing Float values or a Float32Array
 * @param {Array} sampleBuffer2 Array containing Float values or a Float32Array
 * @param {Boolean} negate When true inverts/flips the audio signal
 * @param {Number} volumeCorrection When you add multiple sample buffers, use this to tame your signal ;)
 *
 * @returns A new Float32Array interleaved buffer.
 */
DSP.mixSampleBuffers = function(sampleBuffer1, sampleBuffer2, negate, volumeCorrection){
  var outputSamples = new Float32Array(sampleBuffer1);

  for(var i = 0; i<sampleBuffer1.length; i++){
    outputSamples[i] += (negate ? -sampleBuffer2[i] : sampleBuffer2[i]) / volumeCorrection;
  }
 
  return outputSamples;
}; 

// Biquad filter types
DSP.LPF = 0;                // H(s) = 1 / (s^2 + s/Q + 1)
DSP.HPF = 1;                // H(s) = s^2 / (s^2 + s/Q + 1)
DSP.BPF_CONSTANT_SKIRT = 2; // H(s) = s / (s^2 + s/Q + 1)  (constant skirt gain, peak gain = Q)
DSP.BPF_CONSTANT_PEAK = 3;  // H(s) = (s/Q) / (s^2 + s/Q + 1)      (constant 0 dB peak gain)
DSP.NOTCH = 4;              // H(s) = (s^2 + 1) / (s^2 + s/Q + 1)
DSP.APF = 5;                // H(s) = (s^2 - s/Q + 1) / (s^2 + s/Q + 1)
DSP.PEAKING_EQ = 6;         // H(s) = (s^2 + s*(A/Q) + 1) / (s^2 + s/(A*Q) + 1)
DSP.LOW_SHELF = 7;          // H(s) = A * (s^2 + (sqrt(A)/Q)*s + A)/(A*s^2 + (sqrt(A)/Q)*s + 1)
DSP.HIGH_SHELF = 8;         // H(s) = A * (A*s^2 + (sqrt(A)/Q)*s + 1)/(s^2 + (sqrt(A)/Q)*s + A)

// Biquad filter parameter types
DSP.Q = 1;
DSP.BW = 2; // SHARED with BACKWARDS LOOP MODE
DSP.S = 3;

// Find RMS of signal
DSP.RMS = function(buffer) {
  var total = 0;
  
  for (var i = 0, n = buffer.length; i < n; i++) {
    total += buffer[i] * buffer[i];
  }
  
  return Math.sqrt(total / n);
};

// Find Peak of signal
DSP.Peak = function(buffer) {
  var peak = 0;
  
  for (var i = 0, n = buffer.length; i < n; i++) {
    peak = (Math.abs(buffer[i]) > peak) ? Math.abs(buffer[i]) : peak; 
  }
  
  return peak;
};

// Fourier Transform Module used by DFT, FFT, RFFT
function FourierTransform(bufferSize, sampleRate) {
  this.bufferSize = bufferSize;
  this.sampleRate = sampleRate;
  this.bandwidth  = 2 / bufferSize * sampleRate / 2;

  this.spectrum   = new Float32Array(bufferSize/2);
  this.real       = new Float32Array(bufferSize);
  this.imag       = new Float32Array(bufferSize);

  this.peakBand   = 0;
  this.peak       = 0;

  /**
   * Calculates the *middle* frequency of an FFT band.
   *
   * @param {Number} index The index of the FFT band.
   *
   * @returns The middle frequency in Hz.
   */
  this.getBandFrequency = function(index) {
    return this.bandwidth * index + this.bandwidth / 2;
  };

  this.calculateSpectrum = function() {
    var spectrum  = this.spectrum,
        real      = this.real,
        imag      = this.imag,
        bSi       = 2 / this.bufferSize,
        sqrt      = Math.sqrt,
        rval, 
        ival,
        mag;

    for (var i = 0, N = bufferSize/2; i < N; i++) {
      rval = real[i];
      ival = imag[i];
      mag = bSi * sqrt(rval * rval + ival * ival);

      if (mag > this.peak) {
        this.peakBand = i;
        this.peak = mag;
      }

      spectrum[i] = mag;
    }
  };
}

/**
 * DFT is a class for calculating the Discrete Fourier Transform of a signal.
 *
 * @param {Number} bufferSize The size of the sample buffer to be computed
 * @param {Number} sampleRate The sampleRate of the buffer (eg. 44100)
 *
 * @constructor
 */
function DFT(bufferSize, sampleRate) {
  FourierTransform.call(this, bufferSize, sampleRate);

  var N = bufferSize/2 * bufferSize;
  var TWO_PI = 2 * Math.PI;

  this.sinTable = new Float32Array(N);
  this.cosTable = new Float32Array(N);

  for (var i = 0; i < N; i++) {
    this.sinTable[i] = Math.sin(i * TWO_PI / bufferSize);
    this.cosTable[i] = Math.cos(i * TWO_PI / bufferSize);
  }
}

/**
 * Performs a forward transform on the sample buffer.
 * Converts a time domain signal to frequency domain spectra.
 *
 * @param {Array} buffer The sample buffer
 *
 * @returns The frequency spectrum array
 */
DFT.prototype.forward = function(buffer) {
  var real = this.real, 
      imag = this.imag,
      rval,
      ival;

  for (var k = 0; k < this.bufferSize/2; k++) {
    rval = 0.0;
    ival = 0.0;

    for (var n = 0; n < buffer.length; n++) {
      rval += this.cosTable[k*n] * buffer[n];
      ival += this.sinTable[k*n] * buffer[n];
    }

    real[k] = rval;
    imag[k] = ival;
  }

  return this.calculateSpectrum();
};


/**
 * FFT is a class for calculating the Discrete Fourier Transform of a signal
 * with the Fast Fourier Transform algorithm.
 *
 * @param {Number} bufferSize The size of the sample buffer to be computed. Must be power of 2
 * @param {Number} sampleRate The sampleRate of the buffer (eg. 44100)
 *
 * @constructor
 */
function FFT(bufferSize, sampleRate) {
  FourierTransform.call(this, bufferSize, sampleRate);
   
  this.reverseTable = new Uint32Array(bufferSize);

  var limit = 1;
  var bit = bufferSize >> 1;

  var i;

  while (limit < bufferSize) {
    for (i = 0; i < limit; i++) {
      this.reverseTable[i + limit] = this.reverseTable[i] + bit;
    }

    limit = limit << 1;
    bit = bit >> 1;
  }

  this.sinTable = new Float32Array(bufferSize);
  this.cosTable = new Float32Array(bufferSize);

  for (i = 0; i < bufferSize; i++) {
    this.sinTable[i] = Math.sin(-Math.PI/i);
    this.cosTable[i] = Math.cos(-Math.PI/i);
  }
}

/**
 * Performs a forward transform on the sample buffer.
 * Converts a time domain signal to frequency domain spectra.
 *
 * @param {Array} buffer The sample buffer. Buffer Length must be power of 2
 *
 * @returns The frequency spectrum array
 */
FFT.prototype.forward = function(buffer) {
  // Locally scope variables for speed up
  var bufferSize      = this.bufferSize,
      cosTable        = this.cosTable,
      sinTable        = this.sinTable,
      reverseTable    = this.reverseTable,
      real            = this.real,
      imag            = this.imag,
      spectrum        = this.spectrum;

  var k = Math.floor(Math.log(bufferSize) / Math.LN2);

  if (Math.pow(2, k) !== bufferSize) { throw "Invalid buffer size, must be a power of 2."; }
  if (bufferSize !== buffer.length)  { throw "Supplied buffer is not the same size as defined FFT. FFT Size: " + bufferSize + " Buffer Size: " + buffer.length; }

  var halfSize = 1,
      phaseShiftStepReal,
      phaseShiftStepImag,
      currentPhaseShiftReal,
      currentPhaseShiftImag,
      off,
      tr,
      ti,
      tmpReal,
      i;

  for (i = 0; i < bufferSize; i++) {
    real[i] = buffer[reverseTable[i]];
    imag[i] = 0;
  }

  while (halfSize < bufferSize) {
    //phaseShiftStepReal = Math.cos(-Math.PI/halfSize);
    //phaseShiftStepImag = Math.sin(-Math.PI/halfSize);
    phaseShiftStepReal = cosTable[halfSize];
    phaseShiftStepImag = sinTable[halfSize];
    
    currentPhaseShiftReal = 1;
    currentPhaseShiftImag = 0;

    for (var fftStep = 0; fftStep < halfSize; fftStep++) {
      i = fftStep;

      while (i < bufferSize) {
        off = i + halfSize;
        tr = (currentPhaseShiftReal * real[off]) - (currentPhaseShiftImag * imag[off]);
        ti = (currentPhaseShiftReal * imag[off]) + (currentPhaseShiftImag * real[off]);

        real[off] = real[i] - tr;
        imag[off] = imag[i] - ti;
        real[i] += tr;
        imag[i] += ti;

        i += halfSize << 1;
      }

      tmpReal = currentPhaseShiftReal;
      currentPhaseShiftReal = (tmpReal * phaseShiftStepReal) - (currentPhaseShiftImag * phaseShiftStepImag);
      currentPhaseShiftImag = (tmpReal * phaseShiftStepImag) + (currentPhaseShiftImag * phaseShiftStepReal);
    }

    halfSize = halfSize << 1;
  }

  return this.calculateSpectrum();
};

FFT.prototype.inverse = function(real, imag) {
  // Locally scope variables for speed up
  var bufferSize      = this.bufferSize,
      cosTable        = this.cosTable,
      sinTable        = this.sinTable,
      reverseTable    = this.reverseTable,
      spectrum        = this.spectrum;
     
      real = real || this.real;
      imag = imag || this.imag;

  var halfSize = 1,
      phaseShiftStepReal,
      phaseShiftStepImag,
      currentPhaseShiftReal,
      currentPhaseShiftImag,
      off,
      tr,
      ti,
      tmpReal,
      i;

  for (i = 0; i < bufferSize; i++) {
    imag[i] *= -1;
  }

  var revReal = new Float32Array(bufferSize);
  var revImag = new Float32Array(bufferSize);
 
  for (i = 0; i < real.length; i++) {
    revReal[i] = real[reverseTable[i]];
    revImag[i] = imag[reverseTable[i]];
  }
 
  real = revReal;
  imag = revImag;

  while (halfSize < bufferSize) {
    phaseShiftStepReal = cosTable[halfSize];
    phaseShiftStepImag = sinTable[halfSize];
    currentPhaseShiftReal = 1;
    currentPhaseShiftImag = 0;

    for (var fftStep = 0; fftStep < halfSize; fftStep++) {
      i = fftStep;

      while (i < bufferSize) {
        off = i + halfSize;
        tr = (currentPhaseShiftReal * real[off]) - (currentPhaseShiftImag * imag[off]);
        ti = (currentPhaseShiftReal * imag[off]) + (currentPhaseShiftImag * real[off]);

        real[off] = real[i] - tr;
        imag[off] = imag[i] - ti;
        real[i] += tr;
        imag[i] += ti;

        i += halfSize << 1;
      }

      tmpReal = currentPhaseShiftReal;
      currentPhaseShiftReal = (tmpReal * phaseShiftStepReal) - (currentPhaseShiftImag * phaseShiftStepImag);
      currentPhaseShiftImag = (tmpReal * phaseShiftStepImag) + (currentPhaseShiftImag * phaseShiftStepReal);
    }

    halfSize = halfSize << 1;
  }

  var buffer = new Float32Array(bufferSize); // this should be reused instead
  for (i = 0; i < bufferSize; i++) {
    buffer[i] = real[i] / bufferSize;
  }

  return buffer;
};

/**
 * RFFT is a class for calculating the Discrete Fourier Transform of a signal
 * with the Fast Fourier Transform algorithm.
 *
 * This method currently only contains a forward transform but is highly optimized.
 *
 * @param {Number} bufferSize The size of the sample buffer to be computed. Must be power of 2
 * @param {Number} sampleRate The sampleRate of the buffer (eg. 44100)
 *
 * @constructor
 */

// lookup tables don't really gain us any speed, but they do increase
// cache footprint, so don't use them in here

// also we don't use sepearate arrays for real/imaginary parts

// this one a little more than twice as fast as the one in FFT
// however I only did the forward transform

// the rest of this was translated from C, see http://www.jjj.de/fxt/
// this is the real split radix FFT

function RFFT(bufferSize, sampleRate) {
  FourierTransform.call(this, bufferSize, sampleRate);

  this.trans = new Float32Array(bufferSize);

  this.reverseTable = new Uint32Array(bufferSize);

  // don't use a lookup table to do the permute, use this instead
  this.reverseBinPermute = function (dest, source) {
    var bufferSize  = this.bufferSize, 
        halfSize    = bufferSize >>> 1, 
        nm1         = bufferSize - 1, 
        i = 1, r = 0, h;

    dest[0] = source[0];

    do {
      r += halfSize;
      dest[i] = source[r];
      dest[r] = source[i];
      
      i++;

      h = halfSize << 1;
      while (h = h >> 1, !((r ^= h) & h));

      if (r >= i) { 
        dest[i]     = source[r]; 
        dest[r]     = source[i];

        dest[nm1-i] = source[nm1-r]; 
        dest[nm1-r] = source[nm1-i];
      }
      i++;
    } while (i < halfSize);
    dest[nm1] = source[nm1];
  };

  this.generateReverseTable = function () {
    var bufferSize  = this.bufferSize, 
        halfSize    = bufferSize >>> 1, 
        nm1         = bufferSize - 1, 
        i = 1, r = 0, h;

    this.reverseTable[0] = 0;

    do {
      r += halfSize;
      
      this.reverseTable[i] = r;
      this.reverseTable[r] = i;

      i++;

      h = halfSize << 1;
      while (h = h >> 1, !((r ^= h) & h));

      if (r >= i) { 
        this.reverseTable[i] = r;
        this.reverseTable[r] = i;

        this.reverseTable[nm1-i] = nm1-r;
        this.reverseTable[nm1-r] = nm1-i;
      }
      i++;
    } while (i < halfSize);

    this.reverseTable[nm1] = nm1;
  };

  this.generateReverseTable();
}


// Ordering of output:
//
// trans[0]     = re[0] (==zero frequency, purely real)
// trans[1]     = re[1]
//             ...
// trans[n/2-1] = re[n/2-1]
// trans[n/2]   = re[n/2]    (==nyquist frequency, purely real)
//
// trans[n/2+1] = im[n/2-1]
// trans[n/2+2] = im[n/2-2]
//             ...
// trans[n-1]   = im[1] 

RFFT.prototype.forward = function(buffer) {
  var n         = this.bufferSize, 
      spectrum  = this.spectrum,
      x         = this.trans, 
      TWO_PI    = 2*Math.PI,
      sqrt      = Math.sqrt,
      i         = n >>> 1,
      bSi       = 2 / n,
      n2, n4, n8, nn, 
      t1, t2, t3, t4, 
      i1, i2, i3, i4, i5, i6, i7, i8, 
      st1, cc1, ss1, cc3, ss3,
      e, 
      a,
      rval, ival, mag; 

  this.reverseBinPermute(x, buffer);

  /*
  var reverseTable = this.reverseTable;

  for (var k = 0, len = reverseTable.length; k < len; k++) {
    x[k] = buffer[reverseTable[k]];
  }
  */

  for (var ix = 0, id = 4; ix < n; id *= 4) {
    for (var i0 = ix; i0 < n; i0 += id) {
      //sumdiff(x[i0], x[i0+1]); // {a, b}  <--| {a+b, a-b}
      st1 = x[i0] - x[i0+1];
      x[i0] += x[i0+1];
      x[i0+1] = st1;
    } 
    ix = 2*(id-1);
  }

  n2 = 2;
  nn = n >>> 1;

  while((nn = nn >>> 1)) {
    ix = 0;
    n2 = n2 << 1;
    id = n2 << 1;
    n4 = n2 >>> 2;
    n8 = n2 >>> 3;
    do {
      if(n4 !== 1) {
        for(i0 = ix; i0 < n; i0 += id) {
          i1 = i0;
          i2 = i1 + n4;
          i3 = i2 + n4;
          i4 = i3 + n4;
     
          //diffsum3_r(x[i3], x[i4], t1); // {a, b, s} <--| {a, b-a, a+b}
          t1 = x[i3] + x[i4];
          x[i4] -= x[i3];
          //sumdiff3(x[i1], t1, x[i3]);   // {a, b, d} <--| {a+b, b, a-b}
          x[i3] = x[i1] - t1; 
          x[i1] += t1;
     
          i1 += n8;
          i2 += n8;
          i3 += n8;
          i4 += n8;
         
          //sumdiff(x[i3], x[i4], t1, t2); // {s, d}  <--| {a+b, a-b}
          t1 = x[i3] + x[i4];
          t2 = x[i3] - x[i4];
         
          t1 = -t1 * Math.SQRT1_2;
          t2 *= Math.SQRT1_2;
     
          // sumdiff(t1, x[i2], x[i4], x[i3]); // {s, d}  <--| {a+b, a-b}
          st1 = x[i2];
          x[i4] = t1 + st1; 
          x[i3] = t1 - st1;
          
          //sumdiff3(x[i1], t2, x[i2]); // {a, b, d} <--| {a+b, b, a-b}
          x[i2] = x[i1] - t2;
          x[i1] += t2;
        }
      } else {
        for(i0 = ix; i0 < n; i0 += id) {
          i1 = i0;
          i2 = i1 + n4;
          i3 = i2 + n4;
          i4 = i3 + n4;
     
          //diffsum3_r(x[i3], x[i4], t1); // {a, b, s} <--| {a, b-a, a+b}
          t1 = x[i3] + x[i4]; 
          x[i4] -= x[i3];
          
          //sumdiff3(x[i1], t1, x[i3]);   // {a, b, d} <--| {a+b, b, a-b}
          x[i3] = x[i1] - t1; 
          x[i1] += t1;
        }
      }
   
      ix = (id << 1) - n2;
      id = id << 2;
    } while (ix < n);
 
    e = TWO_PI / n2;

    for (var j = 1; j < n8; j++) {
      a = j * e;
      ss1 = Math.sin(a);
      cc1 = Math.cos(a);

      //ss3 = sin(3*a); cc3 = cos(3*a);
      cc3 = 4*cc1*(cc1*cc1-0.75);
      ss3 = 4*ss1*(0.75-ss1*ss1);
   
      ix = 0; id = n2 << 1;
      do {
        for (i0 = ix; i0 < n; i0 += id) {
          i1 = i0 + j;
          i2 = i1 + n4;
          i3 = i2 + n4;
          i4 = i3 + n4;
       
          i5 = i0 + n4 - j;
          i6 = i5 + n4;
          i7 = i6 + n4;
          i8 = i7 + n4;
       
          //cmult(c, s, x, y, &u, &v)
          //cmult(cc1, ss1, x[i7], x[i3], t2, t1); // {u,v} <--| {x*c-y*s, x*s+y*c}
          t2 = x[i7]*cc1 - x[i3]*ss1; 
          t1 = x[i7]*ss1 + x[i3]*cc1;
          
          //cmult(cc3, ss3, x[i8], x[i4], t4, t3);
          t4 = x[i8]*cc3 - x[i4]*ss3; 
          t3 = x[i8]*ss3 + x[i4]*cc3;
       
          //sumdiff(t2, t4);   // {a, b} <--| {a+b, a-b}
          st1 = t2 - t4;
          t2 += t4;
          t4 = st1;
          
          //sumdiff(t2, x[i6], x[i8], x[i3]); // {s, d}  <--| {a+b, a-b}
          //st1 = x[i6]; x[i8] = t2 + st1; x[i3] = t2 - st1;
          x[i8] = t2 + x[i6]; 
          x[i3] = t2 - x[i6];
         
          //sumdiff_r(t1, t3); // {a, b} <--| {a+b, b-a}
          st1 = t3 - t1;
          t1 += t3;
          t3 = st1;
          
          //sumdiff(t3, x[i2], x[i4], x[i7]); // {s, d}  <--| {a+b, a-b}
          //st1 = x[i2]; x[i4] = t3 + st1; x[i7] = t3 - st1;
          x[i4] = t3 + x[i2]; 
          x[i7] = t3 - x[i2];
         
          //sumdiff3(x[i1], t1, x[i6]);   // {a, b, d} <--| {a+b, b, a-b}
          x[i6] = x[i1] - t1; 
          x[i1] += t1;
          
          //diffsum3_r(t4, x[i5], x[i2]); // {a, b, s} <--| {a, b-a, a+b}
          x[i2] = t4 + x[i5]; 
          x[i5] -= t4;
        }
     
        ix = (id << 1) - n2;
        id = id << 2;
   
      } while (ix < n);
    }
  }

  while (--i) {
    rval = x[i];
    ival = x[n-i-1];
    mag = bSi * sqrt(rval * rval + ival * ival);

    if (mag > this.peak) {
      this.peakBand = i;
      this.peak = mag;
    }

    spectrum[i] = mag;
  }

  spectrum[0] = bSi * x[0];

  return spectrum;
};

function Sampler(file, bufferSize, sampleRate, playStart, playEnd, loopStart, loopEnd, loopMode) {
  this.file = file;
  this.bufferSize = bufferSize;
  this.sampleRate = sampleRate;
  this.playStart  = playStart || 0; // 0%
  this.playEnd    = playEnd   || 1; // 100%
  this.loopStart  = loopStart || 0;
  this.loopEnd    = loopEnd   || 1;
  this.loopMode   = loopMode  || DSP.OFF;
  this.loaded     = false;
  this.samples    = [];
  this.signal     = new Float32Array(bufferSize);
  this.frameCount = 0;
  this.envelope   = null;
  this.amplitude  = 1;
  this.rootFrequency = 110; // A2 110
  this.frequency  = 550;
  this.step       = this.frequency / this.rootFrequency;
  this.duration   = 0;
  this.samplesProcessed = 0;
  this.playhead   = 0;
 
  var audio = /* new Audio();*/ document.createElement("AUDIO");
  var self = this;
 
  this.loadSamples = function(event) {
    var buffer = DSP.getChannel(DSP.MIX, event.frameBuffer);
    for ( var i = 0; i < buffer.length; i++) {
      self.samples.push(buffer[i]);
    }
  };
 
  this.loadComplete = function() {
    // convert flexible js array into a fast typed array
    self.samples = new Float32Array(self.samples);
    self.loaded = true;
  };
 
  this.loadMetaData = function() {
    self.duration = audio.duration;
  };
 
  audio.addEventListener("MozAudioAvailable", this.loadSamples, false);
  audio.addEventListener("loadedmetadata", this.loadMetaData, false);
  audio.addEventListener("ended", this.loadComplete, false);
  audio.muted = true;
  audio.src = file;
  audio.play();
}

Sampler.prototype.applyEnvelope = function() {
  this.envelope.process(this.signal);
  return this.signal;
};

Sampler.prototype.generate = function() {
  var frameOffset = this.frameCount * this.bufferSize;
 
  var loopWidth = this.playEnd * this.samples.length - this.playStart * this.samples.length;
  var playStartSamples = this.playStart * this.samples.length; // ie 0.5 -> 50% of the length
  var playEndSamples = this.playEnd * this.samples.length; // ie 0.5 -> 50% of the length
  var offset;

  for ( var i = 0; i < this.bufferSize; i++ ) {
    switch (this.loopMode) {
      case DSP.OFF:
        this.playhead = Math.round(this.samplesProcessed * this.step + playStartSamples);
        if (this.playhead < (this.playEnd * this.samples.length) ) {
          this.signal[i] = this.samples[this.playhead] * this.amplitude;
        } else {
          this.signal[i] = 0;
        }
        break;
     
      case DSP.FW:
        this.playhead = Math.round((this.samplesProcessed * this.step) % loopWidth + playStartSamples);
        if (this.playhead < (this.playEnd * this.samples.length) ) {
          this.signal[i] = this.samples[this.playhead] * this.amplitude;
        }
        break;
       
      case DSP.BW:
        this.playhead = playEndSamples - Math.round((this.samplesProcessed * this.step) % loopWidth);
        if (this.playhead < (this.playEnd * this.samples.length) ) {
          this.signal[i] = this.samples[this.playhead] * this.amplitude;
        }
        break;
       
      case DSP.FWBW:
        if ( Math.floor(this.samplesProcessed * this.step / loopWidth) % 2 === 0 ) {
          this.playhead = Math.round((this.samplesProcessed * this.step) % loopWidth + playStartSamples);
        } else {
          this.playhead = playEndSamples - Math.round((this.samplesProcessed * this.step) % loopWidth);
        }  
        if (this.playhead < (this.playEnd * this.samples.length) ) {
          this.signal[i] = this.samples[this.playhead] * this.amplitude;
        }
        break;
    }
    this.samplesProcessed++;
  }

  this.frameCount++;

  return this.signal;
};

Sampler.prototype.setFreq = function(frequency) {
    var totalProcessed = this.samplesProcessed * this.step;
    this.frequency = frequency;
    this.step = this.frequency / this.rootFrequency;
    this.samplesProcessed = Math.round(totalProcessed/this.step);
};

Sampler.prototype.reset = function() {
  this.samplesProcessed = 0;
  this.playhead = 0;
};

/**
 * Oscillator class for generating and modifying signals
 *
 * @param {Number} type       A waveform constant (eg. DSP.SINE)
 * @param {Number} frequency  Initial frequency of the signal
 * @param {Number} amplitude  Initial amplitude of the signal
 * @param {Number} bufferSize Size of the sample buffer to generate
 * @param {Number} sampleRate The sample rate of the signal
 *
 * @contructor
 */
function Oscillator(type, frequency, amplitude, bufferSize, sampleRate) {
  this.frequency  = frequency;
  this.amplitude  = amplitude;
  this.bufferSize = bufferSize;
  this.sampleRate = sampleRate;
  //this.pulseWidth = pulseWidth;
  this.frameCount = 0;
 
  this.waveTableLength = 2048;

  this.cyclesPerSample = frequency / sampleRate;

  this.signal = new Float32Array(bufferSize);
  this.envelope = null;

  switch(parseInt(type, 10)) {
    case DSP.TRIANGLE:
      this.func = Oscillator.Triangle;
      break;

    case DSP.SAW:
      this.func = Oscillator.Saw;
      break;

    case DSP.SQUARE:
      this.func = Oscillator.Square;
      break;

    default:
    case DSP.SINE:
      this.func = Oscillator.Sine;
      break;
  }

  this.generateWaveTable = function() {
    Oscillator.waveTable[this.func] = new Float32Array(2048);
    var waveTableTime = this.waveTableLength / this.sampleRate;
    var waveTableHz = 1 / waveTableTime;

    for (var i = 0; i < this.waveTableLength; i++) {
      Oscillator.waveTable[this.func][i] = this.func(i * waveTableHz/this.sampleRate);
    }
  };

  if ( typeof Oscillator.waveTable === 'undefined' ) {
    Oscillator.waveTable = {};
  }

  if ( typeof Oscillator.waveTable[this.func] === 'undefined' ) {
    this.generateWaveTable();
  }
 
  this.waveTable = Oscillator.waveTable[this.func];
}

/**
 * Set the amplitude of the signal
 *
 * @param {Number} amplitude The amplitude of the signal (between 0 and 1)
 */
Oscillator.prototype.setAmp = function(amplitude) {
  if (amplitude >= 0 && amplitude <= 1) {
    this.amplitude = amplitude;
  } else {
    throw "Amplitude out of range (0..1).";
  }
};
  
/**
 * Set the frequency of the signal
 *
 * @param {Number} frequency The frequency of the signal
 */  
Oscillator.prototype.setFreq = function(frequency) {
  this.frequency = frequency;
  this.cyclesPerSample = frequency / this.sampleRate;
};
     
// Add an oscillator
Oscillator.prototype.add = function(oscillator) {
  for ( var i = 0; i < this.bufferSize; i++ ) {
    //this.signal[i] += oscillator.valueAt(i);
    this.signal[i] += oscillator.signal[i];
  }
 
  return this.signal;
};
     
// Add a signal to the current generated osc signal
Oscillator.prototype.addSignal = function(signal) {
  for ( var i = 0; i < signal.length; i++ ) {
    if ( i >= this.bufferSize ) {
      break;
    }
    this.signal[i] += signal[i];
   
    /*
    // Constrain amplitude
    if ( this.signal[i] > 1 ) {
      this.signal[i] = 1;
    } else if ( this.signal[i] < -1 ) {
      this.signal[i] = -1;
    }
    */
  }
  return this.signal;
};
     
// Add an envelope to the oscillator
Oscillator.prototype.addEnvelope = function(envelope) {
  this.envelope = envelope;
};

Oscillator.prototype.applyEnvelope = function() {
  this.envelope.process(this.signal);
};
     
Oscillator.prototype.valueAt = function(offset) {
  return this.waveTable[offset % this.waveTableLength];
};
     
Oscillator.prototype.generate = function() {
  var frameOffset = this.frameCount * this.bufferSize;
  var step = this.waveTableLength * this.frequency / this.sampleRate;
  var offset;

  for ( var i = 0; i < this.bufferSize; i++ ) {
    //var step = (frameOffset + i) * this.cyclesPerSample % 1;
    //this.signal[i] = this.func(step) * this.amplitude;
    //this.signal[i] = this.valueAt(Math.round((frameOffset + i) * step)) * this.amplitude;
    offset = Math.round((frameOffset + i) * step);
    this.signal[i] = this.waveTable[offset % this.waveTableLength] * this.amplitude;
  }

  this.frameCount++;

  return this.signal;
};

Oscillator.Sine = function(step) {
  return Math.sin(DSP.TWO_PI * step);
};

Oscillator.Square = function(step) {
  return step < 0.5 ? 1 : -1;
};

Oscillator.Saw = function(step) {
  return 2 * (step - Math.round(step));
};

Oscillator.Triangle = function(step) {
  return 1 - 4 * Math.abs(Math.round(step) - step);
};

Oscillator.Pulse = function(step) {
  // stub
};
 
function ADSR(attackLength, decayLength, sustainLevel, sustainLength, releaseLength, sampleRate) {
  this.sampleRate = sampleRate;
  // Length in seconds
  this.attackLength  = attackLength;
  this.decayLength   = decayLength;
  this.sustainLevel  = sustainLevel;
  this.sustainLength = sustainLength;
  this.releaseLength = releaseLength;
  this.sampleRate    = sampleRate;
 
  // Length in samples
  this.attackSamples  = attackLength  * sampleRate;
  this.decaySamples   = decayLength   * sampleRate;
  this.sustainSamples = sustainLength * sampleRate;
  this.releaseSamples = releaseLength * sampleRate;
 
  // Updates the envelope sample positions
  this.update = function() {
    this.attack         =                this.attackSamples;
    this.decay          = this.attack  + this.decaySamples;
    this.sustain        = this.decay   + this.sustainSamples;
    this.release        = this.sustain + this.releaseSamples;
  };
 
  this.update();
 
  this.samplesProcessed = 0;
}

ADSR.prototype.noteOn = function() {
  this.samplesProcessed = 0;
  this.sustainSamples = this.sustainLength * this.sampleRate;
  this.update();
};

// Send a note off when using a sustain of infinity to let the envelope enter the release phase
ADSR.prototype.noteOff = function() {
  this.sustainSamples = this.samplesProcessed - this.decaySamples;
  this.update();
};

ADSR.prototype.processSample = function(sample) {
  var amplitude = 0;

  if ( this.samplesProcessed <= this.attack ) {
    amplitude = 0 + (1 - 0) * ((this.samplesProcessed - 0) / (this.attack - 0));
  } else if ( this.samplesProcessed > this.attack && this.samplesProcessed <= this.decay ) {
    amplitude = 1 + (this.sustainLevel - 1) * ((this.samplesProcessed - this.attack) / (this.decay - this.attack));
  } else if ( this.samplesProcessed > this.decay && this.samplesProcessed <= this.sustain ) {
    amplitude = this.sustainLevel;
  } else if ( this.samplesProcessed > this.sustain && this.samplesProcessed <= this.release ) {
    amplitude = this.sustainLevel + (0 - this.sustainLevel) * ((this.samplesProcessed - this.sustain) / (this.release - this.sustain));
  }
 
  return sample * amplitude;
};

ADSR.prototype.value = function() {
  var amplitude = 0;

  if ( this.samplesProcessed <= this.attack ) {
    amplitude = 0 + (1 - 0) * ((this.samplesProcessed - 0) / (this.attack - 0));
  } else if ( this.samplesProcessed > this.attack && this.samplesProcessed <= this.decay ) {
    amplitude = 1 + (this.sustainLevel - 1) * ((this.samplesProcessed - this.attack) / (this.decay - this.attack));
  } else if ( this.samplesProcessed > this.decay && this.samplesProcessed <= this.sustain ) {
    amplitude = this.sustainLevel;
  } else if ( this.samplesProcessed > this.sustain && this.samplesProcessed <= this.release ) {
    amplitude = this.sustainLevel + (0 - this.sustainLevel) * ((this.samplesProcessed - this.sustain) / (this.release - this.sustain));
  }
 
  return amplitude;
};
     
ADSR.prototype.process = function(buffer) {
  for ( var i = 0; i < buffer.length; i++ ) {
    buffer[i] *= this.value();

    this.samplesProcessed++;
  }
 
  return buffer;
};
     
     
ADSR.prototype.isActive = function() {
  if ( this.samplesProcessed > this.release || this.samplesProcessed === -1 ) {
    return false;
  } else {
    return true;
  }
};

ADSR.prototype.disable = function() {
  this.samplesProcessed = -1;
};
 
function IIRFilter(type, cutoff, resonance, sampleRate) {
  this.sampleRate = sampleRate;

  switch(type) {
    case DSP.LOWPASS:
    case DSP.LP12:
      this.func = new IIRFilter.LP12(cutoff, resonance, sampleRate);
      break;
  }
}

IIRFilter.prototype.__defineGetter__('cutoff',
  function() {
    return this.func.cutoff;
  }
);

IIRFilter.prototype.__defineGetter__('resonance',
  function() {
    return this.func.resonance;
  }
);

IIRFilter.prototype.set = function(cutoff, resonance) {
  this.func.calcCoeff(cutoff, resonance);
};

IIRFilter.prototype.process = function(buffer) {
  this.func.process(buffer);
};

// Add an envelope to the filter
IIRFilter.prototype.addEnvelope = function(envelope) {
  if ( envelope instanceof ADSR ) {
    this.func.addEnvelope(envelope);
  } else {
    throw "Not an envelope.";
  }
};

IIRFilter.LP12 = function(cutoff, resonance, sampleRate) {
  this.sampleRate = sampleRate;
  this.vibraPos   = 0;
  this.vibraSpeed = 0;
  this.envelope = false;
 
  this.calcCoeff = function(cutoff, resonance) {
    this.w = 2.0 * Math.PI * cutoff / this.sampleRate;
    this.q = 1.0 - this.w / (2.0 * (resonance + 0.5 / (1.0 + this.w)) + this.w - 2.0);
    this.r = this.q * this.q;
    this.c = this.r + 1.0 - 2.0 * Math.cos(this.w) * this.q;
   
    this.cutoff = cutoff;
    this.resonance = resonance;
  };

  this.calcCoeff(cutoff, resonance);

  this.process = function(buffer) {
    for ( var i = 0; i < buffer.length; i++ ) {
      this.vibraSpeed += (buffer[i] - this.vibraPos) * this.c;
      this.vibraPos   += this.vibraSpeed;
      this.vibraSpeed *= this.r;
   
      /*
      var temp = this.vibraPos;
     
      if ( temp > 1.0 ) {
        temp = 1.0;
      } else if ( temp < -1.0 ) {
        temp = -1.0;
      } else if ( temp != temp ) {
        temp = 1;
      }
     
      buffer[i] = temp;
      */

      if (this.envelope) {
        buffer[i] = (buffer[i] * (1 - this.envelope.value())) + (this.vibraPos * this.envelope.value());
        this.envelope.samplesProcessed++;
      } else {
        buffer[i] = this.vibraPos;
      }
    }
  };
}; 

IIRFilter.LP12.prototype.addEnvelope = function(envelope) {
  this.envelope = envelope;
};

function IIRFilter2(type, cutoff, resonance, sampleRate) {
  this.type = type;
  this.cutoff = cutoff;
  this.resonance = resonance;
  this.sampleRate = sampleRate;

  this.f = Float32Array(4);
  this.f[0] = 0.0; // lp
  this.f[1] = 0.0; // hp
  this.f[2] = 0.0; // bp
  this.f[3] = 0.0; // br 
 
  this.calcCoeff = function(cutoff, resonance) {
    this.freq = 2 * Math.sin(Math.PI * Math.min(0.25, cutoff/(this.sampleRate*2)));  
    this.damp = Math.min(2 * (1 - Math.pow(resonance, 0.25)), Math.min(2, 2/this.freq - this.freq * 0.5));
  };

  this.calcCoeff(cutoff, resonance);
}

IIRFilter2.prototype.process = function(buffer) {
  var input, output;
  var f = this.f;

  for ( var i = 0; i < buffer.length; i++ ) {
    input = buffer[i];

    // first pass
    f[3] = input - this.damp * f[2];
    f[0] = f[0] + this.freq * f[2];
    f[1] = f[3] - f[0];
    f[2] = this.freq * f[1] + f[2];
    output = 0.5 * f[this.type];

    // second pass
    f[3] = input - this.damp * f[2];
    f[0] = f[0] + this.freq * f[2];
    f[1] = f[3] - f[0];
    f[2] = this.freq * f[1] + f[2];
    output += 0.5 * f[this.type];

    if (this.envelope) {
      buffer[i] = (buffer[i] * (1 - this.envelope.value())) + (output * this.envelope.value());
      this.envelope.samplesProcessed++;
    } else {
      buffer[i] = output;
    }
  }
};

IIRFilter2.prototype.addEnvelope = function(envelope) {
  if ( envelope instanceof ADSR ) {
    this.envelope = envelope;
  } else {
    throw "This is not an envelope.";
  }
};

IIRFilter2.prototype.set = function(cutoff, resonance) {
  this.calcCoeff(cutoff, resonance);
};



function WindowFunction(type, alpha) {
  this.alpha = alpha;
 
  switch(type) {
    case DSP.BARTLETT:
      this.func = WindowFunction.Bartlett;
      break;
     
    case DSP.BARTLETTHANN:
      this.func = WindowFunction.BartlettHann;
      break;
     
    case DSP.BLACKMAN:
      this.func = WindowFunction.Blackman;
      this.alpha = this.alpha || 0.16;
      break;
   
    case DSP.COSINE:
      this.func = WindowFunction.Cosine;
      break;
     
    case DSP.GAUSS:
      this.func = WindowFunction.Gauss;
      this.alpha = this.alpha || 0.25;
      break;
     
    case DSP.HAMMING:
      this.func = WindowFunction.Hamming;
      break;
     
    case DSP.HANN:
      this.func = WindowFunction.Hann;
      break;
   
    case DSP.LANCZOS:
      this.func = WindowFunction.Lanczoz;
      break;
     
    case DSP.RECTANGULAR:
      this.func = WindowFunction.Rectangular;
      break;
     
    case DSP.TRIANGULAR:
      this.func = WindowFunction.Triangular;
      break;
  }
}

WindowFunction.prototype.process = function(buffer) {
  var length = buffer.length;
  for ( var i = 0; i < length; i++ ) {
    buffer[i] *= this.func(length, i, this.alpha);
  }
  return buffer;
};

WindowFunction.Bartlett = function(length, index) {
  return 2 / (length - 1) * ((length - 1) / 2 - Math.abs(index - (length - 1) / 2));
};

WindowFunction.BartlettHann = function(length, index) {
  return 0.62 - 0.48 * Math.abs(index / (length - 1) - 0.5) - 0.38 * Math.cos(DSP.TWO_PI * index / (length - 1));
};

WindowFunction.Blackman = function(length, index, alpha) {
  var a0 = (1 - alpha) / 2;
  var a1 = 0.5;
  var a2 = alpha / 2;

  return a0 - a1 * Math.cos(DSP.TWO_PI * index / (length - 1)) + a2 * Math.cos(4 * Math.PI * index / (length - 1));
};

WindowFunction.Cosine = function(length, index) {
  return Math.cos(Math.PI * index / (length - 1) - Math.PI / 2);
};

WindowFunction.Gauss = function(length, index, alpha) {
  return Math.pow(Math.E, -0.5 * Math.pow((index - (length - 1) / 2) / (alpha * (length - 1) / 2), 2));
};

WindowFunction.Hamming = function(length, index) {
  return 0.54 - 0.46 * Math.cos(DSP.TWO_PI * index / (length - 1));
};

WindowFunction.Hann = function(length, index) {
  return 0.5 * (1 - Math.cos(DSP.TWO_PI * index / (length - 1)));
};

WindowFunction.Lanczos = function(length, index) {
  var x = 2 * index / (length - 1) - 1;
  return Math.sin(Math.PI * x) / (Math.PI * x);
};

WindowFunction.Rectangular = function(length, index) {
  return 1;
};

WindowFunction.Triangular = function(length, index) {
  return 2 / length * (length / 2 - Math.abs(index - (length - 1) / 2));
};

function sinh (arg) {
  // Returns the hyperbolic sine of the number, defined as (exp(number) - exp(-number))/2 
  //
  // version: 1004.2314
  // discuss at: http://phpjs.org/functions/sinh    // +   original by: Onno Marsman
  // *     example 1: sinh(-0.9834330348825909);
  // *     returns 1: -1.1497971402636502
  return (Math.exp(arg) - Math.exp(-arg))/2;
}

/* 
 *  Biquad filter
 * 
 *  Created by Ricard Marxer <email@ricardmarxer.com> on 2010-05-23.
 *  Copyright 2010 Ricard Marxer. All rights reserved.
 *
 */
// Implementation based on:
// http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt
function Biquad(type, sampleRate) {
  this.Fs = sampleRate;
  this.type = type;  // type of the filter
  this.parameterType = DSP.Q; // type of the parameter

  this.x_1_l = 0;
  this.x_2_l = 0;
  this.y_1_l = 0;
  this.y_2_l = 0;

  this.x_1_r = 0;
  this.x_2_r = 0;
  this.y_1_r = 0;
  this.y_2_r = 0;

  this.b0 = 1;
  this.a0 = 1;

  this.b1 = 0;
  this.a1 = 0;

  this.b2 = 0;
  this.a2 = 0;

  this.b0a0 = this.b0 / this.a0;
  this.b1a0 = this.b1 / this.a0;
  this.b2a0 = this.b2 / this.a0;
  this.a1a0 = this.a1 / this.a0;
  this.a2a0 = this.a2 / this.a0;

  this.f0 = 3000;   // "wherever it's happenin', man."  Center Frequency or
                    // Corner Frequency, or shelf midpoint frequency, depending
                    // on which filter type.  The "significant frequency".

  this.dBgain = 12; // used only for peaking and shelving filters

  this.Q = 1;       // the EE kind of definition, except for peakingEQ in which A*Q is
                    // the classic EE Q.  That adjustment in definition was made so that
                    // a boost of N dB followed by a cut of N dB for identical Q and
                    // f0/Fs results in a precisely flat unity gain filter or "wire".

  this.BW = -3;     // the bandwidth in octaves (between -3 dB frequencies for BPF
                    // and notch or between midpoint (dBgain/2) gain frequencies for
                    // peaking EQ

  this.S = 1;       // a "shelf slope" parameter (for shelving EQ only).  When S = 1,
                    // the shelf slope is as steep as it can be and remain monotonically
                    // increasing or decreasing gain with frequency.  The shelf slope, in
                    // dB/octave, remains proportional to S for all other values for a
                    // fixed f0/Fs and dBgain.

  this.coefficients = function() {
    var b = [this.b0, this.b1, this.b2];
    var a = [this.a0, this.a1, this.a2];
    return {b: b, a:a};
  };

  this.setFilterType = function(type) {
    this.type = type;
    this.recalculateCoefficients();
  };

  this.setSampleRate = function(rate) {
    this.Fs = rate;
    this.recalculateCoefficients();
  };

  this.setQ = function(q) {
    this.parameterType = DSP.Q;
    this.Q = Math.max(Math.min(q, 115.0), 0.001);
    this.recalculateCoefficients();
  };

  this.setBW = function(bw) {
    this.parameterType = DSP.BW;
    this.BW = bw;
    this.recalculateCoefficients();
  };

  this.setS = function(s) {
    this.parameterType = DSP.S;
    this.S = Math.max(Math.min(s, 5.0), 0.0001);
    this.recalculateCoefficients();
  };

  this.setF0 = function(freq) {
    this.f0 = freq;
    this.recalculateCoefficients();
  }; 
 
  this.setDbGain = function(g) {
    this.dBgain = g;
    this.recalculateCoefficients();
  };

  this.recalculateCoefficients = function() {
    var A;
    if (type === DSP.PEAKING_EQ || type === DSP.LOW_SHELF || type === DSP.HIGH_SHELF ) {
      A = Math.pow(10, (this.dBgain/40));  // for peaking and shelving EQ filters only
    } else {
      A  = Math.sqrt( Math.pow(10, (this.dBgain/20)) );   
    }

    var w0 = DSP.TWO_PI * this.f0 / this.Fs;

    var cosw0 = Math.cos(w0);
    var sinw0 = Math.sin(w0);

    var alpha = 0;
   
    switch (this.parameterType) {
      case DSP.Q:
        alpha = sinw0/(2*this.Q);
        break;
           
      case DSP.BW:
        alpha = sinw0 * sinh( Math.LN2/2 * this.BW * w0/sinw0 );
        break;

      case DSP.S:
        alpha = sinw0/2 * Math.sqrt( (A + 1/A)*(1/this.S - 1) + 2 );
        break;
    }

    /**
        FYI: The relationship between bandwidth and Q is
             1/Q = 2*sinh(ln(2)/2*BW*w0/sin(w0))     (digital filter w BLT)
        or   1/Q = 2*sinh(ln(2)/2*BW)             (analog filter prototype)

        The relationship between shelf slope and Q is
             1/Q = sqrt((A + 1/A)*(1/S - 1) + 2)
    */

    var coeff;

    switch (this.type) {
      case DSP.LPF:       // H(s) = 1 / (s^2 + s/Q + 1)
        this.b0 =  (1 - cosw0)/2;
        this.b1 =   1 - cosw0;
        this.b2 =  (1 - cosw0)/2;
        this.a0 =   1 + alpha;
        this.a1 =  -2 * cosw0;
        this.a2 =   1 - alpha;
        break;

      case DSP.HPF:       // H(s) = s^2 / (s^2 + s/Q + 1)
        this.b0 =  (1 + cosw0)/2;
        this.b1 = -(1 + cosw0);
        this.b2 =  (1 + cosw0)/2;
        this.a0 =   1 + alpha;
        this.a1 =  -2 * cosw0;
        this.a2 =   1 - alpha;
        break;

      case DSP.BPF_CONSTANT_SKIRT:       // H(s) = s / (s^2 + s/Q + 1)  (constant skirt gain, peak gain = Q)
        this.b0 =   sinw0/2;
        this.b1 =   0;
        this.b2 =  -sinw0/2;
        this.a0 =   1 + alpha;
        this.a1 =  -2*cosw0;
        this.a2 =   1 - alpha;
        break;

      case DSP.BPF_CONSTANT_PEAK:       // H(s) = (s/Q) / (s^2 + s/Q + 1)      (constant 0 dB peak gain)
        this.b0 =   alpha;
        this.b1 =   0;
        this.b2 =  -alpha;
        this.a0 =   1 + alpha;
        this.a1 =  -2*cosw0;
        this.a2 =   1 - alpha;
        break;

      case DSP.NOTCH:     // H(s) = (s^2 + 1) / (s^2 + s/Q + 1)
        this.b0 =   1;
        this.b1 =  -2*cosw0;
        this.b2 =   1;
        this.a0 =   1 + alpha;
        this.a1 =  -2*cosw0;
        this.a2 =   1 - alpha;
        break;

      case DSP.APF:       // H(s) = (s^2 - s/Q + 1) / (s^2 + s/Q + 1)
        this.b0 =   1 - alpha;
        this.b1 =  -2*cosw0;
        this.b2 =   1 + alpha;
        this.a0 =   1 + alpha;
        this.a1 =  -2*cosw0;
        this.a2 =   1 - alpha;
        break;

      case DSP.PEAKING_EQ:  // H(s) = (s^2 + s*(A/Q) + 1) / (s^2 + s/(A*Q) + 1)
        this.b0 =   1 + alpha*A;
        this.b1 =  -2*cosw0;
        this.b2 =   1 - alpha*A;
        this.a0 =   1 + alpha/A;
        this.a1 =  -2*cosw0;
        this.a2 =   1 - alpha/A;
        break;

      case DSP.LOW_SHELF:   // H(s) = A * (s^2 + (sqrt(A)/Q)*s + A)/(A*s^2 + (sqrt(A)/Q)*s + 1)
        coeff = sinw0 * Math.sqrt( (A^2 + 1)*(1/this.S - 1) + 2*A );
        this.b0 =    A*((A+1) - (A-1)*cosw0 + coeff);
        this.b1 =  2*A*((A-1) - (A+1)*cosw0);
        this.b2 =    A*((A+1) - (A-1)*cosw0 - coeff);
        this.a0 =       (A+1) + (A-1)*cosw0 + coeff;
        this.a1 =   -2*((A-1) + (A+1)*cosw0);
        this.a2 =       (A+1) + (A-1)*cosw0 - coeff;
        break;

      case DSP.HIGH_SHELF:   // H(s) = A * (A*s^2 + (sqrt(A)/Q)*s + 1)/(s^2 + (sqrt(A)/Q)*s + A)
        coeff = sinw0 * Math.sqrt( (A^2 + 1)*(1/this.S - 1) + 2*A );
        this.b0 =    A*((A+1) + (A-1)*cosw0 + coeff);
        this.b1 = -2*A*((A-1) + (A+1)*cosw0);
        this.b2 =    A*((A+1) + (A-1)*cosw0 - coeff);
        this.a0 =       (A+1) - (A-1)*cosw0 + coeff;
        this.a1 =    2*((A-1) - (A+1)*cosw0);
        this.a2 =       (A+1) - (A-1)*cosw0 - coeff;
        break;
    }
   
    this.b0a0 = this.b0/this.a0;
    this.b1a0 = this.b1/this.a0;
    this.b2a0 = this.b2/this.a0;
    this.a1a0 = this.a1/this.a0;
    this.a2a0 = this.a2/this.a0;
  };

  this.process = function(buffer) {
      //y[n] = (b0/a0)*x[n] + (b1/a0)*x[n-1] + (b2/a0)*x[n-2]
      //       - (a1/a0)*y[n-1] - (a2/a0)*y[n-2]

      var len = buffer.length;
      var output = new Float32Array(len);

      for ( var i=0; i<buffer.length; i++ ) {
        output[i] = this.b0a0*buffer[i] + this.b1a0*this.x_1_l + this.b2a0*this.x_2_l - this.a1a0*this.y_1_l - this.a2a0*this.y_2_l;
        this.y_2_l = this.y_1_l;
        this.y_1_l = output[i];
        this.x_2_l = this.x_1_l;
        this.x_1_l = buffer[i];
      }

      return output;
  };

  this.processStereo = function(buffer) {
      //y[n] = (b0/a0)*x[n] + (b1/a0)*x[n-1] + (b2/a0)*x[n-2]
      //       - (a1/a0)*y[n-1] - (a2/a0)*y[n-2]

      var len = buffer.length;
      var output = new Float32Array(len);
     
      for (var i = 0; i < len/2; i++) {
        output[2*i] = this.b0a0*buffer[2*i] + this.b1a0*this.x_1_l + this.b2a0*this.x_2_l - this.a1a0*this.y_1_l - this.a2a0*this.y_2_l;
        this.y_2_l = this.y_1_l;
        this.y_1_l = output[2*i];
        this.x_2_l = this.x_1_l;
        this.x_1_l = buffer[2*i];

        output[2*i+1] = this.b0a0*buffer[2*i+1] + this.b1a0*this.x_1_r + this.b2a0*this.x_2_r - this.a1a0*this.y_1_r - this.a2a0*this.y_2_r;
        this.y_2_r = this.y_1_r;
        this.y_1_r = output[2*i+1];
        this.x_2_r = this.x_1_r;
        this.x_1_r = buffer[2*i+1];
      }

      return output;
  };
}

/* 
 *  Magnitude to decibels
 * 
 *  Created by Ricard Marxer <email@ricardmarxer.com> on 2010-05-23.
 *  Copyright 2010 Ricard Marxer. All rights reserved.
 *
 *  @buffer array of magnitudes to convert to decibels
 *
 *  @returns the array in decibels
 *
 */
DSP.mag2db = function(buffer) {
  var minDb = -120;
  var minMag = Math.pow(10.0, minDb / 20.0);

  var log = Math.log;
  var max = Math.max;
 
  var result = Float32Array(buffer.length);
  for (var i=0; i<buffer.length; i++) {
    result[i] = 20.0*log(max(buffer[i], minMag));
  }

  return result;
};

/* 
 *  Frequency response
 * 
 *  Created by Ricard Marxer <email@ricardmarxer.com> on 2010-05-23.
 *  Copyright 2010 Ricard Marxer. All rights reserved.
 *
 *  Calculates the frequency response at the given points.
 *
 *  @b b coefficients of the filter
 *  @a a coefficients of the filter
 *  @w w points (normally between -PI and PI) where to calculate the frequency response
 *
 *  @returns the frequency response in magnitude
 *
 */
DSP.freqz = function(b, a, w) {
  var i, j;

  if (!w) {
    w = Float32Array(200);
    for (i=0;i<w.length; i++) {
      w[i] = DSP.TWO_PI/w.length * i - Math.PI;
    }
  }

  var result = Float32Array(w.length);
 
  var sqrt = Math.sqrt;
  var cos = Math.cos;
  var sin = Math.sin;
 
  for (i=0; i<w.length; i++) {
    var numerator = {real:0.0, imag:0.0};
    for (j=0; j<b.length; j++) {
      numerator.real += b[j] * cos(-j*w[i]);
      numerator.imag += b[j] * sin(-j*w[i]);
    }

    var denominator = {real:0.0, imag:0.0};
    for (j=0; j<a.length; j++) {
      denominator.real += a[j] * cos(-j*w[i]);
      denominator.imag += a[j] * sin(-j*w[i]);
    }
 
    result[i] =  sqrt(numerator.real*numerator.real + numerator.imag*numerator.imag) / sqrt(denominator.real*denominator.real + denominator.imag*denominator.imag);
  }

  return result;
};

/* 
 *  Graphical Equalizer
 *
 *  Implementation of a graphic equalizer with a configurable bands-per-octave
 *  and minimum and maximum frequencies
 * 
 *  Created by Ricard Marxer <email@ricardmarxer.com> on 2010-05-23.
 *  Copyright 2010 Ricard Marxer. All rights reserved.
 *
 */
function GraphicalEq(sampleRate) {
  this.FS = sampleRate;
  this.minFreq = 40.0;
  this.maxFreq = 16000.0;

  this.bandsPerOctave = 1.0;

  this.filters = [];
  this.freqzs = [];

  this.calculateFreqzs = true;

  this.recalculateFilters = function() {
    var bandCount = Math.round(Math.log(this.maxFreq/this.minFreq) * this.bandsPerOctave/ Math.LN2);

    this.filters = [];
    for (var i=0; i<bandCount; i++) {
      var freq = this.minFreq*(Math.pow(2, i/this.bandsPerOctave));
      var newFilter = new Biquad(DSP.PEAKING_EQ, this.FS);
      newFilter.setDbGain(0);
      newFilter.setBW(1/this.bandsPerOctave);
      newFilter.setF0(freq);
      this.filters[i] = newFilter;
      this.recalculateFreqz(i);
    }
  };

  this.setMinimumFrequency = function(freq) {
    this.minFreq = freq;
    this.recalculateFilters();
  };

  this.setMaximumFrequency = function(freq) {
    this.maxFreq = freq;
    this.recalculateFilters();
  };

  this.setBandsPerOctave = function(bands) {
    this.bandsPerOctave = bands;
    this.recalculateFilters();
  };

  this.setBandGain = function(bandIndex, gain) {
    if (bandIndex < 0 || bandIndex > (this.filters.length-1)) {
      throw "The band index of the graphical equalizer is out of bounds.";
    }

    if (!gain) {
      throw "A gain must be passed.";
    }
   
    this.filters[bandIndex].setDbGain(gain);
    this.recalculateFreqz(bandIndex);
  };
 
  this.recalculateFreqz = function(bandIndex) {
    if (!this.calculateFreqzs) {
      return;
    }

    if (bandIndex < 0 || bandIndex > (this.filters.length-1)) {
      throw "The band index of the graphical equalizer is out of bounds. " + bandIndex + " is out of [" + 0 + ", " + this.filters.length-1 + "]";
    }
       
    if (!this.w) {
      this.w = Float32Array(400);
      for (var i=0; i<this.w.length; i++) {
         this.w[i] = Math.PI/this.w.length * i;
      }
    }
   
    var b = [this.filters[bandIndex].b0, this.filters[bandIndex].b1, this.filters[bandIndex].b2];
    var a = [this.filters[bandIndex].a0, this.filters[bandIndex].a1, this.filters[bandIndex].a2];

    this.freqzs[bandIndex] = DSP.mag2db(DSP.freqz(b, a, this.w));
  };

  this.process = function(buffer) {
    var output = buffer;

    for (var i = 0; i < this.filters.length; i++) {
      output = this.filters[i].process(output);
    }

    return output;
  };

  this.processStereo = function(buffer) {
    var output = buffer;

    for (var i = 0; i < this.filters.length; i++) {
      output = this.filters[i].processStereo(output);
    }

    return output;
  };
}

/**
 * MultiDelay effect by Almer Thie (http://code.almeros.com).
 * Copyright 2010 Almer Thie. All rights reserved.
 * Example: http://code.almeros.com/code-examples/delay-firefox-audio-api/
 *
 * This is a delay that feeds it's own delayed signal back into its circular
 * buffer. Also known as a CombFilter.
 *
 * Compatible with interleaved stereo (or more channel) buffers and
 * non-interleaved mono buffers.
 *
 * @param {Number} maxDelayInSamplesSize Maximum possible delay in samples (size of circular buffer)
 * @param {Number} delayInSamples Initial delay in samples
 * @param {Number} masterVolume Initial master volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)
 * @param {Number} delayVolume Initial feedback delay volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)
 *
 * @constructor
 */
function MultiDelay(maxDelayInSamplesSize, delayInSamples, masterVolume, delayVolume) {
  this.delayBufferSamples   = new Float32Array(maxDelayInSamplesSize); // The maximum size of delay
  this.delayInputPointer     = delayInSamples;
  this.delayOutputPointer   = 0;
 
  this.delayInSamples   = delayInSamples;
  this.masterVolume     = masterVolume;
  this.delayVolume     = delayVolume;
}

/**
 * Change the delay time in samples.
 *
 * @param {Number} delayInSamples Delay in samples
 */
MultiDelay.prototype.setDelayInSamples = function (delayInSamples) {
  this.delayInSamples = delayInSamples;
 
  this.delayInputPointer = this.delayOutputPointer + delayInSamples;

  if (this.delayInputPointer >= this.delayBufferSamples.length-1) {
    this.delayInputPointer = this.delayInputPointer - this.delayBufferSamples.length; 
  }
};

/**
 * Change the master volume.
 *
 * @param {Number} masterVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)
 */
MultiDelay.prototype.setMasterVolume = function(masterVolume) {
  this.masterVolume = masterVolume;
};

/**
 * Change the delay feedback volume.
 *
 * @param {Number} delayVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)
 */
MultiDelay.prototype.setDelayVolume = function(delayVolume) {
  this.delayVolume = delayVolume;
};

/**
 * Process a given interleaved or mono non-interleaved float value Array and adds the delayed audio.
 *
 * @param {Array} samples Array containing Float values or a Float32Array
 *
 * @returns A new Float32Array interleaved or mono non-interleaved as was fed to this function.
 */
MultiDelay.prototype.process = function(samples) {
  // NB. Make a copy to put in the output samples to return.
  var outputSamples = new Float32Array(samples.length);

  for (var i=0; i<samples.length; i++) {
    // delayBufferSamples could contain initial NULL's, return silence in that case
    var delaySample = (this.delayBufferSamples[this.delayOutputPointer] === null ? 0.0 : this.delayBufferSamples[this.delayOutputPointer]);
   
    // Mix normal audio data with delayed audio
    var sample = (delaySample * this.delayVolume) + samples[i];
   
    // Add audio data with the delay in the delay buffer
    this.delayBufferSamples[this.delayInputPointer] = sample;
   
    // Return the audio with delay mix
    outputSamples[i] = sample * this.masterVolume;
   
    // Manage circulair delay buffer pointers
    this.delayInputPointer++;
    if (this.delayInputPointer >= this.delayBufferSamples.length-1) {
      this.delayInputPointer = 0;
    }
     
    this.delayOutputPointer++;
    if (this.delayOutputPointer >= this.delayBufferSamples.length-1) {
      this.delayOutputPointer = 0; 
    } 
  }
 
  return outputSamples;
};

/**
 * SingleDelay effect by Almer Thie (http://code.almeros.com).
 * Copyright 2010 Almer Thie. All rights reserved.
 * Example: See usage in Reverb class
 *
 * This is a delay that does NOT feeds it's own delayed signal back into its 
 * circular buffer, neither does it return the original signal. Also known as
 * an AllPassFilter(?).
 *
 * Compatible with interleaved stereo (or more channel) buffers and
 * non-interleaved mono buffers.
 *
 * @param {Number} maxDelayInSamplesSize Maximum possible delay in samples (size of circular buffer)
 * @param {Number} delayInSamples Initial delay in samples
 * @param {Number} delayVolume Initial feedback delay volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)
 *
 * @constructor
 */

function SingleDelay(maxDelayInSamplesSize, delayInSamples, delayVolume) {
  this.delayBufferSamples = new Float32Array(maxDelayInSamplesSize); // The maximum size of delay
  this.delayInputPointer  = delayInSamples;
  this.delayOutputPointer = 0;
 
  this.delayInSamples     = delayInSamples;
  this.delayVolume        = delayVolume;
}

/**
 * Change the delay time in samples.
 *
 * @param {Number} delayInSamples Delay in samples
 */
SingleDelay.prototype.setDelayInSamples = function(delayInSamples) {
  this.delayInSamples = delayInSamples;
  this.delayInputPointer = this.delayOutputPointer + delayInSamples;

  if (this.delayInputPointer >= this.delayBufferSamples.length-1) {
    this.delayInputPointer = this.delayInputPointer - this.delayBufferSamples.length; 
  }
};

/**
 * Change the return signal volume.
 *
 * @param {Number} delayVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)
 */
SingleDelay.prototype.setDelayVolume = function(delayVolume) {
  this.delayVolume = delayVolume;
};

/**
 * Process a given interleaved or mono non-interleaved float value Array and
 * returns the delayed audio.
 *
 * @param {Array} samples Array containing Float values or a Float32Array
 *
 * @returns A new Float32Array interleaved or mono non-interleaved as was fed to this function.
 */
SingleDelay.prototype.process = function(samples) {
  // NB. Make a copy to put in the output samples to return.
  var outputSamples = new Float32Array(samples.length);

  for (var i=0; i<samples.length; i++) {

    // Add audio data with the delay in the delay buffer
    this.delayBufferSamples[this.delayInputPointer] = samples[i];
   
    // delayBufferSamples could contain initial NULL's, return silence in that case
    var delaySample = this.delayBufferSamples[this.delayOutputPointer];

    // Return the audio with delay mix
    outputSamples[i] = delaySample * this.delayVolume;

    // Manage circulair delay buffer pointers
    this.delayInputPointer++;

    if (this.delayInputPointer >= this.delayBufferSamples.length-1) {
      this.delayInputPointer = 0;
    }
     
    this.delayOutputPointer++;

    if (this.delayOutputPointer >= this.delayBufferSamples.length-1) {
      this.delayOutputPointer = 0; 
    } 
  }
 
  return outputSamples;
};

/**
 * Reverb effect by Almer Thie (http://code.almeros.com).
 * Copyright 2010 Almer Thie. All rights reserved.
 * Example: http://code.almeros.com/code-examples/reverb-firefox-audio-api/
 *
 * This reverb consists of 6 SingleDelays, 6 MultiDelays and an IIRFilter2
 * for each of the two stereo channels.
 *
 * Compatible with interleaved stereo buffers only!
 *
 * @param {Number} maxDelayInSamplesSize Maximum possible delay in samples (size of circular buffers)
 * @param {Number} delayInSamples Initial delay in samples for internal (Single/Multi)delays
 * @param {Number} masterVolume Initial master volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)
 * @param {Number} mixVolume Initial reverb signal mix volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)
 * @param {Number} delayVolume Initial feedback delay volume for internal (Single/Multi)delays. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)
 * @param {Number} dampFrequency Initial low pass filter frequency. 0 to 44100 (depending on your maximum sampling frequency)
 *
 * @constructor
 */
function Reverb(maxDelayInSamplesSize, delayInSamples, masterVolume, mixVolume, delayVolume, dampFrequency) {
  this.delayInSamples   = delayInSamples;
  this.masterVolume     = masterVolume;
  this.mixVolume       = mixVolume;
  this.delayVolume     = delayVolume;
  this.dampFrequency     = dampFrequency;
 
  this.NR_OF_MULTIDELAYS = 6;
  this.NR_OF_SINGLEDELAYS = 6;
 
  this.LOWPASSL = new IIRFilter2(DSP.LOWPASS, dampFrequency, 0, 44100);
  this.LOWPASSR = new IIRFilter2(DSP.LOWPASS, dampFrequency, 0, 44100);
 
  this.singleDelays = [];
  
  var i, delayMultiply;

  for (i = 0; i < this.NR_OF_SINGLEDELAYS; i++) {
    delayMultiply = 1.0 + (i/7.0); // 1.0, 1.1, 1.2...
    this.singleDelays[i] = new SingleDelay(maxDelayInSamplesSize, Math.round(this.delayInSamples * delayMultiply), this.delayVolume);
  }
 
  this.multiDelays = [];

  for (i = 0; i < this.NR_OF_MULTIDELAYS; i++) {
    delayMultiply = 1.0 + (i/10.0); // 1.0, 1.1, 1.2... 
    this.multiDelays[i] = new MultiDelay(maxDelayInSamplesSize, Math.round(this.delayInSamples * delayMultiply), this.masterVolume, this.delayVolume);
  }
}

/**
 * Change the delay time in samples as a base for all delays.
 *
 * @param {Number} delayInSamples Delay in samples
 */
Reverb.prototype.setDelayInSamples = function (delayInSamples){
  this.delayInSamples = delayInSamples;

  var i, delayMultiply;
 
  for (i = 0; i < this.NR_OF_SINGLEDELAYS; i++) {
    delayMultiply = 1.0 + (i/7.0); // 1.0, 1.1, 1.2...
    this.singleDelays[i].setDelayInSamples( Math.round(this.delayInSamples * delayMultiply) );
  }
   
  for (i = 0; i < this.NR_OF_MULTIDELAYS; i++) {
    delayMultiply = 1.0 + (i/10.0); // 1.0, 1.1, 1.2...
    this.multiDelays[i].setDelayInSamples( Math.round(this.delayInSamples * delayMultiply) );
  }
};

/**
 * Change the master volume.
 *
 * @param {Number} masterVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)
 */
Reverb.prototype.setMasterVolume = function (masterVolume){
  this.masterVolume = masterVolume;
};

/**
 * Change the reverb signal mix level.
 *
 * @param {Number} mixVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)
 */
Reverb.prototype.setMixVolume = function (mixVolume){
  this.mixVolume = mixVolume;
};

/**
 * Change all delays feedback volume.
 *
 * @param {Number} delayVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)
 */
Reverb.prototype.setDelayVolume = function (delayVolume){
  this.delayVolume = delayVolume;
 
  var i;

  for (i = 0; i<this.NR_OF_SINGLEDELAYS; i++) {
    this.singleDelays[i].setDelayVolume(this.delayVolume);
  } 
 
  for (i = 0; i<this.NR_OF_MULTIDELAYS; i++) {
    this.multiDelays[i].setDelayVolume(this.delayVolume);
  } 
};

/**
 * Change the Low Pass filter frequency.
 *
 * @param {Number} dampFrequency low pass filter frequency. 0 to 44100 (depending on your maximum sampling frequency)
 */
Reverb.prototype.setDampFrequency = function (dampFrequency){
  this.dampFrequency = dampFrequency;
 
  this.LOWPASSL.set(dampFrequency, 0);
  this.LOWPASSR.set(dampFrequency, 0); 
};

/**
 * Process a given interleaved float value Array and copies and adds the reverb signal.
 *
 * @param {Array} samples Array containing Float values or a Float32Array
 *
 * @returns A new Float32Array interleaved buffer.
 */
Reverb.prototype.process = function (interleavedSamples){ 
  // NB. Make a copy to put in the output samples to return.
  var outputSamples = new Float32Array(interleavedSamples.length);
 
  // Perform low pass on the input samples to mimick damp
  var leftRightMix = DSP.deinterleave(interleavedSamples);
  this.LOWPASSL.process( leftRightMix[DSP.LEFT] );
  this.LOWPASSR.process( leftRightMix[DSP.RIGHT] ); 
  var filteredSamples = DSP.interleave(leftRightMix[DSP.LEFT], leftRightMix[DSP.RIGHT]);

  var i;

  // Process MultiDelays in parallel
  for (i = 0; i<this.NR_OF_MULTIDELAYS; i++) {
    // Invert the signal of every even multiDelay
    outputSamples = DSP.mixSampleBuffers(outputSamples, this.multiDelays[i].process(filteredSamples), 2%i === 0, this.NR_OF_MULTIDELAYS);
  }
 
  // Process SingleDelays in series
  var singleDelaySamples = new Float32Array(outputSamples.length);
  for (i = 0; i<this.NR_OF_SINGLEDELAYS; i++) {
    // Invert the signal of every even singleDelay
    singleDelaySamples = DSP.mixSampleBuffers(singleDelaySamples, this.singleDelays[i].process(outputSamples), 2%i === 0, 1);
  }

  // Apply the volume of the reverb signal
  for (i = 0; i<singleDelaySamples.length; i++) {
    singleDelaySamples[i] *= this.mixVolume;
  }
 
  // Mix the original signal with the reverb signal
  outputSamples = DSP.mixSampleBuffers(singleDelaySamples, interleavedSamples, 0, 1);

  // Apply the master volume to the complete signal
  for (i = 0; i<outputSamples.length; i++) {
    outputSamples[i] *= this.masterVolume;
  }
   
  return outputSamples;
};


}).call(this,require("/Users/ttt/Work/Dev/spectrum/node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/dsp/dsp.js","/../../node_modules/dsp")
},{"/Users/ttt/Work/Dev/spectrum/node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":5,"buffer":2}],2:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/**
 * The buffer module from node.js, for the browser.
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install buffer`
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192

/**
 * If `Buffer._useTypedArrays`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (compatible down to IE6)
 */
Buffer._useTypedArrays = (function () {
   // Detect if browser supports Typed Arrays. Supported browsers are IE 10+,
   // Firefox 4+, Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+.
  if (typeof Uint8Array !== 'function' || typeof ArrayBuffer !== 'function')
    return false

  // Does the browser support adding properties to `Uint8Array` instances? If
  // not, then that's the same as no `Uint8Array` support. We need to be able to
  // add all the node Buffer API methods.
  // Bug in Firefox 4-29, now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
  try {
    var arr = new Uint8Array(0)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() &&
        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Workaround: node's base64 implementation allows for non-padded strings
  // while base64-js does not.
  if (encoding === 'base64' && type === 'string') {
    subject = stringtrim(subject)
    while (subject.length % 4 !== 0) {
      subject = subject + '='
    }
  }

  // Find the length
  var length
  if (type === 'number')
    length = coerce(subject)
  else if (type === 'string')
    length = Buffer.byteLength(subject, encoding)
  else if (type === 'object')
    length = coerce(subject.length) // assume that object is array-like
  else
    throw new Error('First argument needs to be a number, array or string.')

  var buf
  if (Buffer._useTypedArrays) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    for (i = 0; i < length; i++) {
      if (Buffer.isBuffer(subject))
        buf[i] = subject.readUInt8(i)
      else
        buf[i] = subject[i]
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.isBuffer = function (b) {
  return !!(b !== null && b !== undefined && b._isBuffer)
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\n' +
      'list should be an Array.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (typeof totalLength !== 'number') {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

// BUFFER INSTANCE METHODS
// =======================

function _hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  assert(strLen % 2 === 0, 'Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    assert(!isNaN(byte), 'Invalid hex string')
    buf[offset + i] = byte
  }
  Buffer._charsWritten = i * 2
  return i
}

function _utf8Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function _asciiWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function _binaryWrite (buf, string, offset, length) {
  return _asciiWrite(buf, string, offset, length)
}

function _base64Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function _utf16leWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = _asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = _binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = _base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leWrite(this, string, offset, length)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this

  encoding = String(encoding || 'utf8').toLowerCase()
  start = Number(start) || 0
  end = (end !== undefined)
    ? Number(end)
    : end = self.length

  // Fastpath empty strings
  if (end === start)
    return ''

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexSlice(self, start, end)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Slice(self, start, end)
      break
    case 'ascii':
      ret = _asciiSlice(self, start, end)
      break
    case 'binary':
      ret = _binarySlice(self, start, end)
      break
    case 'base64':
      ret = _base64Slice(self, start, end)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leSlice(self, start, end)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart')
  assert(target_start >= 0 && target_start < target.length,
      'targetStart out of bounds')
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !Buffer._useTypedArrays) {
    for (var i = 0; i < len; i++)
      target[i + target_start] = this[i + start]
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

function _base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function _utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function _asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++)
    ret += String.fromCharCode(buf[i])
  return ret
}

function _binarySlice (buf, start, end) {
  return _asciiSlice(buf, start, end)
}

function _hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function _utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = clamp(start, len, 0)
  end = clamp(end, len, len)

  if (Buffer._useTypedArrays) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  return this[offset]
}

function _readUInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    val = buf[offset]
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
  } else {
    val = buf[offset] << 8
    if (offset + 1 < len)
      val |= buf[offset + 1]
  }
  return val
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return _readUInt16(this, offset, true, noAssert)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return _readUInt16(this, offset, false, noAssert)
}

function _readUInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    if (offset + 2 < len)
      val = buf[offset + 2] << 16
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
    val |= buf[offset]
    if (offset + 3 < len)
      val = val + (buf[offset + 3] << 24 >>> 0)
  } else {
    if (offset + 1 < len)
      val = buf[offset + 1] << 16
    if (offset + 2 < len)
      val |= buf[offset + 2] << 8
    if (offset + 3 < len)
      val |= buf[offset + 3]
    val = val + (buf[offset] << 24 >>> 0)
  }
  return val
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return _readUInt32(this, offset, true, noAssert)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return _readUInt32(this, offset, false, noAssert)
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null,
        'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  var neg = this[offset] & 0x80
  if (neg)
    return (0xff - this[offset] + 1) * -1
  else
    return this[offset]
}

function _readInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt16(buf, offset, littleEndian, true)
  var neg = val & 0x8000
  if (neg)
    return (0xffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return _readInt16(this, offset, true, noAssert)
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return _readInt16(this, offset, false, noAssert)
}

function _readInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt32(buf, offset, littleEndian, true)
  var neg = val & 0x80000000
  if (neg)
    return (0xffffffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return _readInt32(this, offset, true, noAssert)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return _readInt32(this, offset, false, noAssert)
}

function _readFloat (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4)
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return _readFloat(this, offset, true, noAssert)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return _readFloat(this, offset, false, noAssert)
}

function _readDouble (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return _readDouble(this, offset, true, noAssert)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return _readDouble(this, offset, false, noAssert)
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'trying to write beyond buffer length')
    verifuint(value, 0xff)
  }

  if (offset >= this.length) return

  this[offset] = value
}

function _writeUInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] =
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, false, noAssert)
}

function _writeUInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffffffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] =
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, false, noAssert)
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7f, -0x80)
  }

  if (offset >= this.length)
    return

  if (value >= 0)
    this.writeUInt8(value, offset, noAssert)
  else
    this.writeUInt8(0xff + value + 1, offset, noAssert)
}

function _writeInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fff, -0x8000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt16(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, false, noAssert)
}

function _writeInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fffffff, -0x80000000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt32(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, false, noAssert)
}

function _writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 23, 4)
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, false, noAssert)
}

function _writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 7 < buf.length,
        'Trying to write beyond buffer length')
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 52, 8)
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, false, noAssert)
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (typeof value === 'string') {
    value = value.charCodeAt(0)
  }

  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')
  assert(end >= start, 'end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  assert(start >= 0 && start < this.length, 'start out of bounds')
  assert(end >= 0 && end <= this.length, 'end out of bounds')

  for (var i = start; i < end; i++) {
    this[i] = value
  }
}

Buffer.prototype.inspect = function () {
  var out = []
  var len = this.length
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i])
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...'
      break
    }
  }
  return '<Buffer ' + out.join(' ') + '>'
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array === 'function') {
    if (Buffer._useTypedArrays) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1)
        buf[i] = this[i]
      return buf.buffer
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

// slice(start, end)
function clamp (index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len
  if (index >= 0) return index
  index += len
  if (index >= 0) return index
  return 0
}

function coerce (length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length)
  return length < 0 ? 0 : length
}

function isArray (subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]'
  })(subject)
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F)
      byteArray.push(str.charCodeAt(i))
    else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16))
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  var pos
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint (value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifsint (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifIEEE754 (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
}

function assert (test, message) {
  if (!test) throw new Error(message || 'Failed assertion')
}

}).call(this,require("/Users/ttt/Work/Dev/spectrum/node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/index.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer")
},{"/Users/ttt/Work/Dev/spectrum/node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":5,"base64-js":3,"buffer":2,"ieee754":4}],3:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var ZERO   = '0'.charCodeAt(0)
	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS)
			return 62 // '+'
		if (code === SLASH)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	module.exports.toByteArray = b64ToByteArray
	module.exports.fromByteArray = uint8ToBase64
}())

}).call(this,require("/Users/ttt/Work/Dev/spectrum/node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib")
},{"/Users/ttt/Work/Dev/spectrum/node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":5,"buffer":2}],4:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

}).call(this,require("/Users/ttt/Work/Dev/spectrum/node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/ieee754")
},{"/Users/ttt/Work/Dev/spectrum/node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":5,"buffer":2}],5:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.once = noop;
process.off = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

}).call(this,require("/Users/ttt/Work/Dev/spectrum/node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process")
},{"/Users/ttt/Work/Dev/spectrum/node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":5,"buffer":2}],6:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var SpectrumAnalyzer = require('./vendor/d3-audio-spectrum/spectrum_analyzer.js');
var InputAudioSource = require('./vendor/d3-audio-spectrum/input_audio_source.js');
var Audio = require('./vendor/d3-audio-spectrum/input_audio_source.js');

function Application() {
  this.audio = undefined;
  this.context = undefined;
  this.model = undefined;
  this.source = undefined;
  this.view = undefined;
}

Application.prototype.load = function() {
  var app = this;
  this.populateContext();
  this.audio = new Audio(this.context);

  this.source = this.sourceFromInput();
  app.onSourceLoaded(function() {
    app.model = new SpectrumAnalyzer(app.audio);
    app.view = new SpectrumAnalyzerView(app.model, "#spectrum_analyzer");
    app.view.update();
  });

  $("#play").click(function() {
    Application.togglePlay();
  });
};

Application.prototype.sourceFromInput = function() {
  var app = this;
  return new InputAudioSource(this.context);
};

Application.prototype.onSourceLoaded = function(callback) {
  this.audio.source = this.source;
  if (callback !== null) {
    callback();
  }
};

Application.prototype.play = function() {
  var element = document.getElementById('play');
  element.value = "Stop";
  this.model.play();
};

Application.prototype.togglePlay = function() {
  if (this.audio.playing) {
    this.stop();
  } else {
    this.play();
  }
};

Application.prototype.stop = function() {
  this.audio.stop();
  var element = document.getElementById('play');
  element.value = "Start";
};

Application.prototype.populateContext = function() {
  var AudioContext = window.AudioContext || window.webkitAudioContext;

  if (AudioContext) {
    this.context = new AudioContext();
  } else {
    alert("Sorry, your browser is not supported.");
  }
};

// Class Methods

Application.load = function() {
  this.instance = new Application();
  this.instance.load();

  // Start automatically
  this.play();
};

Application.play = function() {
  this.instance.play();
};

Application.togglePlay = function() {
  this.instance.togglePlay();
};

Application.stop = function() {
  this.instance.stop();
};

module.exports = Application;

// Export as a global object
window.Application = Application;

}).call(this,require("/Users/ttt/Work/Dev/spectrum/node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_d4d76a40.js","/")
},{"./vendor/d3-audio-spectrum/input_audio_source.js":7,"./vendor/d3-audio-spectrum/spectrum_analyzer.js":8,"/Users/ttt/Work/Dev/spectrum/node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":5,"buffer":2}],7:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
function InputAudioSource(context) {
  this.context = context;

  // Frequency ranges
  freqRanges =  {
    humanAudible: {
      min: 20,
      max: 20000
    },

    // Eg, bass
    humanAudibleLowRange: {
      min: 20,
      max: 250
    },

    humanAudibleMidRange: {
      min: 250,
      max: 4000
    },

    humanAudibleHighRange: {
      min: 4000,
      max: 20000
    },

    // http://en.wikipedia.org/wiki/Voice_frequency
    voice: {
      min: 300,
      max: 3400
    }
  };

  // Mid human audible range
  this.freq = freqRanges.voice;
}

InputAudioSource.prototype.load = function(callback) {
  navigator.getUserMedia = (navigator.getUserMedia ||
    navigator.webkitGetUserMedia ||
    navigator.mozGetUserMedia ||
    navigator.msGetUserMedia);

  navigator.getUserMedia({ audio:true },
    this.streamCallback(callback));
};

InputAudioSource.prototype.play = function() {};

InputAudioSource.prototype.stop = function() {
  this.disconnect();
};

InputAudioSource.prototype.streamCallback = function(callback) {
  var source = this;

  var addBandPassFilter = function() {
    // Filter out low frequencies
    // (allow high frequences to pass through)
    var highPassFilter = source.context.createBiquadFilter();
    highPassFilter.type = 'highpass';
    highPassFilter.frequency.value = source.freq.min;

    // Filter out high frequencies
    // (allow low frequences to pass through)
    var lowPassFilter = source.context.createBiquadFilter();
    lowPassFilter.type = 'lowpass';
    lowPassFilter.frequency.value = source.freq.max;

    source.source.connect(highPassFilter);
    highPassFilter.connect(lowPassFilter);
  };

  return function(stream) {
    source.source = source.context.createMediaStreamSource(stream);
    addBandPassFilter();

    callback();
  };
};

InputAudioSource.prototype.connect = function(connector) {
  this.source.connect(connector);
};

InputAudioSource.prototype.disconnect = function() {
  this.source.disconnect();
};

module.exports = InputAudioSource;
}).call(this,require("/Users/ttt/Work/Dev/spectrum/node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/vendor/d3-audio-spectrum/input_audio_source.js","/vendor/d3-audio-spectrum")
},{"/Users/ttt/Work/Dev/spectrum/node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":5,"buffer":2}],8:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var dsp = require('dsp/dsp');
var FFT = dsp.FFT;

/**
 * This is where the audio is analyzed
 */
function SpectrumAnalyzer(audio) {
  this.audio = audio;
  this.analysis = this.audio.context.createJavaScriptNode(this.audio.bufferSize);
  this.curve = 16;
  this.intensity = 50;
  this.setResolution(16);

  this.min = 0;
  this.max = 0;
  this.average = 0;
}

SpectrumAnalyzer.prototype.setResolution = function(n) {
  this.resolution = this.linLog(this.audio.bufferSize / n);
  this.reset();
};

SpectrumAnalyzer.prototype.setCurve = function(n) {
  this.curve = n;
  this.reset();
};

SpectrumAnalyzer.prototype.reset = function() {
  this.data = [];
  this.delta = [];
  var fftSize = this.resolution;
  this.audio.mono = new Float32Array(fftSize);
  this.fft = new FFT(fftSize, this.audio.sampleRate);
  var analyzer = this;
  this.analysis.onaudioprocess = function(event) {
    analyzer.audioReceived(event);
  };
};

SpectrumAnalyzer.prototype.linLog = function(n) {
  return Math.pow( 2, Math.round( Math.log( n ) / Math.log( 2 ) ) );
};

SpectrumAnalyzer.prototype.length = function() {
  return this.fft.spectrum.length/2;
};

SpectrumAnalyzer.prototype.play = function(callback) {
  var analyzer = this;
  this.audio.play(function() {
    analyzer.audio.connectProcessor(analyzer.analysis);
    if (callback) {
      callback();
    }
  });
};

SpectrumAnalyzer.prototype.getInitialData = function() {
  var data = [];
  for (var i = 0; i < this.length(); i++) {
    data.push(1);
  }
  return data;
};

SpectrumAnalyzer.prototype.withCurve = function(callback) {
  var segmentLength = this.length() / this.curve;
  var segmentCounter = 0;
  var segment = 0;
  var counter = 0;
  var index = 0;
  while (index <= this.length() - 1) {
    callback(index, counter);
    index += (segment * this.curve) + 1;
    counter += 1;
    segmentCounter += 1;
    if (segmentCounter > segmentLength - 1) {
      segment += 1;
      segmentCounter = 0;
    }
  }
};

SpectrumAnalyzer.prototype.populateData = function(index, counter) {
  amplitude = this.fft.spectrum[index] * (this.intensity * 200);
  this.delta[counter] = amplitude - this.data[counter];
  this.data[counter] = amplitude;
};

/**
 * Find the min of the data
 *
 * @return {Number} min value
 */
SpectrumAnalyzer.prototype.getDataMin = function() {
  var length = this.data.length;

  if (length === 0) {
    return 0;
  }

  var min = 0;

  for (var i = 0; i < length; i++) {
    var val = this.data[i];
    if (val < min) {
      min = val;
    }
  }

  return min;
};

/**
 * Find the max of the data
 *
 * @return {Number} max value
 */
SpectrumAnalyzer.prototype.getDataMax = function() {
  var length = this.data.length;

  if (length === 0) {
    return 0;
  }

  var max = 0;

  for (var i = 0; i < length; i++) {
    var val = this.data[i];
    if (val > max) {
      max = val;
    }
  }

  return max;
};

/**
 * Find the average of the data
 *
 * @return {Number}
 */
SpectrumAnalyzer.prototype.getDataAvg = function() {
  var length = this.data.length;

  if (length === 0) {
    return 0;
  }

  var total = 0;

  for (var i = 0; i < length; i++) {
    total = total + this.data[i];
  }

  return total / length;
};

SpectrumAnalyzer.prototype.audioReceived = function(event) {
  var analyzer = this;
  this.audio.routeAudio(event, false);
  this.fft.forward(this.audio.mono);
  this.withCurve(function(index, counter) {
    analyzer.populateData(index, counter);
  });

  this.min = this.getDataMin();
  this.max = this.getDataMax();
  this.average = this.getDataAvg();
};

module.exports = SpectrumAnalyzer;

}).call(this,require("/Users/ttt/Work/Dev/spectrum/node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/vendor/d3-audio-spectrum/spectrum_analyzer.js","/vendor/d3-audio-spectrum")
},{"/Users/ttt/Work/Dev/spectrum/node_modules/gulp-browserify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":5,"buffer":2,"dsp/dsp":1}]},{},[6])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvVXNlcnMvdHR0L1dvcmsvRGV2L3NwZWN0cnVtL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi9Vc2Vycy90dHQvV29yay9EZXYvc3BlY3RydW0vbm9kZV9tb2R1bGVzL2RzcC9kc3AuanMiLCIvVXNlcnMvdHR0L1dvcmsvRGV2L3NwZWN0cnVtL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIi9Vc2Vycy90dHQvV29yay9EZXYvc3BlY3RydW0vbm9kZV9tb2R1bGVzL2d1bHAtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnVmZmVyL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvbGliL2I2NC5qcyIsIi9Vc2Vycy90dHQvV29yay9EZXYvc3BlY3RydW0vbm9kZV9tb2R1bGVzL2d1bHAtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnVmZmVyL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwiL1VzZXJzL3R0dC9Xb3JrL0Rldi9zcGVjdHJ1bS9ub2RlX21vZHVsZXMvZ3VscC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9pbnNlcnQtbW9kdWxlLWdsb2JhbHMvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIi9Vc2Vycy90dHQvV29yay9EZXYvc3BlY3RydW0vc3JjL2pzL2Zha2VfZDRkNzZhNDAuanMiLCIvVXNlcnMvdHR0L1dvcmsvRGV2L3NwZWN0cnVtL3NyYy9qcy92ZW5kb3IvZDMtYXVkaW8tc3BlY3RydW0vaW5wdXRfYXVkaW9fc291cmNlLmpzIiwiL1VzZXJzL3R0dC9Xb3JrL0Rldi9zcGVjdHJ1bS9zcmMvanMvdmVuZG9yL2QzLWF1ZGlvLXNwZWN0cnVtL3NwZWN0cnVtX2FuYWx5emVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaHdFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1bENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIil9dmFyIGY9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGYuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sZixmLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbi8qIFxuICogIERTUC5qcyAtIGEgY29tcHJlaGVuc2l2ZSBkaWdpdGFsIHNpZ25hbCBwcm9jZXNzaW5nICBsaWJyYXJ5IGZvciBqYXZhc2NyaXB0XG4gKiBcbiAqICBDcmVhdGVkIGJ5IENvcmJhbiBCcm9vayA8Y29yYmFuYnJvb2tAZ21haWwuY29tPiBvbiAyMDEwLTAxLTAxLlxuICogIENvcHlyaWdodCAyMDEwIENvcmJhbiBCcm9vay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKi9cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENPTlNUQU5UUyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIERTUCBpcyBhbiBvYmplY3Qgd2hpY2ggY29udGFpbnMgZ2VuZXJhbCBwdXJwb3NlIHV0aWxpdHkgZnVuY3Rpb25zIGFuZCBjb25zdGFudHNcbiAqL1xudmFyIERTUCA9IHtcbiAgLy8gQ2hhbm5lbHNcbiAgTEVGVDogICAgICAgICAgIDAsXG4gIFJJR0hUOiAgICAgICAgICAxLFxuICBNSVg6ICAgICAgICAgICAgMixcblxuICAvLyBXYXZlZm9ybXNcbiAgU0lORTogICAgICAgICAgIDEsXG4gIFRSSUFOR0xFOiAgICAgICAyLFxuICBTQVc6ICAgICAgICAgICAgMyxcbiAgU1FVQVJFOiAgICAgICAgIDQsXG5cbiAgLy8gRmlsdGVyc1xuICBMT1dQQVNTOiAgICAgICAgMCxcbiAgSElHSFBBU1M6ICAgICAgIDEsXG4gIEJBTkRQQVNTOiAgICAgICAyLFxuICBOT1RDSDogICAgICAgICAgMyxcblxuICAvLyBXaW5kb3cgZnVuY3Rpb25zXG4gIEJBUlRMRVRUOiAgICAgICAxLFxuICBCQVJUTEVUVEhBTk46ICAgMixcbiAgQkxBQ0tNQU46ICAgICAgIDMsXG4gIENPU0lORTogICAgICAgICA0LFxuICBHQVVTUzogICAgICAgICAgNSxcbiAgSEFNTUlORzogICAgICAgIDYsXG4gIEhBTk46ICAgICAgICAgICA3LFxuICBMQU5DWk9TOiAgICAgICAgOCxcbiAgUkVDVEFOR1VMQVI6ICAgIDksXG4gIFRSSUFOR1VMQVI6ICAgICAxMCxcblxuICAvLyBMb29wIG1vZGVzXG4gIE9GRjogICAgICAgICAgICAwLFxuICBGVzogICAgICAgICAgICAgMSxcbiAgQlc6ICAgICAgICAgICAgIDIsXG4gIEZXQlc6ICAgICAgICAgICAzLFxuXG4gIC8vIE1hdGhcbiAgVFdPX1BJOiAgICAgICAgIDIqTWF0aC5QSVxufTtcblxuLy8gU2V0dXAgYXJyYXlzIGZvciBwbGF0Zm9ybXMgd2hpY2ggZG8gbm90IHN1cHBvcnQgYnl0ZSBhcnJheXNcbmZ1bmN0aW9uIHNldHVwVHlwZWRBcnJheShuYW1lLCBmYWxsYmFjaykge1xuICAvLyBjaGVjayBpZiBUeXBlZEFycmF5IGV4aXN0c1xuICAvLyB0eXBlb2Ygb24gTWluZWZpZWxkIGFuZCBDaHJvbWUgcmV0dXJuIGZ1bmN0aW9uLCB0eXBlb2Ygb24gV2Via2l0IHJldHVybnMgb2JqZWN0LlxuICBpZiAodHlwZW9mIHRoaXNbbmFtZV0gIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgdGhpc1tuYW1lXSAhPT0gXCJvYmplY3RcIikge1xuICAgIC8vIG5vcGUuLiBjaGVjayBpZiBXZWJHTEFycmF5IGV4aXN0c1xuICAgIGlmICh0eXBlb2YgdGhpc1tmYWxsYmFja10gPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgdGhpc1tmYWxsYmFja10gIT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHRoaXNbbmFtZV0gPSB0aGlzW2ZhbGxiYWNrXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbm9wZS4uIHNldCBhcyBOYXRpdmUgSlMgYXJyYXlcbiAgICAgIHRoaXNbbmFtZV0gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBBcnJheShvYmopO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuXG5zZXR1cFR5cGVkQXJyYXkoXCJGbG9hdDMyQXJyYXlcIiwgXCJXZWJHTEZsb2F0QXJyYXlcIik7XG5zZXR1cFR5cGVkQXJyYXkoXCJJbnQzMkFycmF5XCIsICAgXCJXZWJHTEludEFycmF5XCIpO1xuc2V0dXBUeXBlZEFycmF5KFwiVWludDE2QXJyYXlcIiwgIFwiV2ViR0xVbnNpZ25lZFNob3J0QXJyYXlcIik7XG5zZXR1cFR5cGVkQXJyYXkoXCJVaW50OEFycmF5XCIsICAgXCJXZWJHTFVuc2lnbmVkQnl0ZUFycmF5XCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBEU1AgVVRJTElUWSBGVU5DVElPTlMgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBJbnZlcnRzIHRoZSBwaGFzZSBvZiBhIHNpZ25hbFxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGJ1ZmZlciBBIHNhbXBsZSBidWZmZXJcbiAqXG4gKiBAcmV0dXJucyBUaGUgaW52ZXJ0ZWQgc2FtcGxlIGJ1ZmZlclxuICovXG5EU1AuaW52ZXJ0ID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBidWZmZXIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBidWZmZXJbaV0gKj0gLTE7XG4gIH1cblxuICByZXR1cm4gYnVmZmVyO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBzcGxpdC1zdGVyZW8gKGR1YWwgbW9ubykgc2FtcGxlIGJ1ZmZlcnMgaW50byBhIHN0ZXJlbyBpbnRlcmxlYXZlZCBzYW1wbGUgYnVmZmVyXG4gKlxuICogQHBhcmFtIHtBcnJheX0gbGVmdCAgQSBzYW1wbGUgYnVmZmVyXG4gKiBAcGFyYW0ge0FycmF5fSByaWdodCBBIHNhbXBsZSBidWZmZXJcbiAqXG4gKiBAcmV0dXJucyBUaGUgc3RlcmVvIGludGVybGVhdmVkIGJ1ZmZlclxuICovXG5EU1AuaW50ZXJsZWF2ZSA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gIGlmIChsZWZ0Lmxlbmd0aCAhPT0gcmlnaHQubGVuZ3RoKSB7XG4gICAgdGhyb3cgXCJDYW4gbm90IGludGVybGVhdmUuIENoYW5uZWwgbGVuZ3RocyBkaWZmZXIuXCI7XG4gIH1cbiBcbiAgdmFyIHN0ZXJlb0ludGVybGVhdmVkID0gbmV3IEZsb2F0MzJBcnJheShsZWZ0Lmxlbmd0aCAqIDIpO1xuIFxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGVmdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHN0ZXJlb0ludGVybGVhdmVkWzIqaV0gICA9IGxlZnRbaV07XG4gICAgc3RlcmVvSW50ZXJsZWF2ZWRbMippKzFdID0gcmlnaHRbaV07XG4gIH1cbiBcbiAgcmV0dXJuIHN0ZXJlb0ludGVybGVhdmVkO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0ZXJlby1pbnRlcmxlYXZlZCBzYW1wbGUgYnVmZmVyIGludG8gc3BsaXQtc3RlcmVvIChkdWFsIG1vbm8pIHNhbXBsZSBidWZmZXJzXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYnVmZmVyIEEgc3RlcmVvLWludGVybGVhdmVkIHNhbXBsZSBidWZmZXJcbiAqXG4gKiBAcmV0dXJucyBhbiBBcnJheSBjb250YWluaW5nIGxlZnQgYW5kIHJpZ2h0IGNoYW5uZWxzXG4gKi9cbkRTUC5kZWludGVybGVhdmUgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBsZWZ0LCByaWdodCwgbWl4LCBkZWludGVybGVhdmVDaGFubmVsID0gW107IFxuXG4gIGRlaW50ZXJsZWF2ZUNoYW5uZWxbRFNQLk1JWF0gPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYnVmZmVyLmxlbmd0aC8yOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIG1peFtpXSA9IChidWZmZXJbMippXSArIGJ1ZmZlclsyKmkrMV0pIC8gMjtcbiAgICB9XG4gICAgcmV0dXJuIG1peDtcbiAgfTtcblxuICBkZWludGVybGVhdmVDaGFubmVsW0RTUC5MRUZUXSA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBidWZmZXIubGVuZ3RoLzI7IGkgPCBsZW47IGkrKykge1xuICAgICAgbGVmdFtpXSAgPSBidWZmZXJbMippXTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH07XG5cbiAgZGVpbnRlcmxlYXZlQ2hhbm5lbFtEU1AuUklHSFRdID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGJ1ZmZlci5sZW5ndGgvMjsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICByaWdodFtpXSAgPSBidWZmZXJbMippKzFdO1xuICAgIH1cbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGNoYW5uZWwsIGJ1ZmZlcikgeyBcbiAgICBsZWZ0ICA9IGxlZnQgIHx8IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLmxlbmd0aC8yKTtcbiAgICByaWdodCA9IHJpZ2h0IHx8IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLmxlbmd0aC8yKTtcbiAgICBtaXggICA9IG1peCAgIHx8IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLmxlbmd0aC8yKTtcblxuICAgIGlmIChidWZmZXIubGVuZ3RoLzIgIT09IGxlZnQubGVuZ3RoKSB7XG4gICAgICBsZWZ0ICA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyLmxlbmd0aC8yKTtcbiAgICAgIHJpZ2h0ID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXIubGVuZ3RoLzIpO1xuICAgICAgbWl4ICAgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5sZW5ndGgvMik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlaW50ZXJsZWF2ZUNoYW5uZWxbY2hhbm5lbF0oYnVmZmVyKTtcbiAgfTtcbn0oKSk7XG5cbi8qKlxuICogU2VwYXJhdGVzIGEgY2hhbm5lbCBmcm9tIGEgc3RlcmVvLWludGVybGVhdmVkIHNhbXBsZSBidWZmZXJcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSAgYnVmZmVyIEEgc3RlcmVvLWludGVybGVhdmVkIHNhbXBsZSBidWZmZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjaGFubmVsIEEgY2hhbm5lbCBjb25zdGFudCAoTEVGVCwgUklHSFQsIE1JWClcbiAqXG4gKiBAcmV0dXJucyBhbiBBcnJheSBjb250YWluaW5nIGEgc2lnbmFsIG1vbm8gc2FtcGxlIGJ1ZmZlclxuICovXG5EU1AuZ2V0Q2hhbm5lbCA9IERTUC5kZWludGVybGVhdmU7XG5cbi8qKlxuICogSGVscGVyIG1ldGhvZCAoZm9yIFJldmVyYikgdG8gbWl4IHR3byAoaW50ZXJsZWF2ZWQpIHNhbXBsZWJ1ZmZlcnMuIEl0J3MgcG9zc2libGVcbiAqIHRvIG5lZ2F0ZSB0aGUgc2Vjb25kIGJ1ZmZlciB3aGlsZSBtaXhpbmcgYW5kIHRvIHBlcmZvcm0gYSB2b2x1bWUgY29ycmVjdGlvblxuICogb24gdGhlIGZpbmFsIHNpZ25hbC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBzYW1wbGVCdWZmZXIxIEFycmF5IGNvbnRhaW5pbmcgRmxvYXQgdmFsdWVzIG9yIGEgRmxvYXQzMkFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBzYW1wbGVCdWZmZXIyIEFycmF5IGNvbnRhaW5pbmcgRmxvYXQgdmFsdWVzIG9yIGEgRmxvYXQzMkFycmF5XG4gKiBAcGFyYW0ge0Jvb2xlYW59IG5lZ2F0ZSBXaGVuIHRydWUgaW52ZXJ0cy9mbGlwcyB0aGUgYXVkaW8gc2lnbmFsXG4gKiBAcGFyYW0ge051bWJlcn0gdm9sdW1lQ29ycmVjdGlvbiBXaGVuIHlvdSBhZGQgbXVsdGlwbGUgc2FtcGxlIGJ1ZmZlcnMsIHVzZSB0aGlzIHRvIHRhbWUgeW91ciBzaWduYWwgOylcbiAqXG4gKiBAcmV0dXJucyBBIG5ldyBGbG9hdDMyQXJyYXkgaW50ZXJsZWF2ZWQgYnVmZmVyLlxuICovXG5EU1AubWl4U2FtcGxlQnVmZmVycyA9IGZ1bmN0aW9uKHNhbXBsZUJ1ZmZlcjEsIHNhbXBsZUJ1ZmZlcjIsIG5lZ2F0ZSwgdm9sdW1lQ29ycmVjdGlvbil7XG4gIHZhciBvdXRwdXRTYW1wbGVzID0gbmV3IEZsb2F0MzJBcnJheShzYW1wbGVCdWZmZXIxKTtcblxuICBmb3IodmFyIGkgPSAwOyBpPHNhbXBsZUJ1ZmZlcjEubGVuZ3RoOyBpKyspe1xuICAgIG91dHB1dFNhbXBsZXNbaV0gKz0gKG5lZ2F0ZSA/IC1zYW1wbGVCdWZmZXIyW2ldIDogc2FtcGxlQnVmZmVyMltpXSkgLyB2b2x1bWVDb3JyZWN0aW9uO1xuICB9XG4gXG4gIHJldHVybiBvdXRwdXRTYW1wbGVzO1xufTsgXG5cbi8vIEJpcXVhZCBmaWx0ZXIgdHlwZXNcbkRTUC5MUEYgPSAwOyAgICAgICAgICAgICAgICAvLyBIKHMpID0gMSAvIChzXjIgKyBzL1EgKyAxKVxuRFNQLkhQRiA9IDE7ICAgICAgICAgICAgICAgIC8vIEgocykgPSBzXjIgLyAoc14yICsgcy9RICsgMSlcbkRTUC5CUEZfQ09OU1RBTlRfU0tJUlQgPSAyOyAvLyBIKHMpID0gcyAvIChzXjIgKyBzL1EgKyAxKSAgKGNvbnN0YW50IHNraXJ0IGdhaW4sIHBlYWsgZ2FpbiA9IFEpXG5EU1AuQlBGX0NPTlNUQU5UX1BFQUsgPSAzOyAgLy8gSChzKSA9IChzL1EpIC8gKHNeMiArIHMvUSArIDEpICAgICAgKGNvbnN0YW50IDAgZEIgcGVhayBnYWluKVxuRFNQLk5PVENIID0gNDsgICAgICAgICAgICAgIC8vIEgocykgPSAoc14yICsgMSkgLyAoc14yICsgcy9RICsgMSlcbkRTUC5BUEYgPSA1OyAgICAgICAgICAgICAgICAvLyBIKHMpID0gKHNeMiAtIHMvUSArIDEpIC8gKHNeMiArIHMvUSArIDEpXG5EU1AuUEVBS0lOR19FUSA9IDY7ICAgICAgICAgLy8gSChzKSA9IChzXjIgKyBzKihBL1EpICsgMSkgLyAoc14yICsgcy8oQSpRKSArIDEpXG5EU1AuTE9XX1NIRUxGID0gNzsgICAgICAgICAgLy8gSChzKSA9IEEgKiAoc14yICsgKHNxcnQoQSkvUSkqcyArIEEpLyhBKnNeMiArIChzcXJ0KEEpL1EpKnMgKyAxKVxuRFNQLkhJR0hfU0hFTEYgPSA4OyAgICAgICAgIC8vIEgocykgPSBBICogKEEqc14yICsgKHNxcnQoQSkvUSkqcyArIDEpLyhzXjIgKyAoc3FydChBKS9RKSpzICsgQSlcblxuLy8gQmlxdWFkIGZpbHRlciBwYXJhbWV0ZXIgdHlwZXNcbkRTUC5RID0gMTtcbkRTUC5CVyA9IDI7IC8vIFNIQVJFRCB3aXRoIEJBQ0tXQVJEUyBMT09QIE1PREVcbkRTUC5TID0gMztcblxuLy8gRmluZCBSTVMgb2Ygc2lnbmFsXG5EU1AuUk1TID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIHZhciB0b3RhbCA9IDA7XG4gIFxuICBmb3IgKHZhciBpID0gMCwgbiA9IGJ1ZmZlci5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICB0b3RhbCArPSBidWZmZXJbaV0gKiBidWZmZXJbaV07XG4gIH1cbiAgXG4gIHJldHVybiBNYXRoLnNxcnQodG90YWwgLyBuKTtcbn07XG5cbi8vIEZpbmQgUGVhayBvZiBzaWduYWxcbkRTUC5QZWFrID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIHZhciBwZWFrID0gMDtcbiAgXG4gIGZvciAodmFyIGkgPSAwLCBuID0gYnVmZmVyLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgIHBlYWsgPSAoTWF0aC5hYnMoYnVmZmVyW2ldKSA+IHBlYWspID8gTWF0aC5hYnMoYnVmZmVyW2ldKSA6IHBlYWs7IFxuICB9XG4gIFxuICByZXR1cm4gcGVhaztcbn07XG5cbi8vIEZvdXJpZXIgVHJhbnNmb3JtIE1vZHVsZSB1c2VkIGJ5IERGVCwgRkZULCBSRkZUXG5mdW5jdGlvbiBGb3VyaWVyVHJhbnNmb3JtKGJ1ZmZlclNpemUsIHNhbXBsZVJhdGUpIHtcbiAgdGhpcy5idWZmZXJTaXplID0gYnVmZmVyU2l6ZTtcbiAgdGhpcy5zYW1wbGVSYXRlID0gc2FtcGxlUmF0ZTtcbiAgdGhpcy5iYW5kd2lkdGggID0gMiAvIGJ1ZmZlclNpemUgKiBzYW1wbGVSYXRlIC8gMjtcblxuICB0aGlzLnNwZWN0cnVtICAgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlclNpemUvMik7XG4gIHRoaXMucmVhbCAgICAgICA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyU2l6ZSk7XG4gIHRoaXMuaW1hZyAgICAgICA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyU2l6ZSk7XG5cbiAgdGhpcy5wZWFrQmFuZCAgID0gMDtcbiAgdGhpcy5wZWFrICAgICAgID0gMDtcblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgKm1pZGRsZSogZnJlcXVlbmN5IG9mIGFuIEZGVCBiYW5kLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSBGRlQgYmFuZC5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIG1pZGRsZSBmcmVxdWVuY3kgaW4gSHouXG4gICAqL1xuICB0aGlzLmdldEJhbmRGcmVxdWVuY3kgPSBmdW5jdGlvbihpbmRleCkge1xuICAgIHJldHVybiB0aGlzLmJhbmR3aWR0aCAqIGluZGV4ICsgdGhpcy5iYW5kd2lkdGggLyAyO1xuICB9O1xuXG4gIHRoaXMuY2FsY3VsYXRlU3BlY3RydW0gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3BlY3RydW0gID0gdGhpcy5zcGVjdHJ1bSxcbiAgICAgICAgcmVhbCAgICAgID0gdGhpcy5yZWFsLFxuICAgICAgICBpbWFnICAgICAgPSB0aGlzLmltYWcsXG4gICAgICAgIGJTaSAgICAgICA9IDIgLyB0aGlzLmJ1ZmZlclNpemUsXG4gICAgICAgIHNxcnQgICAgICA9IE1hdGguc3FydCxcbiAgICAgICAgcnZhbCwgXG4gICAgICAgIGl2YWwsXG4gICAgICAgIG1hZztcblxuICAgIGZvciAodmFyIGkgPSAwLCBOID0gYnVmZmVyU2l6ZS8yOyBpIDwgTjsgaSsrKSB7XG4gICAgICBydmFsID0gcmVhbFtpXTtcbiAgICAgIGl2YWwgPSBpbWFnW2ldO1xuICAgICAgbWFnID0gYlNpICogc3FydChydmFsICogcnZhbCArIGl2YWwgKiBpdmFsKTtcblxuICAgICAgaWYgKG1hZyA+IHRoaXMucGVhaykge1xuICAgICAgICB0aGlzLnBlYWtCYW5kID0gaTtcbiAgICAgICAgdGhpcy5wZWFrID0gbWFnO1xuICAgICAgfVxuXG4gICAgICBzcGVjdHJ1bVtpXSA9IG1hZztcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogREZUIGlzIGEgY2xhc3MgZm9yIGNhbGN1bGF0aW5nIHRoZSBEaXNjcmV0ZSBGb3VyaWVyIFRyYW5zZm9ybSBvZiBhIHNpZ25hbC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gYnVmZmVyU2l6ZSBUaGUgc2l6ZSBvZiB0aGUgc2FtcGxlIGJ1ZmZlciB0byBiZSBjb21wdXRlZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNhbXBsZVJhdGUgVGhlIHNhbXBsZVJhdGUgb2YgdGhlIGJ1ZmZlciAoZWcuIDQ0MTAwKVxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBERlQoYnVmZmVyU2l6ZSwgc2FtcGxlUmF0ZSkge1xuICBGb3VyaWVyVHJhbnNmb3JtLmNhbGwodGhpcywgYnVmZmVyU2l6ZSwgc2FtcGxlUmF0ZSk7XG5cbiAgdmFyIE4gPSBidWZmZXJTaXplLzIgKiBidWZmZXJTaXplO1xuICB2YXIgVFdPX1BJID0gMiAqIE1hdGguUEk7XG5cbiAgdGhpcy5zaW5UYWJsZSA9IG5ldyBGbG9hdDMyQXJyYXkoTik7XG4gIHRoaXMuY29zVGFibGUgPSBuZXcgRmxvYXQzMkFycmF5KE4pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgdGhpcy5zaW5UYWJsZVtpXSA9IE1hdGguc2luKGkgKiBUV09fUEkgLyBidWZmZXJTaXplKTtcbiAgICB0aGlzLmNvc1RhYmxlW2ldID0gTWF0aC5jb3MoaSAqIFRXT19QSSAvIGJ1ZmZlclNpemUpO1xuICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBmb3J3YXJkIHRyYW5zZm9ybSBvbiB0aGUgc2FtcGxlIGJ1ZmZlci5cbiAqIENvbnZlcnRzIGEgdGltZSBkb21haW4gc2lnbmFsIHRvIGZyZXF1ZW5jeSBkb21haW4gc3BlY3RyYS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXIgVGhlIHNhbXBsZSBidWZmZXJcbiAqXG4gKiBAcmV0dXJucyBUaGUgZnJlcXVlbmN5IHNwZWN0cnVtIGFycmF5XG4gKi9cbkRGVC5wcm90b3R5cGUuZm9yd2FyZCA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICB2YXIgcmVhbCA9IHRoaXMucmVhbCwgXG4gICAgICBpbWFnID0gdGhpcy5pbWFnLFxuICAgICAgcnZhbCxcbiAgICAgIGl2YWw7XG5cbiAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmJ1ZmZlclNpemUvMjsgaysrKSB7XG4gICAgcnZhbCA9IDAuMDtcbiAgICBpdmFsID0gMC4wO1xuXG4gICAgZm9yICh2YXIgbiA9IDA7IG4gPCBidWZmZXIubGVuZ3RoOyBuKyspIHtcbiAgICAgIHJ2YWwgKz0gdGhpcy5jb3NUYWJsZVtrKm5dICogYnVmZmVyW25dO1xuICAgICAgaXZhbCArPSB0aGlzLnNpblRhYmxlW2sqbl0gKiBidWZmZXJbbl07XG4gICAgfVxuXG4gICAgcmVhbFtrXSA9IHJ2YWw7XG4gICAgaW1hZ1trXSA9IGl2YWw7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jYWxjdWxhdGVTcGVjdHJ1bSgpO1xufTtcblxuXG4vKipcbiAqIEZGVCBpcyBhIGNsYXNzIGZvciBjYWxjdWxhdGluZyB0aGUgRGlzY3JldGUgRm91cmllciBUcmFuc2Zvcm0gb2YgYSBzaWduYWxcbiAqIHdpdGggdGhlIEZhc3QgRm91cmllciBUcmFuc2Zvcm0gYWxnb3JpdGhtLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBidWZmZXJTaXplIFRoZSBzaXplIG9mIHRoZSBzYW1wbGUgYnVmZmVyIHRvIGJlIGNvbXB1dGVkLiBNdXN0IGJlIHBvd2VyIG9mIDJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzYW1wbGVSYXRlIFRoZSBzYW1wbGVSYXRlIG9mIHRoZSBidWZmZXIgKGVnLiA0NDEwMClcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gRkZUKGJ1ZmZlclNpemUsIHNhbXBsZVJhdGUpIHtcbiAgRm91cmllclRyYW5zZm9ybS5jYWxsKHRoaXMsIGJ1ZmZlclNpemUsIHNhbXBsZVJhdGUpO1xuICAgXG4gIHRoaXMucmV2ZXJzZVRhYmxlID0gbmV3IFVpbnQzMkFycmF5KGJ1ZmZlclNpemUpO1xuXG4gIHZhciBsaW1pdCA9IDE7XG4gIHZhciBiaXQgPSBidWZmZXJTaXplID4+IDE7XG5cbiAgdmFyIGk7XG5cbiAgd2hpbGUgKGxpbWl0IDwgYnVmZmVyU2l6ZSkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBsaW1pdDsgaSsrKSB7XG4gICAgICB0aGlzLnJldmVyc2VUYWJsZVtpICsgbGltaXRdID0gdGhpcy5yZXZlcnNlVGFibGVbaV0gKyBiaXQ7XG4gICAgfVxuXG4gICAgbGltaXQgPSBsaW1pdCA8PCAxO1xuICAgIGJpdCA9IGJpdCA+PiAxO1xuICB9XG5cbiAgdGhpcy5zaW5UYWJsZSA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyU2l6ZSk7XG4gIHRoaXMuY29zVGFibGUgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlclNpemUpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBidWZmZXJTaXplOyBpKyspIHtcbiAgICB0aGlzLnNpblRhYmxlW2ldID0gTWF0aC5zaW4oLU1hdGguUEkvaSk7XG4gICAgdGhpcy5jb3NUYWJsZVtpXSA9IE1hdGguY29zKC1NYXRoLlBJL2kpO1xuICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBmb3J3YXJkIHRyYW5zZm9ybSBvbiB0aGUgc2FtcGxlIGJ1ZmZlci5cbiAqIENvbnZlcnRzIGEgdGltZSBkb21haW4gc2lnbmFsIHRvIGZyZXF1ZW5jeSBkb21haW4gc3BlY3RyYS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXIgVGhlIHNhbXBsZSBidWZmZXIuIEJ1ZmZlciBMZW5ndGggbXVzdCBiZSBwb3dlciBvZiAyXG4gKlxuICogQHJldHVybnMgVGhlIGZyZXF1ZW5jeSBzcGVjdHJ1bSBhcnJheVxuICovXG5GRlQucHJvdG90eXBlLmZvcndhcmQgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgLy8gTG9jYWxseSBzY29wZSB2YXJpYWJsZXMgZm9yIHNwZWVkIHVwXG4gIHZhciBidWZmZXJTaXplICAgICAgPSB0aGlzLmJ1ZmZlclNpemUsXG4gICAgICBjb3NUYWJsZSAgICAgICAgPSB0aGlzLmNvc1RhYmxlLFxuICAgICAgc2luVGFibGUgICAgICAgID0gdGhpcy5zaW5UYWJsZSxcbiAgICAgIHJldmVyc2VUYWJsZSAgICA9IHRoaXMucmV2ZXJzZVRhYmxlLFxuICAgICAgcmVhbCAgICAgICAgICAgID0gdGhpcy5yZWFsLFxuICAgICAgaW1hZyAgICAgICAgICAgID0gdGhpcy5pbWFnLFxuICAgICAgc3BlY3RydW0gICAgICAgID0gdGhpcy5zcGVjdHJ1bTtcblxuICB2YXIgayA9IE1hdGguZmxvb3IoTWF0aC5sb2coYnVmZmVyU2l6ZSkgLyBNYXRoLkxOMik7XG5cbiAgaWYgKE1hdGgucG93KDIsIGspICE9PSBidWZmZXJTaXplKSB7IHRocm93IFwiSW52YWxpZCBidWZmZXIgc2l6ZSwgbXVzdCBiZSBhIHBvd2VyIG9mIDIuXCI7IH1cbiAgaWYgKGJ1ZmZlclNpemUgIT09IGJ1ZmZlci5sZW5ndGgpICB7IHRocm93IFwiU3VwcGxpZWQgYnVmZmVyIGlzIG5vdCB0aGUgc2FtZSBzaXplIGFzIGRlZmluZWQgRkZULiBGRlQgU2l6ZTogXCIgKyBidWZmZXJTaXplICsgXCIgQnVmZmVyIFNpemU6IFwiICsgYnVmZmVyLmxlbmd0aDsgfVxuXG4gIHZhciBoYWxmU2l6ZSA9IDEsXG4gICAgICBwaGFzZVNoaWZ0U3RlcFJlYWwsXG4gICAgICBwaGFzZVNoaWZ0U3RlcEltYWcsXG4gICAgICBjdXJyZW50UGhhc2VTaGlmdFJlYWwsXG4gICAgICBjdXJyZW50UGhhc2VTaGlmdEltYWcsXG4gICAgICBvZmYsXG4gICAgICB0cixcbiAgICAgIHRpLFxuICAgICAgdG1wUmVhbCxcbiAgICAgIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IGJ1ZmZlclNpemU7IGkrKykge1xuICAgIHJlYWxbaV0gPSBidWZmZXJbcmV2ZXJzZVRhYmxlW2ldXTtcbiAgICBpbWFnW2ldID0gMDtcbiAgfVxuXG4gIHdoaWxlIChoYWxmU2l6ZSA8IGJ1ZmZlclNpemUpIHtcbiAgICAvL3BoYXNlU2hpZnRTdGVwUmVhbCA9IE1hdGguY29zKC1NYXRoLlBJL2hhbGZTaXplKTtcbiAgICAvL3BoYXNlU2hpZnRTdGVwSW1hZyA9IE1hdGguc2luKC1NYXRoLlBJL2hhbGZTaXplKTtcbiAgICBwaGFzZVNoaWZ0U3RlcFJlYWwgPSBjb3NUYWJsZVtoYWxmU2l6ZV07XG4gICAgcGhhc2VTaGlmdFN0ZXBJbWFnID0gc2luVGFibGVbaGFsZlNpemVdO1xuICAgIFxuICAgIGN1cnJlbnRQaGFzZVNoaWZ0UmVhbCA9IDE7XG4gICAgY3VycmVudFBoYXNlU2hpZnRJbWFnID0gMDtcblxuICAgIGZvciAodmFyIGZmdFN0ZXAgPSAwOyBmZnRTdGVwIDwgaGFsZlNpemU7IGZmdFN0ZXArKykge1xuICAgICAgaSA9IGZmdFN0ZXA7XG5cbiAgICAgIHdoaWxlIChpIDwgYnVmZmVyU2l6ZSkge1xuICAgICAgICBvZmYgPSBpICsgaGFsZlNpemU7XG4gICAgICAgIHRyID0gKGN1cnJlbnRQaGFzZVNoaWZ0UmVhbCAqIHJlYWxbb2ZmXSkgLSAoY3VycmVudFBoYXNlU2hpZnRJbWFnICogaW1hZ1tvZmZdKTtcbiAgICAgICAgdGkgPSAoY3VycmVudFBoYXNlU2hpZnRSZWFsICogaW1hZ1tvZmZdKSArIChjdXJyZW50UGhhc2VTaGlmdEltYWcgKiByZWFsW29mZl0pO1xuXG4gICAgICAgIHJlYWxbb2ZmXSA9IHJlYWxbaV0gLSB0cjtcbiAgICAgICAgaW1hZ1tvZmZdID0gaW1hZ1tpXSAtIHRpO1xuICAgICAgICByZWFsW2ldICs9IHRyO1xuICAgICAgICBpbWFnW2ldICs9IHRpO1xuXG4gICAgICAgIGkgKz0gaGFsZlNpemUgPDwgMTtcbiAgICAgIH1cblxuICAgICAgdG1wUmVhbCA9IGN1cnJlbnRQaGFzZVNoaWZ0UmVhbDtcbiAgICAgIGN1cnJlbnRQaGFzZVNoaWZ0UmVhbCA9ICh0bXBSZWFsICogcGhhc2VTaGlmdFN0ZXBSZWFsKSAtIChjdXJyZW50UGhhc2VTaGlmdEltYWcgKiBwaGFzZVNoaWZ0U3RlcEltYWcpO1xuICAgICAgY3VycmVudFBoYXNlU2hpZnRJbWFnID0gKHRtcFJlYWwgKiBwaGFzZVNoaWZ0U3RlcEltYWcpICsgKGN1cnJlbnRQaGFzZVNoaWZ0SW1hZyAqIHBoYXNlU2hpZnRTdGVwUmVhbCk7XG4gICAgfVxuXG4gICAgaGFsZlNpemUgPSBoYWxmU2l6ZSA8PCAxO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuY2FsY3VsYXRlU3BlY3RydW0oKTtcbn07XG5cbkZGVC5wcm90b3R5cGUuaW52ZXJzZSA9IGZ1bmN0aW9uKHJlYWwsIGltYWcpIHtcbiAgLy8gTG9jYWxseSBzY29wZSB2YXJpYWJsZXMgZm9yIHNwZWVkIHVwXG4gIHZhciBidWZmZXJTaXplICAgICAgPSB0aGlzLmJ1ZmZlclNpemUsXG4gICAgICBjb3NUYWJsZSAgICAgICAgPSB0aGlzLmNvc1RhYmxlLFxuICAgICAgc2luVGFibGUgICAgICAgID0gdGhpcy5zaW5UYWJsZSxcbiAgICAgIHJldmVyc2VUYWJsZSAgICA9IHRoaXMucmV2ZXJzZVRhYmxlLFxuICAgICAgc3BlY3RydW0gICAgICAgID0gdGhpcy5zcGVjdHJ1bTtcbiAgICAgXG4gICAgICByZWFsID0gcmVhbCB8fCB0aGlzLnJlYWw7XG4gICAgICBpbWFnID0gaW1hZyB8fCB0aGlzLmltYWc7XG5cbiAgdmFyIGhhbGZTaXplID0gMSxcbiAgICAgIHBoYXNlU2hpZnRTdGVwUmVhbCxcbiAgICAgIHBoYXNlU2hpZnRTdGVwSW1hZyxcbiAgICAgIGN1cnJlbnRQaGFzZVNoaWZ0UmVhbCxcbiAgICAgIGN1cnJlbnRQaGFzZVNoaWZ0SW1hZyxcbiAgICAgIG9mZixcbiAgICAgIHRyLFxuICAgICAgdGksXG4gICAgICB0bXBSZWFsLFxuICAgICAgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgYnVmZmVyU2l6ZTsgaSsrKSB7XG4gICAgaW1hZ1tpXSAqPSAtMTtcbiAgfVxuXG4gIHZhciByZXZSZWFsID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXJTaXplKTtcbiAgdmFyIHJldkltYWcgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlclNpemUpO1xuIFxuICBmb3IgKGkgPSAwOyBpIDwgcmVhbC5sZW5ndGg7IGkrKykge1xuICAgIHJldlJlYWxbaV0gPSByZWFsW3JldmVyc2VUYWJsZVtpXV07XG4gICAgcmV2SW1hZ1tpXSA9IGltYWdbcmV2ZXJzZVRhYmxlW2ldXTtcbiAgfVxuIFxuICByZWFsID0gcmV2UmVhbDtcbiAgaW1hZyA9IHJldkltYWc7XG5cbiAgd2hpbGUgKGhhbGZTaXplIDwgYnVmZmVyU2l6ZSkge1xuICAgIHBoYXNlU2hpZnRTdGVwUmVhbCA9IGNvc1RhYmxlW2hhbGZTaXplXTtcbiAgICBwaGFzZVNoaWZ0U3RlcEltYWcgPSBzaW5UYWJsZVtoYWxmU2l6ZV07XG4gICAgY3VycmVudFBoYXNlU2hpZnRSZWFsID0gMTtcbiAgICBjdXJyZW50UGhhc2VTaGlmdEltYWcgPSAwO1xuXG4gICAgZm9yICh2YXIgZmZ0U3RlcCA9IDA7IGZmdFN0ZXAgPCBoYWxmU2l6ZTsgZmZ0U3RlcCsrKSB7XG4gICAgICBpID0gZmZ0U3RlcDtcblxuICAgICAgd2hpbGUgKGkgPCBidWZmZXJTaXplKSB7XG4gICAgICAgIG9mZiA9IGkgKyBoYWxmU2l6ZTtcbiAgICAgICAgdHIgPSAoY3VycmVudFBoYXNlU2hpZnRSZWFsICogcmVhbFtvZmZdKSAtIChjdXJyZW50UGhhc2VTaGlmdEltYWcgKiBpbWFnW29mZl0pO1xuICAgICAgICB0aSA9IChjdXJyZW50UGhhc2VTaGlmdFJlYWwgKiBpbWFnW29mZl0pICsgKGN1cnJlbnRQaGFzZVNoaWZ0SW1hZyAqIHJlYWxbb2ZmXSk7XG5cbiAgICAgICAgcmVhbFtvZmZdID0gcmVhbFtpXSAtIHRyO1xuICAgICAgICBpbWFnW29mZl0gPSBpbWFnW2ldIC0gdGk7XG4gICAgICAgIHJlYWxbaV0gKz0gdHI7XG4gICAgICAgIGltYWdbaV0gKz0gdGk7XG5cbiAgICAgICAgaSArPSBoYWxmU2l6ZSA8PCAxO1xuICAgICAgfVxuXG4gICAgICB0bXBSZWFsID0gY3VycmVudFBoYXNlU2hpZnRSZWFsO1xuICAgICAgY3VycmVudFBoYXNlU2hpZnRSZWFsID0gKHRtcFJlYWwgKiBwaGFzZVNoaWZ0U3RlcFJlYWwpIC0gKGN1cnJlbnRQaGFzZVNoaWZ0SW1hZyAqIHBoYXNlU2hpZnRTdGVwSW1hZyk7XG4gICAgICBjdXJyZW50UGhhc2VTaGlmdEltYWcgPSAodG1wUmVhbCAqIHBoYXNlU2hpZnRTdGVwSW1hZykgKyAoY3VycmVudFBoYXNlU2hpZnRJbWFnICogcGhhc2VTaGlmdFN0ZXBSZWFsKTtcbiAgICB9XG5cbiAgICBoYWxmU2l6ZSA9IGhhbGZTaXplIDw8IDE7XG4gIH1cblxuICB2YXIgYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXJTaXplKTsgLy8gdGhpcyBzaG91bGQgYmUgcmV1c2VkIGluc3RlYWRcbiAgZm9yIChpID0gMDsgaSA8IGJ1ZmZlclNpemU7IGkrKykge1xuICAgIGJ1ZmZlcltpXSA9IHJlYWxbaV0gLyBidWZmZXJTaXplO1xuICB9XG5cbiAgcmV0dXJuIGJ1ZmZlcjtcbn07XG5cbi8qKlxuICogUkZGVCBpcyBhIGNsYXNzIGZvciBjYWxjdWxhdGluZyB0aGUgRGlzY3JldGUgRm91cmllciBUcmFuc2Zvcm0gb2YgYSBzaWduYWxcbiAqIHdpdGggdGhlIEZhc3QgRm91cmllciBUcmFuc2Zvcm0gYWxnb3JpdGhtLlxuICpcbiAqIFRoaXMgbWV0aG9kIGN1cnJlbnRseSBvbmx5IGNvbnRhaW5zIGEgZm9yd2FyZCB0cmFuc2Zvcm0gYnV0IGlzIGhpZ2hseSBvcHRpbWl6ZWQuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGJ1ZmZlclNpemUgVGhlIHNpemUgb2YgdGhlIHNhbXBsZSBidWZmZXIgdG8gYmUgY29tcHV0ZWQuIE11c3QgYmUgcG93ZXIgb2YgMlxuICogQHBhcmFtIHtOdW1iZXJ9IHNhbXBsZVJhdGUgVGhlIHNhbXBsZVJhdGUgb2YgdGhlIGJ1ZmZlciAoZWcuIDQ0MTAwKVxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cbi8vIGxvb2t1cCB0YWJsZXMgZG9uJ3QgcmVhbGx5IGdhaW4gdXMgYW55IHNwZWVkLCBidXQgdGhleSBkbyBpbmNyZWFzZVxuLy8gY2FjaGUgZm9vdHByaW50LCBzbyBkb24ndCB1c2UgdGhlbSBpbiBoZXJlXG5cbi8vIGFsc28gd2UgZG9uJ3QgdXNlIHNlcGVhcmF0ZSBhcnJheXMgZm9yIHJlYWwvaW1hZ2luYXJ5IHBhcnRzXG5cbi8vIHRoaXMgb25lIGEgbGl0dGxlIG1vcmUgdGhhbiB0d2ljZSBhcyBmYXN0IGFzIHRoZSBvbmUgaW4gRkZUXG4vLyBob3dldmVyIEkgb25seSBkaWQgdGhlIGZvcndhcmQgdHJhbnNmb3JtXG5cbi8vIHRoZSByZXN0IG9mIHRoaXMgd2FzIHRyYW5zbGF0ZWQgZnJvbSBDLCBzZWUgaHR0cDovL3d3dy5qamouZGUvZnh0L1xuLy8gdGhpcyBpcyB0aGUgcmVhbCBzcGxpdCByYWRpeCBGRlRcblxuZnVuY3Rpb24gUkZGVChidWZmZXJTaXplLCBzYW1wbGVSYXRlKSB7XG4gIEZvdXJpZXJUcmFuc2Zvcm0uY2FsbCh0aGlzLCBidWZmZXJTaXplLCBzYW1wbGVSYXRlKTtcblxuICB0aGlzLnRyYW5zID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXJTaXplKTtcblxuICB0aGlzLnJldmVyc2VUYWJsZSA9IG5ldyBVaW50MzJBcnJheShidWZmZXJTaXplKTtcblxuICAvLyBkb24ndCB1c2UgYSBsb29rdXAgdGFibGUgdG8gZG8gdGhlIHBlcm11dGUsIHVzZSB0aGlzIGluc3RlYWRcbiAgdGhpcy5yZXZlcnNlQmluUGVybXV0ZSA9IGZ1bmN0aW9uIChkZXN0LCBzb3VyY2UpIHtcbiAgICB2YXIgYnVmZmVyU2l6ZSAgPSB0aGlzLmJ1ZmZlclNpemUsIFxuICAgICAgICBoYWxmU2l6ZSAgICA9IGJ1ZmZlclNpemUgPj4+IDEsIFxuICAgICAgICBubTEgICAgICAgICA9IGJ1ZmZlclNpemUgLSAxLCBcbiAgICAgICAgaSA9IDEsIHIgPSAwLCBoO1xuXG4gICAgZGVzdFswXSA9IHNvdXJjZVswXTtcblxuICAgIGRvIHtcbiAgICAgIHIgKz0gaGFsZlNpemU7XG4gICAgICBkZXN0W2ldID0gc291cmNlW3JdO1xuICAgICAgZGVzdFtyXSA9IHNvdXJjZVtpXTtcbiAgICAgIFxuICAgICAgaSsrO1xuXG4gICAgICBoID0gaGFsZlNpemUgPDwgMTtcbiAgICAgIHdoaWxlIChoID0gaCA+PiAxLCAhKChyIF49IGgpICYgaCkpO1xuXG4gICAgICBpZiAociA+PSBpKSB7IFxuICAgICAgICBkZXN0W2ldICAgICA9IHNvdXJjZVtyXTsgXG4gICAgICAgIGRlc3Rbcl0gICAgID0gc291cmNlW2ldO1xuXG4gICAgICAgIGRlc3Rbbm0xLWldID0gc291cmNlW25tMS1yXTsgXG4gICAgICAgIGRlc3Rbbm0xLXJdID0gc291cmNlW25tMS1pXTtcbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9IHdoaWxlIChpIDwgaGFsZlNpemUpO1xuICAgIGRlc3Rbbm0xXSA9IHNvdXJjZVtubTFdO1xuICB9O1xuXG4gIHRoaXMuZ2VuZXJhdGVSZXZlcnNlVGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJ1ZmZlclNpemUgID0gdGhpcy5idWZmZXJTaXplLCBcbiAgICAgICAgaGFsZlNpemUgICAgPSBidWZmZXJTaXplID4+PiAxLCBcbiAgICAgICAgbm0xICAgICAgICAgPSBidWZmZXJTaXplIC0gMSwgXG4gICAgICAgIGkgPSAxLCByID0gMCwgaDtcblxuICAgIHRoaXMucmV2ZXJzZVRhYmxlWzBdID0gMDtcblxuICAgIGRvIHtcbiAgICAgIHIgKz0gaGFsZlNpemU7XG4gICAgICBcbiAgICAgIHRoaXMucmV2ZXJzZVRhYmxlW2ldID0gcjtcbiAgICAgIHRoaXMucmV2ZXJzZVRhYmxlW3JdID0gaTtcblxuICAgICAgaSsrO1xuXG4gICAgICBoID0gaGFsZlNpemUgPDwgMTtcbiAgICAgIHdoaWxlIChoID0gaCA+PiAxLCAhKChyIF49IGgpICYgaCkpO1xuXG4gICAgICBpZiAociA+PSBpKSB7IFxuICAgICAgICB0aGlzLnJldmVyc2VUYWJsZVtpXSA9IHI7XG4gICAgICAgIHRoaXMucmV2ZXJzZVRhYmxlW3JdID0gaTtcblxuICAgICAgICB0aGlzLnJldmVyc2VUYWJsZVtubTEtaV0gPSBubTEtcjtcbiAgICAgICAgdGhpcy5yZXZlcnNlVGFibGVbbm0xLXJdID0gbm0xLWk7XG4gICAgICB9XG4gICAgICBpKys7XG4gICAgfSB3aGlsZSAoaSA8IGhhbGZTaXplKTtcblxuICAgIHRoaXMucmV2ZXJzZVRhYmxlW25tMV0gPSBubTE7XG4gIH07XG5cbiAgdGhpcy5nZW5lcmF0ZVJldmVyc2VUYWJsZSgpO1xufVxuXG5cbi8vIE9yZGVyaW5nIG9mIG91dHB1dDpcbi8vXG4vLyB0cmFuc1swXSAgICAgPSByZVswXSAoPT16ZXJvIGZyZXF1ZW5jeSwgcHVyZWx5IHJlYWwpXG4vLyB0cmFuc1sxXSAgICAgPSByZVsxXVxuLy8gICAgICAgICAgICAgLi4uXG4vLyB0cmFuc1tuLzItMV0gPSByZVtuLzItMV1cbi8vIHRyYW5zW24vMl0gICA9IHJlW24vMl0gICAgKD09bnlxdWlzdCBmcmVxdWVuY3ksIHB1cmVseSByZWFsKVxuLy9cbi8vIHRyYW5zW24vMisxXSA9IGltW24vMi0xXVxuLy8gdHJhbnNbbi8yKzJdID0gaW1bbi8yLTJdXG4vLyAgICAgICAgICAgICAuLi5cbi8vIHRyYW5zW24tMV0gICA9IGltWzFdIFxuXG5SRkZULnByb3RvdHlwZS5mb3J3YXJkID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIHZhciBuICAgICAgICAgPSB0aGlzLmJ1ZmZlclNpemUsIFxuICAgICAgc3BlY3RydW0gID0gdGhpcy5zcGVjdHJ1bSxcbiAgICAgIHggICAgICAgICA9IHRoaXMudHJhbnMsIFxuICAgICAgVFdPX1BJICAgID0gMipNYXRoLlBJLFxuICAgICAgc3FydCAgICAgID0gTWF0aC5zcXJ0LFxuICAgICAgaSAgICAgICAgID0gbiA+Pj4gMSxcbiAgICAgIGJTaSAgICAgICA9IDIgLyBuLFxuICAgICAgbjIsIG40LCBuOCwgbm4sIFxuICAgICAgdDEsIHQyLCB0MywgdDQsIFxuICAgICAgaTEsIGkyLCBpMywgaTQsIGk1LCBpNiwgaTcsIGk4LCBcbiAgICAgIHN0MSwgY2MxLCBzczEsIGNjMywgc3MzLFxuICAgICAgZSwgXG4gICAgICBhLFxuICAgICAgcnZhbCwgaXZhbCwgbWFnOyBcblxuICB0aGlzLnJldmVyc2VCaW5QZXJtdXRlKHgsIGJ1ZmZlcik7XG5cbiAgLypcbiAgdmFyIHJldmVyc2VUYWJsZSA9IHRoaXMucmV2ZXJzZVRhYmxlO1xuXG4gIGZvciAodmFyIGsgPSAwLCBsZW4gPSByZXZlcnNlVGFibGUubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICB4W2tdID0gYnVmZmVyW3JldmVyc2VUYWJsZVtrXV07XG4gIH1cbiAgKi9cblxuICBmb3IgKHZhciBpeCA9IDAsIGlkID0gNDsgaXggPCBuOyBpZCAqPSA0KSB7XG4gICAgZm9yICh2YXIgaTAgPSBpeDsgaTAgPCBuOyBpMCArPSBpZCkge1xuICAgICAgLy9zdW1kaWZmKHhbaTBdLCB4W2kwKzFdKTsgLy8ge2EsIGJ9ICA8LS18IHthK2IsIGEtYn1cbiAgICAgIHN0MSA9IHhbaTBdIC0geFtpMCsxXTtcbiAgICAgIHhbaTBdICs9IHhbaTArMV07XG4gICAgICB4W2kwKzFdID0gc3QxO1xuICAgIH0gXG4gICAgaXggPSAyKihpZC0xKTtcbiAgfVxuXG4gIG4yID0gMjtcbiAgbm4gPSBuID4+PiAxO1xuXG4gIHdoaWxlKChubiA9IG5uID4+PiAxKSkge1xuICAgIGl4ID0gMDtcbiAgICBuMiA9IG4yIDw8IDE7XG4gICAgaWQgPSBuMiA8PCAxO1xuICAgIG40ID0gbjIgPj4+IDI7XG4gICAgbjggPSBuMiA+Pj4gMztcbiAgICBkbyB7XG4gICAgICBpZihuNCAhPT0gMSkge1xuICAgICAgICBmb3IoaTAgPSBpeDsgaTAgPCBuOyBpMCArPSBpZCkge1xuICAgICAgICAgIGkxID0gaTA7XG4gICAgICAgICAgaTIgPSBpMSArIG40O1xuICAgICAgICAgIGkzID0gaTIgKyBuNDtcbiAgICAgICAgICBpNCA9IGkzICsgbjQ7XG4gICAgIFxuICAgICAgICAgIC8vZGlmZnN1bTNfcih4W2kzXSwgeFtpNF0sIHQxKTsgLy8ge2EsIGIsIHN9IDwtLXwge2EsIGItYSwgYStifVxuICAgICAgICAgIHQxID0geFtpM10gKyB4W2k0XTtcbiAgICAgICAgICB4W2k0XSAtPSB4W2kzXTtcbiAgICAgICAgICAvL3N1bWRpZmYzKHhbaTFdLCB0MSwgeFtpM10pOyAgIC8vIHthLCBiLCBkfSA8LS18IHthK2IsIGIsIGEtYn1cbiAgICAgICAgICB4W2kzXSA9IHhbaTFdIC0gdDE7IFxuICAgICAgICAgIHhbaTFdICs9IHQxO1xuICAgICBcbiAgICAgICAgICBpMSArPSBuODtcbiAgICAgICAgICBpMiArPSBuODtcbiAgICAgICAgICBpMyArPSBuODtcbiAgICAgICAgICBpNCArPSBuODtcbiAgICAgICAgIFxuICAgICAgICAgIC8vc3VtZGlmZih4W2kzXSwgeFtpNF0sIHQxLCB0Mik7IC8vIHtzLCBkfSAgPC0tfCB7YStiLCBhLWJ9XG4gICAgICAgICAgdDEgPSB4W2kzXSArIHhbaTRdO1xuICAgICAgICAgIHQyID0geFtpM10gLSB4W2k0XTtcbiAgICAgICAgIFxuICAgICAgICAgIHQxID0gLXQxICogTWF0aC5TUVJUMV8yO1xuICAgICAgICAgIHQyICo9IE1hdGguU1FSVDFfMjtcbiAgICAgXG4gICAgICAgICAgLy8gc3VtZGlmZih0MSwgeFtpMl0sIHhbaTRdLCB4W2kzXSk7IC8vIHtzLCBkfSAgPC0tfCB7YStiLCBhLWJ9XG4gICAgICAgICAgc3QxID0geFtpMl07XG4gICAgICAgICAgeFtpNF0gPSB0MSArIHN0MTsgXG4gICAgICAgICAgeFtpM10gPSB0MSAtIHN0MTtcbiAgICAgICAgICBcbiAgICAgICAgICAvL3N1bWRpZmYzKHhbaTFdLCB0MiwgeFtpMl0pOyAvLyB7YSwgYiwgZH0gPC0tfCB7YStiLCBiLCBhLWJ9XG4gICAgICAgICAgeFtpMl0gPSB4W2kxXSAtIHQyO1xuICAgICAgICAgIHhbaTFdICs9IHQyO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IoaTAgPSBpeDsgaTAgPCBuOyBpMCArPSBpZCkge1xuICAgICAgICAgIGkxID0gaTA7XG4gICAgICAgICAgaTIgPSBpMSArIG40O1xuICAgICAgICAgIGkzID0gaTIgKyBuNDtcbiAgICAgICAgICBpNCA9IGkzICsgbjQ7XG4gICAgIFxuICAgICAgICAgIC8vZGlmZnN1bTNfcih4W2kzXSwgeFtpNF0sIHQxKTsgLy8ge2EsIGIsIHN9IDwtLXwge2EsIGItYSwgYStifVxuICAgICAgICAgIHQxID0geFtpM10gKyB4W2k0XTsgXG4gICAgICAgICAgeFtpNF0gLT0geFtpM107XG4gICAgICAgICAgXG4gICAgICAgICAgLy9zdW1kaWZmMyh4W2kxXSwgdDEsIHhbaTNdKTsgICAvLyB7YSwgYiwgZH0gPC0tfCB7YStiLCBiLCBhLWJ9XG4gICAgICAgICAgeFtpM10gPSB4W2kxXSAtIHQxOyBcbiAgICAgICAgICB4W2kxXSArPSB0MTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgXG4gICAgICBpeCA9IChpZCA8PCAxKSAtIG4yO1xuICAgICAgaWQgPSBpZCA8PCAyO1xuICAgIH0gd2hpbGUgKGl4IDwgbik7XG4gXG4gICAgZSA9IFRXT19QSSAvIG4yO1xuXG4gICAgZm9yICh2YXIgaiA9IDE7IGogPCBuODsgaisrKSB7XG4gICAgICBhID0gaiAqIGU7XG4gICAgICBzczEgPSBNYXRoLnNpbihhKTtcbiAgICAgIGNjMSA9IE1hdGguY29zKGEpO1xuXG4gICAgICAvL3NzMyA9IHNpbigzKmEpOyBjYzMgPSBjb3MoMyphKTtcbiAgICAgIGNjMyA9IDQqY2MxKihjYzEqY2MxLTAuNzUpO1xuICAgICAgc3MzID0gNCpzczEqKDAuNzUtc3MxKnNzMSk7XG4gICBcbiAgICAgIGl4ID0gMDsgaWQgPSBuMiA8PCAxO1xuICAgICAgZG8ge1xuICAgICAgICBmb3IgKGkwID0gaXg7IGkwIDwgbjsgaTAgKz0gaWQpIHtcbiAgICAgICAgICBpMSA9IGkwICsgajtcbiAgICAgICAgICBpMiA9IGkxICsgbjQ7XG4gICAgICAgICAgaTMgPSBpMiArIG40O1xuICAgICAgICAgIGk0ID0gaTMgKyBuNDtcbiAgICAgICBcbiAgICAgICAgICBpNSA9IGkwICsgbjQgLSBqO1xuICAgICAgICAgIGk2ID0gaTUgKyBuNDtcbiAgICAgICAgICBpNyA9IGk2ICsgbjQ7XG4gICAgICAgICAgaTggPSBpNyArIG40O1xuICAgICAgIFxuICAgICAgICAgIC8vY211bHQoYywgcywgeCwgeSwgJnUsICZ2KVxuICAgICAgICAgIC8vY211bHQoY2MxLCBzczEsIHhbaTddLCB4W2kzXSwgdDIsIHQxKTsgLy8ge3Usdn0gPC0tfCB7eCpjLXkqcywgeCpzK3kqY31cbiAgICAgICAgICB0MiA9IHhbaTddKmNjMSAtIHhbaTNdKnNzMTsgXG4gICAgICAgICAgdDEgPSB4W2k3XSpzczEgKyB4W2kzXSpjYzE7XG4gICAgICAgICAgXG4gICAgICAgICAgLy9jbXVsdChjYzMsIHNzMywgeFtpOF0sIHhbaTRdLCB0NCwgdDMpO1xuICAgICAgICAgIHQ0ID0geFtpOF0qY2MzIC0geFtpNF0qc3MzOyBcbiAgICAgICAgICB0MyA9IHhbaThdKnNzMyArIHhbaTRdKmNjMztcbiAgICAgICBcbiAgICAgICAgICAvL3N1bWRpZmYodDIsIHQ0KTsgICAvLyB7YSwgYn0gPC0tfCB7YStiLCBhLWJ9XG4gICAgICAgICAgc3QxID0gdDIgLSB0NDtcbiAgICAgICAgICB0MiArPSB0NDtcbiAgICAgICAgICB0NCA9IHN0MTtcbiAgICAgICAgICBcbiAgICAgICAgICAvL3N1bWRpZmYodDIsIHhbaTZdLCB4W2k4XSwgeFtpM10pOyAvLyB7cywgZH0gIDwtLXwge2ErYiwgYS1ifVxuICAgICAgICAgIC8vc3QxID0geFtpNl07IHhbaThdID0gdDIgKyBzdDE7IHhbaTNdID0gdDIgLSBzdDE7XG4gICAgICAgICAgeFtpOF0gPSB0MiArIHhbaTZdOyBcbiAgICAgICAgICB4W2kzXSA9IHQyIC0geFtpNl07XG4gICAgICAgICBcbiAgICAgICAgICAvL3N1bWRpZmZfcih0MSwgdDMpOyAvLyB7YSwgYn0gPC0tfCB7YStiLCBiLWF9XG4gICAgICAgICAgc3QxID0gdDMgLSB0MTtcbiAgICAgICAgICB0MSArPSB0MztcbiAgICAgICAgICB0MyA9IHN0MTtcbiAgICAgICAgICBcbiAgICAgICAgICAvL3N1bWRpZmYodDMsIHhbaTJdLCB4W2k0XSwgeFtpN10pOyAvLyB7cywgZH0gIDwtLXwge2ErYiwgYS1ifVxuICAgICAgICAgIC8vc3QxID0geFtpMl07IHhbaTRdID0gdDMgKyBzdDE7IHhbaTddID0gdDMgLSBzdDE7XG4gICAgICAgICAgeFtpNF0gPSB0MyArIHhbaTJdOyBcbiAgICAgICAgICB4W2k3XSA9IHQzIC0geFtpMl07XG4gICAgICAgICBcbiAgICAgICAgICAvL3N1bWRpZmYzKHhbaTFdLCB0MSwgeFtpNl0pOyAgIC8vIHthLCBiLCBkfSA8LS18IHthK2IsIGIsIGEtYn1cbiAgICAgICAgICB4W2k2XSA9IHhbaTFdIC0gdDE7IFxuICAgICAgICAgIHhbaTFdICs9IHQxO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vZGlmZnN1bTNfcih0NCwgeFtpNV0sIHhbaTJdKTsgLy8ge2EsIGIsIHN9IDwtLXwge2EsIGItYSwgYStifVxuICAgICAgICAgIHhbaTJdID0gdDQgKyB4W2k1XTsgXG4gICAgICAgICAgeFtpNV0gLT0gdDQ7XG4gICAgICAgIH1cbiAgICAgXG4gICAgICAgIGl4ID0gKGlkIDw8IDEpIC0gbjI7XG4gICAgICAgIGlkID0gaWQgPDwgMjtcbiAgIFxuICAgICAgfSB3aGlsZSAoaXggPCBuKTtcbiAgICB9XG4gIH1cblxuICB3aGlsZSAoLS1pKSB7XG4gICAgcnZhbCA9IHhbaV07XG4gICAgaXZhbCA9IHhbbi1pLTFdO1xuICAgIG1hZyA9IGJTaSAqIHNxcnQocnZhbCAqIHJ2YWwgKyBpdmFsICogaXZhbCk7XG5cbiAgICBpZiAobWFnID4gdGhpcy5wZWFrKSB7XG4gICAgICB0aGlzLnBlYWtCYW5kID0gaTtcbiAgICAgIHRoaXMucGVhayA9IG1hZztcbiAgICB9XG5cbiAgICBzcGVjdHJ1bVtpXSA9IG1hZztcbiAgfVxuXG4gIHNwZWN0cnVtWzBdID0gYlNpICogeFswXTtcblxuICByZXR1cm4gc3BlY3RydW07XG59O1xuXG5mdW5jdGlvbiBTYW1wbGVyKGZpbGUsIGJ1ZmZlclNpemUsIHNhbXBsZVJhdGUsIHBsYXlTdGFydCwgcGxheUVuZCwgbG9vcFN0YXJ0LCBsb29wRW5kLCBsb29wTW9kZSkge1xuICB0aGlzLmZpbGUgPSBmaWxlO1xuICB0aGlzLmJ1ZmZlclNpemUgPSBidWZmZXJTaXplO1xuICB0aGlzLnNhbXBsZVJhdGUgPSBzYW1wbGVSYXRlO1xuICB0aGlzLnBsYXlTdGFydCAgPSBwbGF5U3RhcnQgfHwgMDsgLy8gMCVcbiAgdGhpcy5wbGF5RW5kICAgID0gcGxheUVuZCAgIHx8IDE7IC8vIDEwMCVcbiAgdGhpcy5sb29wU3RhcnQgID0gbG9vcFN0YXJ0IHx8IDA7XG4gIHRoaXMubG9vcEVuZCAgICA9IGxvb3BFbmQgICB8fCAxO1xuICB0aGlzLmxvb3BNb2RlICAgPSBsb29wTW9kZSAgfHwgRFNQLk9GRjtcbiAgdGhpcy5sb2FkZWQgICAgID0gZmFsc2U7XG4gIHRoaXMuc2FtcGxlcyAgICA9IFtdO1xuICB0aGlzLnNpZ25hbCAgICAgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlclNpemUpO1xuICB0aGlzLmZyYW1lQ291bnQgPSAwO1xuICB0aGlzLmVudmVsb3BlICAgPSBudWxsO1xuICB0aGlzLmFtcGxpdHVkZSAgPSAxO1xuICB0aGlzLnJvb3RGcmVxdWVuY3kgPSAxMTA7IC8vIEEyIDExMFxuICB0aGlzLmZyZXF1ZW5jeSAgPSA1NTA7XG4gIHRoaXMuc3RlcCAgICAgICA9IHRoaXMuZnJlcXVlbmN5IC8gdGhpcy5yb290RnJlcXVlbmN5O1xuICB0aGlzLmR1cmF0aW9uICAgPSAwO1xuICB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPSAwO1xuICB0aGlzLnBsYXloZWFkICAgPSAwO1xuIFxuICB2YXIgYXVkaW8gPSAvKiBuZXcgQXVkaW8oKTsqLyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiQVVESU9cIik7XG4gIHZhciBzZWxmID0gdGhpcztcbiBcbiAgdGhpcy5sb2FkU2FtcGxlcyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGJ1ZmZlciA9IERTUC5nZXRDaGFubmVsKERTUC5NSVgsIGV2ZW50LmZyYW1lQnVmZmVyKTtcbiAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBidWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHNlbGYuc2FtcGxlcy5wdXNoKGJ1ZmZlcltpXSk7XG4gICAgfVxuICB9O1xuIFxuICB0aGlzLmxvYWRDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGNvbnZlcnQgZmxleGlibGUganMgYXJyYXkgaW50byBhIGZhc3QgdHlwZWQgYXJyYXlcbiAgICBzZWxmLnNhbXBsZXMgPSBuZXcgRmxvYXQzMkFycmF5KHNlbGYuc2FtcGxlcyk7XG4gICAgc2VsZi5sb2FkZWQgPSB0cnVlO1xuICB9O1xuIFxuICB0aGlzLmxvYWRNZXRhRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuZHVyYXRpb24gPSBhdWRpby5kdXJhdGlvbjtcbiAgfTtcbiBcbiAgYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcihcIk1vekF1ZGlvQXZhaWxhYmxlXCIsIHRoaXMubG9hZFNhbXBsZXMsIGZhbHNlKTtcbiAgYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRlZG1ldGFkYXRhXCIsIHRoaXMubG9hZE1ldGFEYXRhLCBmYWxzZSk7XG4gIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoXCJlbmRlZFwiLCB0aGlzLmxvYWRDb21wbGV0ZSwgZmFsc2UpO1xuICBhdWRpby5tdXRlZCA9IHRydWU7XG4gIGF1ZGlvLnNyYyA9IGZpbGU7XG4gIGF1ZGlvLnBsYXkoKTtcbn1cblxuU2FtcGxlci5wcm90b3R5cGUuYXBwbHlFbnZlbG9wZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVudmVsb3BlLnByb2Nlc3ModGhpcy5zaWduYWwpO1xuICByZXR1cm4gdGhpcy5zaWduYWw7XG59O1xuXG5TYW1wbGVyLnByb3RvdHlwZS5nZW5lcmF0ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZnJhbWVPZmZzZXQgPSB0aGlzLmZyYW1lQ291bnQgKiB0aGlzLmJ1ZmZlclNpemU7XG4gXG4gIHZhciBsb29wV2lkdGggPSB0aGlzLnBsYXlFbmQgKiB0aGlzLnNhbXBsZXMubGVuZ3RoIC0gdGhpcy5wbGF5U3RhcnQgKiB0aGlzLnNhbXBsZXMubGVuZ3RoO1xuICB2YXIgcGxheVN0YXJ0U2FtcGxlcyA9IHRoaXMucGxheVN0YXJ0ICogdGhpcy5zYW1wbGVzLmxlbmd0aDsgLy8gaWUgMC41IC0+IDUwJSBvZiB0aGUgbGVuZ3RoXG4gIHZhciBwbGF5RW5kU2FtcGxlcyA9IHRoaXMucGxheUVuZCAqIHRoaXMuc2FtcGxlcy5sZW5ndGg7IC8vIGllIDAuNSAtPiA1MCUgb2YgdGhlIGxlbmd0aFxuICB2YXIgb2Zmc2V0O1xuXG4gIGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMuYnVmZmVyU2l6ZTsgaSsrICkge1xuICAgIHN3aXRjaCAodGhpcy5sb29wTW9kZSkge1xuICAgICAgY2FzZSBEU1AuT0ZGOlxuICAgICAgICB0aGlzLnBsYXloZWFkID0gTWF0aC5yb3VuZCh0aGlzLnNhbXBsZXNQcm9jZXNzZWQgKiB0aGlzLnN0ZXAgKyBwbGF5U3RhcnRTYW1wbGVzKTtcbiAgICAgICAgaWYgKHRoaXMucGxheWhlYWQgPCAodGhpcy5wbGF5RW5kICogdGhpcy5zYW1wbGVzLmxlbmd0aCkgKSB7XG4gICAgICAgICAgdGhpcy5zaWduYWxbaV0gPSB0aGlzLnNhbXBsZXNbdGhpcy5wbGF5aGVhZF0gKiB0aGlzLmFtcGxpdHVkZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNpZ25hbFtpXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgIFxuICAgICAgY2FzZSBEU1AuRlc6XG4gICAgICAgIHRoaXMucGxheWhlYWQgPSBNYXRoLnJvdW5kKCh0aGlzLnNhbXBsZXNQcm9jZXNzZWQgKiB0aGlzLnN0ZXApICUgbG9vcFdpZHRoICsgcGxheVN0YXJ0U2FtcGxlcyk7XG4gICAgICAgIGlmICh0aGlzLnBsYXloZWFkIDwgKHRoaXMucGxheUVuZCAqIHRoaXMuc2FtcGxlcy5sZW5ndGgpICkge1xuICAgICAgICAgIHRoaXMuc2lnbmFsW2ldID0gdGhpcy5zYW1wbGVzW3RoaXMucGxheWhlYWRdICogdGhpcy5hbXBsaXR1ZGU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICAgXG4gICAgICBjYXNlIERTUC5CVzpcbiAgICAgICAgdGhpcy5wbGF5aGVhZCA9IHBsYXlFbmRTYW1wbGVzIC0gTWF0aC5yb3VuZCgodGhpcy5zYW1wbGVzUHJvY2Vzc2VkICogdGhpcy5zdGVwKSAlIGxvb3BXaWR0aCk7XG4gICAgICAgIGlmICh0aGlzLnBsYXloZWFkIDwgKHRoaXMucGxheUVuZCAqIHRoaXMuc2FtcGxlcy5sZW5ndGgpICkge1xuICAgICAgICAgIHRoaXMuc2lnbmFsW2ldID0gdGhpcy5zYW1wbGVzW3RoaXMucGxheWhlYWRdICogdGhpcy5hbXBsaXR1ZGU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICAgXG4gICAgICBjYXNlIERTUC5GV0JXOlxuICAgICAgICBpZiAoIE1hdGguZmxvb3IodGhpcy5zYW1wbGVzUHJvY2Vzc2VkICogdGhpcy5zdGVwIC8gbG9vcFdpZHRoKSAlIDIgPT09IDAgKSB7XG4gICAgICAgICAgdGhpcy5wbGF5aGVhZCA9IE1hdGgucm91bmQoKHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCAqIHRoaXMuc3RlcCkgJSBsb29wV2lkdGggKyBwbGF5U3RhcnRTYW1wbGVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnBsYXloZWFkID0gcGxheUVuZFNhbXBsZXMgLSBNYXRoLnJvdW5kKCh0aGlzLnNhbXBsZXNQcm9jZXNzZWQgKiB0aGlzLnN0ZXApICUgbG9vcFdpZHRoKTtcbiAgICAgICAgfSAgXG4gICAgICAgIGlmICh0aGlzLnBsYXloZWFkIDwgKHRoaXMucGxheUVuZCAqIHRoaXMuc2FtcGxlcy5sZW5ndGgpICkge1xuICAgICAgICAgIHRoaXMuc2lnbmFsW2ldID0gdGhpcy5zYW1wbGVzW3RoaXMucGxheWhlYWRdICogdGhpcy5hbXBsaXR1ZGU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCsrO1xuICB9XG5cbiAgdGhpcy5mcmFtZUNvdW50Kys7XG5cbiAgcmV0dXJuIHRoaXMuc2lnbmFsO1xufTtcblxuU2FtcGxlci5wcm90b3R5cGUuc2V0RnJlcSA9IGZ1bmN0aW9uKGZyZXF1ZW5jeSkge1xuICAgIHZhciB0b3RhbFByb2Nlc3NlZCA9IHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCAqIHRoaXMuc3RlcDtcbiAgICB0aGlzLmZyZXF1ZW5jeSA9IGZyZXF1ZW5jeTtcbiAgICB0aGlzLnN0ZXAgPSB0aGlzLmZyZXF1ZW5jeSAvIHRoaXMucm9vdEZyZXF1ZW5jeTtcbiAgICB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPSBNYXRoLnJvdW5kKHRvdGFsUHJvY2Vzc2VkL3RoaXMuc3RlcCk7XG59O1xuXG5TYW1wbGVyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPSAwO1xuICB0aGlzLnBsYXloZWFkID0gMDtcbn07XG5cbi8qKlxuICogT3NjaWxsYXRvciBjbGFzcyBmb3IgZ2VuZXJhdGluZyBhbmQgbW9kaWZ5aW5nIHNpZ25hbHNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gdHlwZSAgICAgICBBIHdhdmVmb3JtIGNvbnN0YW50IChlZy4gRFNQLlNJTkUpXG4gKiBAcGFyYW0ge051bWJlcn0gZnJlcXVlbmN5ICBJbml0aWFsIGZyZXF1ZW5jeSBvZiB0aGUgc2lnbmFsXG4gKiBAcGFyYW0ge051bWJlcn0gYW1wbGl0dWRlICBJbml0aWFsIGFtcGxpdHVkZSBvZiB0aGUgc2lnbmFsXG4gKiBAcGFyYW0ge051bWJlcn0gYnVmZmVyU2l6ZSBTaXplIG9mIHRoZSBzYW1wbGUgYnVmZmVyIHRvIGdlbmVyYXRlXG4gKiBAcGFyYW0ge051bWJlcn0gc2FtcGxlUmF0ZSBUaGUgc2FtcGxlIHJhdGUgb2YgdGhlIHNpZ25hbFxuICpcbiAqIEBjb250cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE9zY2lsbGF0b3IodHlwZSwgZnJlcXVlbmN5LCBhbXBsaXR1ZGUsIGJ1ZmZlclNpemUsIHNhbXBsZVJhdGUpIHtcbiAgdGhpcy5mcmVxdWVuY3kgID0gZnJlcXVlbmN5O1xuICB0aGlzLmFtcGxpdHVkZSAgPSBhbXBsaXR1ZGU7XG4gIHRoaXMuYnVmZmVyU2l6ZSA9IGJ1ZmZlclNpemU7XG4gIHRoaXMuc2FtcGxlUmF0ZSA9IHNhbXBsZVJhdGU7XG4gIC8vdGhpcy5wdWxzZVdpZHRoID0gcHVsc2VXaWR0aDtcbiAgdGhpcy5mcmFtZUNvdW50ID0gMDtcbiBcbiAgdGhpcy53YXZlVGFibGVMZW5ndGggPSAyMDQ4O1xuXG4gIHRoaXMuY3ljbGVzUGVyU2FtcGxlID0gZnJlcXVlbmN5IC8gc2FtcGxlUmF0ZTtcblxuICB0aGlzLnNpZ25hbCA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyU2l6ZSk7XG4gIHRoaXMuZW52ZWxvcGUgPSBudWxsO1xuXG4gIHN3aXRjaChwYXJzZUludCh0eXBlLCAxMCkpIHtcbiAgICBjYXNlIERTUC5UUklBTkdMRTpcbiAgICAgIHRoaXMuZnVuYyA9IE9zY2lsbGF0b3IuVHJpYW5nbGU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgRFNQLlNBVzpcbiAgICAgIHRoaXMuZnVuYyA9IE9zY2lsbGF0b3IuU2F3O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIERTUC5TUVVBUkU6XG4gICAgICB0aGlzLmZ1bmMgPSBPc2NpbGxhdG9yLlNxdWFyZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICBjYXNlIERTUC5TSU5FOlxuICAgICAgdGhpcy5mdW5jID0gT3NjaWxsYXRvci5TaW5lO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICB0aGlzLmdlbmVyYXRlV2F2ZVRhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgT3NjaWxsYXRvci53YXZlVGFibGVbdGhpcy5mdW5jXSA9IG5ldyBGbG9hdDMyQXJyYXkoMjA0OCk7XG4gICAgdmFyIHdhdmVUYWJsZVRpbWUgPSB0aGlzLndhdmVUYWJsZUxlbmd0aCAvIHRoaXMuc2FtcGxlUmF0ZTtcbiAgICB2YXIgd2F2ZVRhYmxlSHogPSAxIC8gd2F2ZVRhYmxlVGltZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy53YXZlVGFibGVMZW5ndGg7IGkrKykge1xuICAgICAgT3NjaWxsYXRvci53YXZlVGFibGVbdGhpcy5mdW5jXVtpXSA9IHRoaXMuZnVuYyhpICogd2F2ZVRhYmxlSHovdGhpcy5zYW1wbGVSYXRlKTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKCB0eXBlb2YgT3NjaWxsYXRvci53YXZlVGFibGUgPT09ICd1bmRlZmluZWQnICkge1xuICAgIE9zY2lsbGF0b3Iud2F2ZVRhYmxlID0ge307XG4gIH1cblxuICBpZiAoIHR5cGVvZiBPc2NpbGxhdG9yLndhdmVUYWJsZVt0aGlzLmZ1bmNdID09PSAndW5kZWZpbmVkJyApIHtcbiAgICB0aGlzLmdlbmVyYXRlV2F2ZVRhYmxlKCk7XG4gIH1cbiBcbiAgdGhpcy53YXZlVGFibGUgPSBPc2NpbGxhdG9yLndhdmVUYWJsZVt0aGlzLmZ1bmNdO1xufVxuXG4vKipcbiAqIFNldCB0aGUgYW1wbGl0dWRlIG9mIHRoZSBzaWduYWxcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gYW1wbGl0dWRlIFRoZSBhbXBsaXR1ZGUgb2YgdGhlIHNpZ25hbCAoYmV0d2VlbiAwIGFuZCAxKVxuICovXG5Pc2NpbGxhdG9yLnByb3RvdHlwZS5zZXRBbXAgPSBmdW5jdGlvbihhbXBsaXR1ZGUpIHtcbiAgaWYgKGFtcGxpdHVkZSA+PSAwICYmIGFtcGxpdHVkZSA8PSAxKSB7XG4gICAgdGhpcy5hbXBsaXR1ZGUgPSBhbXBsaXR1ZGU7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgXCJBbXBsaXR1ZGUgb3V0IG9mIHJhbmdlICgwLi4xKS5cIjtcbiAgfVxufTtcbiAgXG4vKipcbiAqIFNldCB0aGUgZnJlcXVlbmN5IG9mIHRoZSBzaWduYWxcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gZnJlcXVlbmN5IFRoZSBmcmVxdWVuY3kgb2YgdGhlIHNpZ25hbFxuICovICBcbk9zY2lsbGF0b3IucHJvdG90eXBlLnNldEZyZXEgPSBmdW5jdGlvbihmcmVxdWVuY3kpIHtcbiAgdGhpcy5mcmVxdWVuY3kgPSBmcmVxdWVuY3k7XG4gIHRoaXMuY3ljbGVzUGVyU2FtcGxlID0gZnJlcXVlbmN5IC8gdGhpcy5zYW1wbGVSYXRlO1xufTtcbiAgICAgXG4vLyBBZGQgYW4gb3NjaWxsYXRvclxuT3NjaWxsYXRvci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24ob3NjaWxsYXRvcikge1xuICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLmJ1ZmZlclNpemU7IGkrKyApIHtcbiAgICAvL3RoaXMuc2lnbmFsW2ldICs9IG9zY2lsbGF0b3IudmFsdWVBdChpKTtcbiAgICB0aGlzLnNpZ25hbFtpXSArPSBvc2NpbGxhdG9yLnNpZ25hbFtpXTtcbiAgfVxuIFxuICByZXR1cm4gdGhpcy5zaWduYWw7XG59O1xuICAgICBcbi8vIEFkZCBhIHNpZ25hbCB0byB0aGUgY3VycmVudCBnZW5lcmF0ZWQgb3NjIHNpZ25hbFxuT3NjaWxsYXRvci5wcm90b3R5cGUuYWRkU2lnbmFsID0gZnVuY3Rpb24oc2lnbmFsKSB7XG4gIGZvciAoIHZhciBpID0gMDsgaSA8IHNpZ25hbC5sZW5ndGg7IGkrKyApIHtcbiAgICBpZiAoIGkgPj0gdGhpcy5idWZmZXJTaXplICkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuc2lnbmFsW2ldICs9IHNpZ25hbFtpXTtcbiAgIFxuICAgIC8qXG4gICAgLy8gQ29uc3RyYWluIGFtcGxpdHVkZVxuICAgIGlmICggdGhpcy5zaWduYWxbaV0gPiAxICkge1xuICAgICAgdGhpcy5zaWduYWxbaV0gPSAxO1xuICAgIH0gZWxzZSBpZiAoIHRoaXMuc2lnbmFsW2ldIDwgLTEgKSB7XG4gICAgICB0aGlzLnNpZ25hbFtpXSA9IC0xO1xuICAgIH1cbiAgICAqL1xuICB9XG4gIHJldHVybiB0aGlzLnNpZ25hbDtcbn07XG4gICAgIFxuLy8gQWRkIGFuIGVudmVsb3BlIHRvIHRoZSBvc2NpbGxhdG9yXG5Pc2NpbGxhdG9yLnByb3RvdHlwZS5hZGRFbnZlbG9wZSA9IGZ1bmN0aW9uKGVudmVsb3BlKSB7XG4gIHRoaXMuZW52ZWxvcGUgPSBlbnZlbG9wZTtcbn07XG5cbk9zY2lsbGF0b3IucHJvdG90eXBlLmFwcGx5RW52ZWxvcGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbnZlbG9wZS5wcm9jZXNzKHRoaXMuc2lnbmFsKTtcbn07XG4gICAgIFxuT3NjaWxsYXRvci5wcm90b3R5cGUudmFsdWVBdCA9IGZ1bmN0aW9uKG9mZnNldCkge1xuICByZXR1cm4gdGhpcy53YXZlVGFibGVbb2Zmc2V0ICUgdGhpcy53YXZlVGFibGVMZW5ndGhdO1xufTtcbiAgICAgXG5Pc2NpbGxhdG9yLnByb3RvdHlwZS5nZW5lcmF0ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZnJhbWVPZmZzZXQgPSB0aGlzLmZyYW1lQ291bnQgKiB0aGlzLmJ1ZmZlclNpemU7XG4gIHZhciBzdGVwID0gdGhpcy53YXZlVGFibGVMZW5ndGggKiB0aGlzLmZyZXF1ZW5jeSAvIHRoaXMuc2FtcGxlUmF0ZTtcbiAgdmFyIG9mZnNldDtcblxuICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLmJ1ZmZlclNpemU7IGkrKyApIHtcbiAgICAvL3ZhciBzdGVwID0gKGZyYW1lT2Zmc2V0ICsgaSkgKiB0aGlzLmN5Y2xlc1BlclNhbXBsZSAlIDE7XG4gICAgLy90aGlzLnNpZ25hbFtpXSA9IHRoaXMuZnVuYyhzdGVwKSAqIHRoaXMuYW1wbGl0dWRlO1xuICAgIC8vdGhpcy5zaWduYWxbaV0gPSB0aGlzLnZhbHVlQXQoTWF0aC5yb3VuZCgoZnJhbWVPZmZzZXQgKyBpKSAqIHN0ZXApKSAqIHRoaXMuYW1wbGl0dWRlO1xuICAgIG9mZnNldCA9IE1hdGgucm91bmQoKGZyYW1lT2Zmc2V0ICsgaSkgKiBzdGVwKTtcbiAgICB0aGlzLnNpZ25hbFtpXSA9IHRoaXMud2F2ZVRhYmxlW29mZnNldCAlIHRoaXMud2F2ZVRhYmxlTGVuZ3RoXSAqIHRoaXMuYW1wbGl0dWRlO1xuICB9XG5cbiAgdGhpcy5mcmFtZUNvdW50Kys7XG5cbiAgcmV0dXJuIHRoaXMuc2lnbmFsO1xufTtcblxuT3NjaWxsYXRvci5TaW5lID0gZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gTWF0aC5zaW4oRFNQLlRXT19QSSAqIHN0ZXApO1xufTtcblxuT3NjaWxsYXRvci5TcXVhcmUgPSBmdW5jdGlvbihzdGVwKSB7XG4gIHJldHVybiBzdGVwIDwgMC41ID8gMSA6IC0xO1xufTtcblxuT3NjaWxsYXRvci5TYXcgPSBmdW5jdGlvbihzdGVwKSB7XG4gIHJldHVybiAyICogKHN0ZXAgLSBNYXRoLnJvdW5kKHN0ZXApKTtcbn07XG5cbk9zY2lsbGF0b3IuVHJpYW5nbGUgPSBmdW5jdGlvbihzdGVwKSB7XG4gIHJldHVybiAxIC0gNCAqIE1hdGguYWJzKE1hdGgucm91bmQoc3RlcCkgLSBzdGVwKTtcbn07XG5cbk9zY2lsbGF0b3IuUHVsc2UgPSBmdW5jdGlvbihzdGVwKSB7XG4gIC8vIHN0dWJcbn07XG4gXG5mdW5jdGlvbiBBRFNSKGF0dGFja0xlbmd0aCwgZGVjYXlMZW5ndGgsIHN1c3RhaW5MZXZlbCwgc3VzdGFpbkxlbmd0aCwgcmVsZWFzZUxlbmd0aCwgc2FtcGxlUmF0ZSkge1xuICB0aGlzLnNhbXBsZVJhdGUgPSBzYW1wbGVSYXRlO1xuICAvLyBMZW5ndGggaW4gc2Vjb25kc1xuICB0aGlzLmF0dGFja0xlbmd0aCAgPSBhdHRhY2tMZW5ndGg7XG4gIHRoaXMuZGVjYXlMZW5ndGggICA9IGRlY2F5TGVuZ3RoO1xuICB0aGlzLnN1c3RhaW5MZXZlbCAgPSBzdXN0YWluTGV2ZWw7XG4gIHRoaXMuc3VzdGFpbkxlbmd0aCA9IHN1c3RhaW5MZW5ndGg7XG4gIHRoaXMucmVsZWFzZUxlbmd0aCA9IHJlbGVhc2VMZW5ndGg7XG4gIHRoaXMuc2FtcGxlUmF0ZSAgICA9IHNhbXBsZVJhdGU7XG4gXG4gIC8vIExlbmd0aCBpbiBzYW1wbGVzXG4gIHRoaXMuYXR0YWNrU2FtcGxlcyAgPSBhdHRhY2tMZW5ndGggICogc2FtcGxlUmF0ZTtcbiAgdGhpcy5kZWNheVNhbXBsZXMgICA9IGRlY2F5TGVuZ3RoICAgKiBzYW1wbGVSYXRlO1xuICB0aGlzLnN1c3RhaW5TYW1wbGVzID0gc3VzdGFpbkxlbmd0aCAqIHNhbXBsZVJhdGU7XG4gIHRoaXMucmVsZWFzZVNhbXBsZXMgPSByZWxlYXNlTGVuZ3RoICogc2FtcGxlUmF0ZTtcbiBcbiAgLy8gVXBkYXRlcyB0aGUgZW52ZWxvcGUgc2FtcGxlIHBvc2l0aW9uc1xuICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuYXR0YWNrICAgICAgICAgPSAgICAgICAgICAgICAgICB0aGlzLmF0dGFja1NhbXBsZXM7XG4gICAgdGhpcy5kZWNheSAgICAgICAgICA9IHRoaXMuYXR0YWNrICArIHRoaXMuZGVjYXlTYW1wbGVzO1xuICAgIHRoaXMuc3VzdGFpbiAgICAgICAgPSB0aGlzLmRlY2F5ICAgKyB0aGlzLnN1c3RhaW5TYW1wbGVzO1xuICAgIHRoaXMucmVsZWFzZSAgICAgICAgPSB0aGlzLnN1c3RhaW4gKyB0aGlzLnJlbGVhc2VTYW1wbGVzO1xuICB9O1xuIFxuICB0aGlzLnVwZGF0ZSgpO1xuIFxuICB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPSAwO1xufVxuXG5BRFNSLnByb3RvdHlwZS5ub3RlT24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zYW1wbGVzUHJvY2Vzc2VkID0gMDtcbiAgdGhpcy5zdXN0YWluU2FtcGxlcyA9IHRoaXMuc3VzdGFpbkxlbmd0aCAqIHRoaXMuc2FtcGxlUmF0ZTtcbiAgdGhpcy51cGRhdGUoKTtcbn07XG5cbi8vIFNlbmQgYSBub3RlIG9mZiB3aGVuIHVzaW5nIGEgc3VzdGFpbiBvZiBpbmZpbml0eSB0byBsZXQgdGhlIGVudmVsb3BlIGVudGVyIHRoZSByZWxlYXNlIHBoYXNlXG5BRFNSLnByb3RvdHlwZS5ub3RlT2ZmID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc3VzdGFpblNhbXBsZXMgPSB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgLSB0aGlzLmRlY2F5U2FtcGxlcztcbiAgdGhpcy51cGRhdGUoKTtcbn07XG5cbkFEU1IucHJvdG90eXBlLnByb2Nlc3NTYW1wbGUgPSBmdW5jdGlvbihzYW1wbGUpIHtcbiAgdmFyIGFtcGxpdHVkZSA9IDA7XG5cbiAgaWYgKCB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPD0gdGhpcy5hdHRhY2sgKSB7XG4gICAgYW1wbGl0dWRlID0gMCArICgxIC0gMCkgKiAoKHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCAtIDApIC8gKHRoaXMuYXR0YWNrIC0gMCkpO1xuICB9IGVsc2UgaWYgKCB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPiB0aGlzLmF0dGFjayAmJiB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPD0gdGhpcy5kZWNheSApIHtcbiAgICBhbXBsaXR1ZGUgPSAxICsgKHRoaXMuc3VzdGFpbkxldmVsIC0gMSkgKiAoKHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCAtIHRoaXMuYXR0YWNrKSAvICh0aGlzLmRlY2F5IC0gdGhpcy5hdHRhY2spKTtcbiAgfSBlbHNlIGlmICggdGhpcy5zYW1wbGVzUHJvY2Vzc2VkID4gdGhpcy5kZWNheSAmJiB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPD0gdGhpcy5zdXN0YWluICkge1xuICAgIGFtcGxpdHVkZSA9IHRoaXMuc3VzdGFpbkxldmVsO1xuICB9IGVsc2UgaWYgKCB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPiB0aGlzLnN1c3RhaW4gJiYgdGhpcy5zYW1wbGVzUHJvY2Vzc2VkIDw9IHRoaXMucmVsZWFzZSApIHtcbiAgICBhbXBsaXR1ZGUgPSB0aGlzLnN1c3RhaW5MZXZlbCArICgwIC0gdGhpcy5zdXN0YWluTGV2ZWwpICogKCh0aGlzLnNhbXBsZXNQcm9jZXNzZWQgLSB0aGlzLnN1c3RhaW4pIC8gKHRoaXMucmVsZWFzZSAtIHRoaXMuc3VzdGFpbikpO1xuICB9XG4gXG4gIHJldHVybiBzYW1wbGUgKiBhbXBsaXR1ZGU7XG59O1xuXG5BRFNSLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYW1wbGl0dWRlID0gMDtcblxuICBpZiAoIHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCA8PSB0aGlzLmF0dGFjayApIHtcbiAgICBhbXBsaXR1ZGUgPSAwICsgKDEgLSAwKSAqICgodGhpcy5zYW1wbGVzUHJvY2Vzc2VkIC0gMCkgLyAodGhpcy5hdHRhY2sgLSAwKSk7XG4gIH0gZWxzZSBpZiAoIHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCA+IHRoaXMuYXR0YWNrICYmIHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCA8PSB0aGlzLmRlY2F5ICkge1xuICAgIGFtcGxpdHVkZSA9IDEgKyAodGhpcy5zdXN0YWluTGV2ZWwgLSAxKSAqICgodGhpcy5zYW1wbGVzUHJvY2Vzc2VkIC0gdGhpcy5hdHRhY2spIC8gKHRoaXMuZGVjYXkgLSB0aGlzLmF0dGFjaykpO1xuICB9IGVsc2UgaWYgKCB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPiB0aGlzLmRlY2F5ICYmIHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCA8PSB0aGlzLnN1c3RhaW4gKSB7XG4gICAgYW1wbGl0dWRlID0gdGhpcy5zdXN0YWluTGV2ZWw7XG4gIH0gZWxzZSBpZiAoIHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCA+IHRoaXMuc3VzdGFpbiAmJiB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPD0gdGhpcy5yZWxlYXNlICkge1xuICAgIGFtcGxpdHVkZSA9IHRoaXMuc3VzdGFpbkxldmVsICsgKDAgLSB0aGlzLnN1c3RhaW5MZXZlbCkgKiAoKHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCAtIHRoaXMuc3VzdGFpbikgLyAodGhpcy5yZWxlYXNlIC0gdGhpcy5zdXN0YWluKSk7XG4gIH1cbiBcbiAgcmV0dXJuIGFtcGxpdHVkZTtcbn07XG4gICAgIFxuQURTUi5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBidWZmZXIubGVuZ3RoOyBpKysgKSB7XG4gICAgYnVmZmVyW2ldICo9IHRoaXMudmFsdWUoKTtcblxuICAgIHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCsrO1xuICB9XG4gXG4gIHJldHVybiBidWZmZXI7XG59O1xuICAgICBcbiAgICAgXG5BRFNSLnByb3RvdHlwZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuc2FtcGxlc1Byb2Nlc3NlZCA+IHRoaXMucmVsZWFzZSB8fCB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPT09IC0xICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuQURTUi5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNhbXBsZXNQcm9jZXNzZWQgPSAtMTtcbn07XG4gXG5mdW5jdGlvbiBJSVJGaWx0ZXIodHlwZSwgY3V0b2ZmLCByZXNvbmFuY2UsIHNhbXBsZVJhdGUpIHtcbiAgdGhpcy5zYW1wbGVSYXRlID0gc2FtcGxlUmF0ZTtcblxuICBzd2l0Y2godHlwZSkge1xuICAgIGNhc2UgRFNQLkxPV1BBU1M6XG4gICAgY2FzZSBEU1AuTFAxMjpcbiAgICAgIHRoaXMuZnVuYyA9IG5ldyBJSVJGaWx0ZXIuTFAxMihjdXRvZmYsIHJlc29uYW5jZSwgc2FtcGxlUmF0ZSk7XG4gICAgICBicmVhaztcbiAgfVxufVxuXG5JSVJGaWx0ZXIucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oJ2N1dG9mZicsXG4gIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmZ1bmMuY3V0b2ZmO1xuICB9XG4pO1xuXG5JSVJGaWx0ZXIucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oJ3Jlc29uYW5jZScsXG4gIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmZ1bmMucmVzb25hbmNlO1xuICB9XG4pO1xuXG5JSVJGaWx0ZXIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGN1dG9mZiwgcmVzb25hbmNlKSB7XG4gIHRoaXMuZnVuYy5jYWxjQ29lZmYoY3V0b2ZmLCByZXNvbmFuY2UpO1xufTtcblxuSUlSRmlsdGVyLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIHRoaXMuZnVuYy5wcm9jZXNzKGJ1ZmZlcik7XG59O1xuXG4vLyBBZGQgYW4gZW52ZWxvcGUgdG8gdGhlIGZpbHRlclxuSUlSRmlsdGVyLnByb3RvdHlwZS5hZGRFbnZlbG9wZSA9IGZ1bmN0aW9uKGVudmVsb3BlKSB7XG4gIGlmICggZW52ZWxvcGUgaW5zdGFuY2VvZiBBRFNSICkge1xuICAgIHRoaXMuZnVuYy5hZGRFbnZlbG9wZShlbnZlbG9wZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgXCJOb3QgYW4gZW52ZWxvcGUuXCI7XG4gIH1cbn07XG5cbklJUkZpbHRlci5MUDEyID0gZnVuY3Rpb24oY3V0b2ZmLCByZXNvbmFuY2UsIHNhbXBsZVJhdGUpIHtcbiAgdGhpcy5zYW1wbGVSYXRlID0gc2FtcGxlUmF0ZTtcbiAgdGhpcy52aWJyYVBvcyAgID0gMDtcbiAgdGhpcy52aWJyYVNwZWVkID0gMDtcbiAgdGhpcy5lbnZlbG9wZSA9IGZhbHNlO1xuIFxuICB0aGlzLmNhbGNDb2VmZiA9IGZ1bmN0aW9uKGN1dG9mZiwgcmVzb25hbmNlKSB7XG4gICAgdGhpcy53ID0gMi4wICogTWF0aC5QSSAqIGN1dG9mZiAvIHRoaXMuc2FtcGxlUmF0ZTtcbiAgICB0aGlzLnEgPSAxLjAgLSB0aGlzLncgLyAoMi4wICogKHJlc29uYW5jZSArIDAuNSAvICgxLjAgKyB0aGlzLncpKSArIHRoaXMudyAtIDIuMCk7XG4gICAgdGhpcy5yID0gdGhpcy5xICogdGhpcy5xO1xuICAgIHRoaXMuYyA9IHRoaXMuciArIDEuMCAtIDIuMCAqIE1hdGguY29zKHRoaXMudykgKiB0aGlzLnE7XG4gICBcbiAgICB0aGlzLmN1dG9mZiA9IGN1dG9mZjtcbiAgICB0aGlzLnJlc29uYW5jZSA9IHJlc29uYW5jZTtcbiAgfTtcblxuICB0aGlzLmNhbGNDb2VmZihjdXRvZmYsIHJlc29uYW5jZSk7XG5cbiAgdGhpcy5wcm9jZXNzID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgZm9yICggdmFyIGkgPSAwOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSsrICkge1xuICAgICAgdGhpcy52aWJyYVNwZWVkICs9IChidWZmZXJbaV0gLSB0aGlzLnZpYnJhUG9zKSAqIHRoaXMuYztcbiAgICAgIHRoaXMudmlicmFQb3MgICArPSB0aGlzLnZpYnJhU3BlZWQ7XG4gICAgICB0aGlzLnZpYnJhU3BlZWQgKj0gdGhpcy5yO1xuICAgXG4gICAgICAvKlxuICAgICAgdmFyIHRlbXAgPSB0aGlzLnZpYnJhUG9zO1xuICAgICBcbiAgICAgIGlmICggdGVtcCA+IDEuMCApIHtcbiAgICAgICAgdGVtcCA9IDEuMDtcbiAgICAgIH0gZWxzZSBpZiAoIHRlbXAgPCAtMS4wICkge1xuICAgICAgICB0ZW1wID0gLTEuMDtcbiAgICAgIH0gZWxzZSBpZiAoIHRlbXAgIT0gdGVtcCApIHtcbiAgICAgICAgdGVtcCA9IDE7XG4gICAgICB9XG4gICAgIFxuICAgICAgYnVmZmVyW2ldID0gdGVtcDtcbiAgICAgICovXG5cbiAgICAgIGlmICh0aGlzLmVudmVsb3BlKSB7XG4gICAgICAgIGJ1ZmZlcltpXSA9IChidWZmZXJbaV0gKiAoMSAtIHRoaXMuZW52ZWxvcGUudmFsdWUoKSkpICsgKHRoaXMudmlicmFQb3MgKiB0aGlzLmVudmVsb3BlLnZhbHVlKCkpO1xuICAgICAgICB0aGlzLmVudmVsb3BlLnNhbXBsZXNQcm9jZXNzZWQrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1ZmZlcltpXSA9IHRoaXMudmlicmFQb3M7XG4gICAgICB9XG4gICAgfVxuICB9O1xufTsgXG5cbklJUkZpbHRlci5MUDEyLnByb3RvdHlwZS5hZGRFbnZlbG9wZSA9IGZ1bmN0aW9uKGVudmVsb3BlKSB7XG4gIHRoaXMuZW52ZWxvcGUgPSBlbnZlbG9wZTtcbn07XG5cbmZ1bmN0aW9uIElJUkZpbHRlcjIodHlwZSwgY3V0b2ZmLCByZXNvbmFuY2UsIHNhbXBsZVJhdGUpIHtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5jdXRvZmYgPSBjdXRvZmY7XG4gIHRoaXMucmVzb25hbmNlID0gcmVzb25hbmNlO1xuICB0aGlzLnNhbXBsZVJhdGUgPSBzYW1wbGVSYXRlO1xuXG4gIHRoaXMuZiA9IEZsb2F0MzJBcnJheSg0KTtcbiAgdGhpcy5mWzBdID0gMC4wOyAvLyBscFxuICB0aGlzLmZbMV0gPSAwLjA7IC8vIGhwXG4gIHRoaXMuZlsyXSA9IDAuMDsgLy8gYnBcbiAgdGhpcy5mWzNdID0gMC4wOyAvLyBiciBcbiBcbiAgdGhpcy5jYWxjQ29lZmYgPSBmdW5jdGlvbihjdXRvZmYsIHJlc29uYW5jZSkge1xuICAgIHRoaXMuZnJlcSA9IDIgKiBNYXRoLnNpbihNYXRoLlBJICogTWF0aC5taW4oMC4yNSwgY3V0b2ZmLyh0aGlzLnNhbXBsZVJhdGUqMikpKTsgIFxuICAgIHRoaXMuZGFtcCA9IE1hdGgubWluKDIgKiAoMSAtIE1hdGgucG93KHJlc29uYW5jZSwgMC4yNSkpLCBNYXRoLm1pbigyLCAyL3RoaXMuZnJlcSAtIHRoaXMuZnJlcSAqIDAuNSkpO1xuICB9O1xuXG4gIHRoaXMuY2FsY0NvZWZmKGN1dG9mZiwgcmVzb25hbmNlKTtcbn1cblxuSUlSRmlsdGVyMi5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICB2YXIgaW5wdXQsIG91dHB1dDtcbiAgdmFyIGYgPSB0aGlzLmY7XG5cbiAgZm9yICggdmFyIGkgPSAwOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSsrICkge1xuICAgIGlucHV0ID0gYnVmZmVyW2ldO1xuXG4gICAgLy8gZmlyc3QgcGFzc1xuICAgIGZbM10gPSBpbnB1dCAtIHRoaXMuZGFtcCAqIGZbMl07XG4gICAgZlswXSA9IGZbMF0gKyB0aGlzLmZyZXEgKiBmWzJdO1xuICAgIGZbMV0gPSBmWzNdIC0gZlswXTtcbiAgICBmWzJdID0gdGhpcy5mcmVxICogZlsxXSArIGZbMl07XG4gICAgb3V0cHV0ID0gMC41ICogZlt0aGlzLnR5cGVdO1xuXG4gICAgLy8gc2Vjb25kIHBhc3NcbiAgICBmWzNdID0gaW5wdXQgLSB0aGlzLmRhbXAgKiBmWzJdO1xuICAgIGZbMF0gPSBmWzBdICsgdGhpcy5mcmVxICogZlsyXTtcbiAgICBmWzFdID0gZlszXSAtIGZbMF07XG4gICAgZlsyXSA9IHRoaXMuZnJlcSAqIGZbMV0gKyBmWzJdO1xuICAgIG91dHB1dCArPSAwLjUgKiBmW3RoaXMudHlwZV07XG5cbiAgICBpZiAodGhpcy5lbnZlbG9wZSkge1xuICAgICAgYnVmZmVyW2ldID0gKGJ1ZmZlcltpXSAqICgxIC0gdGhpcy5lbnZlbG9wZS52YWx1ZSgpKSkgKyAob3V0cHV0ICogdGhpcy5lbnZlbG9wZS52YWx1ZSgpKTtcbiAgICAgIHRoaXMuZW52ZWxvcGUuc2FtcGxlc1Byb2Nlc3NlZCsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXJbaV0gPSBvdXRwdXQ7XG4gICAgfVxuICB9XG59O1xuXG5JSVJGaWx0ZXIyLnByb3RvdHlwZS5hZGRFbnZlbG9wZSA9IGZ1bmN0aW9uKGVudmVsb3BlKSB7XG4gIGlmICggZW52ZWxvcGUgaW5zdGFuY2VvZiBBRFNSICkge1xuICAgIHRoaXMuZW52ZWxvcGUgPSBlbnZlbG9wZTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBcIlRoaXMgaXMgbm90IGFuIGVudmVsb3BlLlwiO1xuICB9XG59O1xuXG5JSVJGaWx0ZXIyLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihjdXRvZmYsIHJlc29uYW5jZSkge1xuICB0aGlzLmNhbGNDb2VmZihjdXRvZmYsIHJlc29uYW5jZSk7XG59O1xuXG5cblxuZnVuY3Rpb24gV2luZG93RnVuY3Rpb24odHlwZSwgYWxwaGEpIHtcbiAgdGhpcy5hbHBoYSA9IGFscGhhO1xuIFxuICBzd2l0Y2godHlwZSkge1xuICAgIGNhc2UgRFNQLkJBUlRMRVRUOlxuICAgICAgdGhpcy5mdW5jID0gV2luZG93RnVuY3Rpb24uQmFydGxldHQ7XG4gICAgICBicmVhaztcbiAgICAgXG4gICAgY2FzZSBEU1AuQkFSVExFVFRIQU5OOlxuICAgICAgdGhpcy5mdW5jID0gV2luZG93RnVuY3Rpb24uQmFydGxldHRIYW5uO1xuICAgICAgYnJlYWs7XG4gICAgIFxuICAgIGNhc2UgRFNQLkJMQUNLTUFOOlxuICAgICAgdGhpcy5mdW5jID0gV2luZG93RnVuY3Rpb24uQmxhY2ttYW47XG4gICAgICB0aGlzLmFscGhhID0gdGhpcy5hbHBoYSB8fCAwLjE2O1xuICAgICAgYnJlYWs7XG4gICBcbiAgICBjYXNlIERTUC5DT1NJTkU6XG4gICAgICB0aGlzLmZ1bmMgPSBXaW5kb3dGdW5jdGlvbi5Db3NpbmU7XG4gICAgICBicmVhaztcbiAgICAgXG4gICAgY2FzZSBEU1AuR0FVU1M6XG4gICAgICB0aGlzLmZ1bmMgPSBXaW5kb3dGdW5jdGlvbi5HYXVzcztcbiAgICAgIHRoaXMuYWxwaGEgPSB0aGlzLmFscGhhIHx8IDAuMjU7XG4gICAgICBicmVhaztcbiAgICAgXG4gICAgY2FzZSBEU1AuSEFNTUlORzpcbiAgICAgIHRoaXMuZnVuYyA9IFdpbmRvd0Z1bmN0aW9uLkhhbW1pbmc7XG4gICAgICBicmVhaztcbiAgICAgXG4gICAgY2FzZSBEU1AuSEFOTjpcbiAgICAgIHRoaXMuZnVuYyA9IFdpbmRvd0Z1bmN0aW9uLkhhbm47XG4gICAgICBicmVhaztcbiAgIFxuICAgIGNhc2UgRFNQLkxBTkNaT1M6XG4gICAgICB0aGlzLmZ1bmMgPSBXaW5kb3dGdW5jdGlvbi5MYW5jem96O1xuICAgICAgYnJlYWs7XG4gICAgIFxuICAgIGNhc2UgRFNQLlJFQ1RBTkdVTEFSOlxuICAgICAgdGhpcy5mdW5jID0gV2luZG93RnVuY3Rpb24uUmVjdGFuZ3VsYXI7XG4gICAgICBicmVhaztcbiAgICAgXG4gICAgY2FzZSBEU1AuVFJJQU5HVUxBUjpcbiAgICAgIHRoaXMuZnVuYyA9IFdpbmRvd0Z1bmN0aW9uLlRyaWFuZ3VsYXI7XG4gICAgICBicmVhaztcbiAgfVxufVxuXG5XaW5kb3dGdW5jdGlvbi5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aDtcbiAgZm9yICggdmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG4gICAgYnVmZmVyW2ldICo9IHRoaXMuZnVuYyhsZW5ndGgsIGksIHRoaXMuYWxwaGEpO1xuICB9XG4gIHJldHVybiBidWZmZXI7XG59O1xuXG5XaW5kb3dGdW5jdGlvbi5CYXJ0bGV0dCA9IGZ1bmN0aW9uKGxlbmd0aCwgaW5kZXgpIHtcbiAgcmV0dXJuIDIgLyAobGVuZ3RoIC0gMSkgKiAoKGxlbmd0aCAtIDEpIC8gMiAtIE1hdGguYWJzKGluZGV4IC0gKGxlbmd0aCAtIDEpIC8gMikpO1xufTtcblxuV2luZG93RnVuY3Rpb24uQmFydGxldHRIYW5uID0gZnVuY3Rpb24obGVuZ3RoLCBpbmRleCkge1xuICByZXR1cm4gMC42MiAtIDAuNDggKiBNYXRoLmFicyhpbmRleCAvIChsZW5ndGggLSAxKSAtIDAuNSkgLSAwLjM4ICogTWF0aC5jb3MoRFNQLlRXT19QSSAqIGluZGV4IC8gKGxlbmd0aCAtIDEpKTtcbn07XG5cbldpbmRvd0Z1bmN0aW9uLkJsYWNrbWFuID0gZnVuY3Rpb24obGVuZ3RoLCBpbmRleCwgYWxwaGEpIHtcbiAgdmFyIGEwID0gKDEgLSBhbHBoYSkgLyAyO1xuICB2YXIgYTEgPSAwLjU7XG4gIHZhciBhMiA9IGFscGhhIC8gMjtcblxuICByZXR1cm4gYTAgLSBhMSAqIE1hdGguY29zKERTUC5UV09fUEkgKiBpbmRleCAvIChsZW5ndGggLSAxKSkgKyBhMiAqIE1hdGguY29zKDQgKiBNYXRoLlBJICogaW5kZXggLyAobGVuZ3RoIC0gMSkpO1xufTtcblxuV2luZG93RnVuY3Rpb24uQ29zaW5lID0gZnVuY3Rpb24obGVuZ3RoLCBpbmRleCkge1xuICByZXR1cm4gTWF0aC5jb3MoTWF0aC5QSSAqIGluZGV4IC8gKGxlbmd0aCAtIDEpIC0gTWF0aC5QSSAvIDIpO1xufTtcblxuV2luZG93RnVuY3Rpb24uR2F1c3MgPSBmdW5jdGlvbihsZW5ndGgsIGluZGV4LCBhbHBoYSkge1xuICByZXR1cm4gTWF0aC5wb3coTWF0aC5FLCAtMC41ICogTWF0aC5wb3coKGluZGV4IC0gKGxlbmd0aCAtIDEpIC8gMikgLyAoYWxwaGEgKiAobGVuZ3RoIC0gMSkgLyAyKSwgMikpO1xufTtcblxuV2luZG93RnVuY3Rpb24uSGFtbWluZyA9IGZ1bmN0aW9uKGxlbmd0aCwgaW5kZXgpIHtcbiAgcmV0dXJuIDAuNTQgLSAwLjQ2ICogTWF0aC5jb3MoRFNQLlRXT19QSSAqIGluZGV4IC8gKGxlbmd0aCAtIDEpKTtcbn07XG5cbldpbmRvd0Z1bmN0aW9uLkhhbm4gPSBmdW5jdGlvbihsZW5ndGgsIGluZGV4KSB7XG4gIHJldHVybiAwLjUgKiAoMSAtIE1hdGguY29zKERTUC5UV09fUEkgKiBpbmRleCAvIChsZW5ndGggLSAxKSkpO1xufTtcblxuV2luZG93RnVuY3Rpb24uTGFuY3pvcyA9IGZ1bmN0aW9uKGxlbmd0aCwgaW5kZXgpIHtcbiAgdmFyIHggPSAyICogaW5kZXggLyAobGVuZ3RoIC0gMSkgLSAxO1xuICByZXR1cm4gTWF0aC5zaW4oTWF0aC5QSSAqIHgpIC8gKE1hdGguUEkgKiB4KTtcbn07XG5cbldpbmRvd0Z1bmN0aW9uLlJlY3Rhbmd1bGFyID0gZnVuY3Rpb24obGVuZ3RoLCBpbmRleCkge1xuICByZXR1cm4gMTtcbn07XG5cbldpbmRvd0Z1bmN0aW9uLlRyaWFuZ3VsYXIgPSBmdW5jdGlvbihsZW5ndGgsIGluZGV4KSB7XG4gIHJldHVybiAyIC8gbGVuZ3RoICogKGxlbmd0aCAvIDIgLSBNYXRoLmFicyhpbmRleCAtIChsZW5ndGggLSAxKSAvIDIpKTtcbn07XG5cbmZ1bmN0aW9uIHNpbmggKGFyZykge1xuICAvLyBSZXR1cm5zIHRoZSBoeXBlcmJvbGljIHNpbmUgb2YgdGhlIG51bWJlciwgZGVmaW5lZCBhcyAoZXhwKG51bWJlcikgLSBleHAoLW51bWJlcikpLzIgXG4gIC8vXG4gIC8vIHZlcnNpb246IDEwMDQuMjMxNFxuICAvLyBkaXNjdXNzIGF0OiBodHRwOi8vcGhwanMub3JnL2Z1bmN0aW9ucy9zaW5oICAgIC8vICsgICBvcmlnaW5hbCBieTogT25ubyBNYXJzbWFuXG4gIC8vICogICAgIGV4YW1wbGUgMTogc2luaCgtMC45ODM0MzMwMzQ4ODI1OTA5KTtcbiAgLy8gKiAgICAgcmV0dXJucyAxOiAtMS4xNDk3OTcxNDAyNjM2NTAyXG4gIHJldHVybiAoTWF0aC5leHAoYXJnKSAtIE1hdGguZXhwKC1hcmcpKS8yO1xufVxuXG4vKiBcbiAqICBCaXF1YWQgZmlsdGVyXG4gKiBcbiAqICBDcmVhdGVkIGJ5IFJpY2FyZCBNYXJ4ZXIgPGVtYWlsQHJpY2FyZG1hcnhlci5jb20+IG9uIDIwMTAtMDUtMjMuXG4gKiAgQ29weXJpZ2h0IDIwMTAgUmljYXJkIE1hcnhlci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKi9cbi8vIEltcGxlbWVudGF0aW9uIGJhc2VkIG9uOlxuLy8gaHR0cDovL3d3dy5tdXNpY2RzcC5vcmcvZmlsZXMvQXVkaW8tRVEtQ29va2Jvb2sudHh0XG5mdW5jdGlvbiBCaXF1YWQodHlwZSwgc2FtcGxlUmF0ZSkge1xuICB0aGlzLkZzID0gc2FtcGxlUmF0ZTtcbiAgdGhpcy50eXBlID0gdHlwZTsgIC8vIHR5cGUgb2YgdGhlIGZpbHRlclxuICB0aGlzLnBhcmFtZXRlclR5cGUgPSBEU1AuUTsgLy8gdHlwZSBvZiB0aGUgcGFyYW1ldGVyXG5cbiAgdGhpcy54XzFfbCA9IDA7XG4gIHRoaXMueF8yX2wgPSAwO1xuICB0aGlzLnlfMV9sID0gMDtcbiAgdGhpcy55XzJfbCA9IDA7XG5cbiAgdGhpcy54XzFfciA9IDA7XG4gIHRoaXMueF8yX3IgPSAwO1xuICB0aGlzLnlfMV9yID0gMDtcbiAgdGhpcy55XzJfciA9IDA7XG5cbiAgdGhpcy5iMCA9IDE7XG4gIHRoaXMuYTAgPSAxO1xuXG4gIHRoaXMuYjEgPSAwO1xuICB0aGlzLmExID0gMDtcblxuICB0aGlzLmIyID0gMDtcbiAgdGhpcy5hMiA9IDA7XG5cbiAgdGhpcy5iMGEwID0gdGhpcy5iMCAvIHRoaXMuYTA7XG4gIHRoaXMuYjFhMCA9IHRoaXMuYjEgLyB0aGlzLmEwO1xuICB0aGlzLmIyYTAgPSB0aGlzLmIyIC8gdGhpcy5hMDtcbiAgdGhpcy5hMWEwID0gdGhpcy5hMSAvIHRoaXMuYTA7XG4gIHRoaXMuYTJhMCA9IHRoaXMuYTIgLyB0aGlzLmEwO1xuXG4gIHRoaXMuZjAgPSAzMDAwOyAgIC8vIFwid2hlcmV2ZXIgaXQncyBoYXBwZW5pbicsIG1hbi5cIiAgQ2VudGVyIEZyZXF1ZW5jeSBvclxuICAgICAgICAgICAgICAgICAgICAvLyBDb3JuZXIgRnJlcXVlbmN5LCBvciBzaGVsZiBtaWRwb2ludCBmcmVxdWVuY3ksIGRlcGVuZGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBvbiB3aGljaCBmaWx0ZXIgdHlwZS4gIFRoZSBcInNpZ25pZmljYW50IGZyZXF1ZW5jeVwiLlxuXG4gIHRoaXMuZEJnYWluID0gMTI7IC8vIHVzZWQgb25seSBmb3IgcGVha2luZyBhbmQgc2hlbHZpbmcgZmlsdGVyc1xuXG4gIHRoaXMuUSA9IDE7ICAgICAgIC8vIHRoZSBFRSBraW5kIG9mIGRlZmluaXRpb24sIGV4Y2VwdCBmb3IgcGVha2luZ0VRIGluIHdoaWNoIEEqUSBpc1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgY2xhc3NpYyBFRSBRLiAgVGhhdCBhZGp1c3RtZW50IGluIGRlZmluaXRpb24gd2FzIG1hZGUgc28gdGhhdFxuICAgICAgICAgICAgICAgICAgICAvLyBhIGJvb3N0IG9mIE4gZEIgZm9sbG93ZWQgYnkgYSBjdXQgb2YgTiBkQiBmb3IgaWRlbnRpY2FsIFEgYW5kXG4gICAgICAgICAgICAgICAgICAgIC8vIGYwL0ZzIHJlc3VsdHMgaW4gYSBwcmVjaXNlbHkgZmxhdCB1bml0eSBnYWluIGZpbHRlciBvciBcIndpcmVcIi5cblxuICB0aGlzLkJXID0gLTM7ICAgICAvLyB0aGUgYmFuZHdpZHRoIGluIG9jdGF2ZXMgKGJldHdlZW4gLTMgZEIgZnJlcXVlbmNpZXMgZm9yIEJQRlxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgbm90Y2ggb3IgYmV0d2VlbiBtaWRwb2ludCAoZEJnYWluLzIpIGdhaW4gZnJlcXVlbmNpZXMgZm9yXG4gICAgICAgICAgICAgICAgICAgIC8vIHBlYWtpbmcgRVFcblxuICB0aGlzLlMgPSAxOyAgICAgICAvLyBhIFwic2hlbGYgc2xvcGVcIiBwYXJhbWV0ZXIgKGZvciBzaGVsdmluZyBFUSBvbmx5KS4gIFdoZW4gUyA9IDEsXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzaGVsZiBzbG9wZSBpcyBhcyBzdGVlcCBhcyBpdCBjYW4gYmUgYW5kIHJlbWFpbiBtb25vdG9uaWNhbGx5XG4gICAgICAgICAgICAgICAgICAgIC8vIGluY3JlYXNpbmcgb3IgZGVjcmVhc2luZyBnYWluIHdpdGggZnJlcXVlbmN5LiAgVGhlIHNoZWxmIHNsb3BlLCBpblxuICAgICAgICAgICAgICAgICAgICAvLyBkQi9vY3RhdmUsIHJlbWFpbnMgcHJvcG9ydGlvbmFsIHRvIFMgZm9yIGFsbCBvdGhlciB2YWx1ZXMgZm9yIGFcbiAgICAgICAgICAgICAgICAgICAgLy8gZml4ZWQgZjAvRnMgYW5kIGRCZ2Fpbi5cblxuICB0aGlzLmNvZWZmaWNpZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBiID0gW3RoaXMuYjAsIHRoaXMuYjEsIHRoaXMuYjJdO1xuICAgIHZhciBhID0gW3RoaXMuYTAsIHRoaXMuYTEsIHRoaXMuYTJdO1xuICAgIHJldHVybiB7YjogYiwgYTphfTtcbiAgfTtcblxuICB0aGlzLnNldEZpbHRlclR5cGUgPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnJlY2FsY3VsYXRlQ29lZmZpY2llbnRzKCk7XG4gIH07XG5cbiAgdGhpcy5zZXRTYW1wbGVSYXRlID0gZnVuY3Rpb24ocmF0ZSkge1xuICAgIHRoaXMuRnMgPSByYXRlO1xuICAgIHRoaXMucmVjYWxjdWxhdGVDb2VmZmljaWVudHMoKTtcbiAgfTtcblxuICB0aGlzLnNldFEgPSBmdW5jdGlvbihxKSB7XG4gICAgdGhpcy5wYXJhbWV0ZXJUeXBlID0gRFNQLlE7XG4gICAgdGhpcy5RID0gTWF0aC5tYXgoTWF0aC5taW4ocSwgMTE1LjApLCAwLjAwMSk7XG4gICAgdGhpcy5yZWNhbGN1bGF0ZUNvZWZmaWNpZW50cygpO1xuICB9O1xuXG4gIHRoaXMuc2V0QlcgPSBmdW5jdGlvbihidykge1xuICAgIHRoaXMucGFyYW1ldGVyVHlwZSA9IERTUC5CVztcbiAgICB0aGlzLkJXID0gYnc7XG4gICAgdGhpcy5yZWNhbGN1bGF0ZUNvZWZmaWNpZW50cygpO1xuICB9O1xuXG4gIHRoaXMuc2V0UyA9IGZ1bmN0aW9uKHMpIHtcbiAgICB0aGlzLnBhcmFtZXRlclR5cGUgPSBEU1AuUztcbiAgICB0aGlzLlMgPSBNYXRoLm1heChNYXRoLm1pbihzLCA1LjApLCAwLjAwMDEpO1xuICAgIHRoaXMucmVjYWxjdWxhdGVDb2VmZmljaWVudHMoKTtcbiAgfTtcblxuICB0aGlzLnNldEYwID0gZnVuY3Rpb24oZnJlcSkge1xuICAgIHRoaXMuZjAgPSBmcmVxO1xuICAgIHRoaXMucmVjYWxjdWxhdGVDb2VmZmljaWVudHMoKTtcbiAgfTsgXG4gXG4gIHRoaXMuc2V0RGJHYWluID0gZnVuY3Rpb24oZykge1xuICAgIHRoaXMuZEJnYWluID0gZztcbiAgICB0aGlzLnJlY2FsY3VsYXRlQ29lZmZpY2llbnRzKCk7XG4gIH07XG5cbiAgdGhpcy5yZWNhbGN1bGF0ZUNvZWZmaWNpZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBBO1xuICAgIGlmICh0eXBlID09PSBEU1AuUEVBS0lOR19FUSB8fCB0eXBlID09PSBEU1AuTE9XX1NIRUxGIHx8IHR5cGUgPT09IERTUC5ISUdIX1NIRUxGICkge1xuICAgICAgQSA9IE1hdGgucG93KDEwLCAodGhpcy5kQmdhaW4vNDApKTsgIC8vIGZvciBwZWFraW5nIGFuZCBzaGVsdmluZyBFUSBmaWx0ZXJzIG9ubHlcbiAgICB9IGVsc2Uge1xuICAgICAgQSAgPSBNYXRoLnNxcnQoIE1hdGgucG93KDEwLCAodGhpcy5kQmdhaW4vMjApKSApOyAgIFxuICAgIH1cblxuICAgIHZhciB3MCA9IERTUC5UV09fUEkgKiB0aGlzLmYwIC8gdGhpcy5GcztcblxuICAgIHZhciBjb3N3MCA9IE1hdGguY29zKHcwKTtcbiAgICB2YXIgc2ludzAgPSBNYXRoLnNpbih3MCk7XG5cbiAgICB2YXIgYWxwaGEgPSAwO1xuICAgXG4gICAgc3dpdGNoICh0aGlzLnBhcmFtZXRlclR5cGUpIHtcbiAgICAgIGNhc2UgRFNQLlE6XG4gICAgICAgIGFscGhhID0gc2ludzAvKDIqdGhpcy5RKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAgICAgIFxuICAgICAgY2FzZSBEU1AuQlc6XG4gICAgICAgIGFscGhhID0gc2ludzAgKiBzaW5oKCBNYXRoLkxOMi8yICogdGhpcy5CVyAqIHcwL3NpbncwICk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIERTUC5TOlxuICAgICAgICBhbHBoYSA9IHNpbncwLzIgKiBNYXRoLnNxcnQoIChBICsgMS9BKSooMS90aGlzLlMgLSAxKSArIDIgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICAgIEZZSTogVGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIGJhbmR3aWR0aCBhbmQgUSBpc1xuICAgICAgICAgICAgIDEvUSA9IDIqc2luaChsbigyKS8yKkJXKncwL3Npbih3MCkpICAgICAoZGlnaXRhbCBmaWx0ZXIgdyBCTFQpXG4gICAgICAgIG9yICAgMS9RID0gMipzaW5oKGxuKDIpLzIqQlcpICAgICAgICAgICAgIChhbmFsb2cgZmlsdGVyIHByb3RvdHlwZSlcblxuICAgICAgICBUaGUgcmVsYXRpb25zaGlwIGJldHdlZW4gc2hlbGYgc2xvcGUgYW5kIFEgaXNcbiAgICAgICAgICAgICAxL1EgPSBzcXJ0KChBICsgMS9BKSooMS9TIC0gMSkgKyAyKVxuICAgICovXG5cbiAgICB2YXIgY29lZmY7XG5cbiAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgY2FzZSBEU1AuTFBGOiAgICAgICAvLyBIKHMpID0gMSAvIChzXjIgKyBzL1EgKyAxKVxuICAgICAgICB0aGlzLmIwID0gICgxIC0gY29zdzApLzI7XG4gICAgICAgIHRoaXMuYjEgPSAgIDEgLSBjb3N3MDtcbiAgICAgICAgdGhpcy5iMiA9ICAoMSAtIGNvc3cwKS8yO1xuICAgICAgICB0aGlzLmEwID0gICAxICsgYWxwaGE7XG4gICAgICAgIHRoaXMuYTEgPSAgLTIgKiBjb3N3MDtcbiAgICAgICAgdGhpcy5hMiA9ICAgMSAtIGFscGhhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBEU1AuSFBGOiAgICAgICAvLyBIKHMpID0gc14yIC8gKHNeMiArIHMvUSArIDEpXG4gICAgICAgIHRoaXMuYjAgPSAgKDEgKyBjb3N3MCkvMjtcbiAgICAgICAgdGhpcy5iMSA9IC0oMSArIGNvc3cwKTtcbiAgICAgICAgdGhpcy5iMiA9ICAoMSArIGNvc3cwKS8yO1xuICAgICAgICB0aGlzLmEwID0gICAxICsgYWxwaGE7XG4gICAgICAgIHRoaXMuYTEgPSAgLTIgKiBjb3N3MDtcbiAgICAgICAgdGhpcy5hMiA9ICAgMSAtIGFscGhhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBEU1AuQlBGX0NPTlNUQU5UX1NLSVJUOiAgICAgICAvLyBIKHMpID0gcyAvIChzXjIgKyBzL1EgKyAxKSAgKGNvbnN0YW50IHNraXJ0IGdhaW4sIHBlYWsgZ2FpbiA9IFEpXG4gICAgICAgIHRoaXMuYjAgPSAgIHNpbncwLzI7XG4gICAgICAgIHRoaXMuYjEgPSAgIDA7XG4gICAgICAgIHRoaXMuYjIgPSAgLXNpbncwLzI7XG4gICAgICAgIHRoaXMuYTAgPSAgIDEgKyBhbHBoYTtcbiAgICAgICAgdGhpcy5hMSA9ICAtMipjb3N3MDtcbiAgICAgICAgdGhpcy5hMiA9ICAgMSAtIGFscGhhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBEU1AuQlBGX0NPTlNUQU5UX1BFQUs6ICAgICAgIC8vIEgocykgPSAocy9RKSAvIChzXjIgKyBzL1EgKyAxKSAgICAgIChjb25zdGFudCAwIGRCIHBlYWsgZ2FpbilcbiAgICAgICAgdGhpcy5iMCA9ICAgYWxwaGE7XG4gICAgICAgIHRoaXMuYjEgPSAgIDA7XG4gICAgICAgIHRoaXMuYjIgPSAgLWFscGhhO1xuICAgICAgICB0aGlzLmEwID0gICAxICsgYWxwaGE7XG4gICAgICAgIHRoaXMuYTEgPSAgLTIqY29zdzA7XG4gICAgICAgIHRoaXMuYTIgPSAgIDEgLSBhbHBoYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgRFNQLk5PVENIOiAgICAgLy8gSChzKSA9IChzXjIgKyAxKSAvIChzXjIgKyBzL1EgKyAxKVxuICAgICAgICB0aGlzLmIwID0gICAxO1xuICAgICAgICB0aGlzLmIxID0gIC0yKmNvc3cwO1xuICAgICAgICB0aGlzLmIyID0gICAxO1xuICAgICAgICB0aGlzLmEwID0gICAxICsgYWxwaGE7XG4gICAgICAgIHRoaXMuYTEgPSAgLTIqY29zdzA7XG4gICAgICAgIHRoaXMuYTIgPSAgIDEgLSBhbHBoYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgRFNQLkFQRjogICAgICAgLy8gSChzKSA9IChzXjIgLSBzL1EgKyAxKSAvIChzXjIgKyBzL1EgKyAxKVxuICAgICAgICB0aGlzLmIwID0gICAxIC0gYWxwaGE7XG4gICAgICAgIHRoaXMuYjEgPSAgLTIqY29zdzA7XG4gICAgICAgIHRoaXMuYjIgPSAgIDEgKyBhbHBoYTtcbiAgICAgICAgdGhpcy5hMCA9ICAgMSArIGFscGhhO1xuICAgICAgICB0aGlzLmExID0gIC0yKmNvc3cwO1xuICAgICAgICB0aGlzLmEyID0gICAxIC0gYWxwaGE7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIERTUC5QRUFLSU5HX0VROiAgLy8gSChzKSA9IChzXjIgKyBzKihBL1EpICsgMSkgLyAoc14yICsgcy8oQSpRKSArIDEpXG4gICAgICAgIHRoaXMuYjAgPSAgIDEgKyBhbHBoYSpBO1xuICAgICAgICB0aGlzLmIxID0gIC0yKmNvc3cwO1xuICAgICAgICB0aGlzLmIyID0gICAxIC0gYWxwaGEqQTtcbiAgICAgICAgdGhpcy5hMCA9ICAgMSArIGFscGhhL0E7XG4gICAgICAgIHRoaXMuYTEgPSAgLTIqY29zdzA7XG4gICAgICAgIHRoaXMuYTIgPSAgIDEgLSBhbHBoYS9BO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBEU1AuTE9XX1NIRUxGOiAgIC8vIEgocykgPSBBICogKHNeMiArIChzcXJ0KEEpL1EpKnMgKyBBKS8oQSpzXjIgKyAoc3FydChBKS9RKSpzICsgMSlcbiAgICAgICAgY29lZmYgPSBzaW53MCAqIE1hdGguc3FydCggKEFeMiArIDEpKigxL3RoaXMuUyAtIDEpICsgMipBICk7XG4gICAgICAgIHRoaXMuYjAgPSAgICBBKigoQSsxKSAtIChBLTEpKmNvc3cwICsgY29lZmYpO1xuICAgICAgICB0aGlzLmIxID0gIDIqQSooKEEtMSkgLSAoQSsxKSpjb3N3MCk7XG4gICAgICAgIHRoaXMuYjIgPSAgICBBKigoQSsxKSAtIChBLTEpKmNvc3cwIC0gY29lZmYpO1xuICAgICAgICB0aGlzLmEwID0gICAgICAgKEErMSkgKyAoQS0xKSpjb3N3MCArIGNvZWZmO1xuICAgICAgICB0aGlzLmExID0gICAtMiooKEEtMSkgKyAoQSsxKSpjb3N3MCk7XG4gICAgICAgIHRoaXMuYTIgPSAgICAgICAoQSsxKSArIChBLTEpKmNvc3cwIC0gY29lZmY7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIERTUC5ISUdIX1NIRUxGOiAgIC8vIEgocykgPSBBICogKEEqc14yICsgKHNxcnQoQSkvUSkqcyArIDEpLyhzXjIgKyAoc3FydChBKS9RKSpzICsgQSlcbiAgICAgICAgY29lZmYgPSBzaW53MCAqIE1hdGguc3FydCggKEFeMiArIDEpKigxL3RoaXMuUyAtIDEpICsgMipBICk7XG4gICAgICAgIHRoaXMuYjAgPSAgICBBKigoQSsxKSArIChBLTEpKmNvc3cwICsgY29lZmYpO1xuICAgICAgICB0aGlzLmIxID0gLTIqQSooKEEtMSkgKyAoQSsxKSpjb3N3MCk7XG4gICAgICAgIHRoaXMuYjIgPSAgICBBKigoQSsxKSArIChBLTEpKmNvc3cwIC0gY29lZmYpO1xuICAgICAgICB0aGlzLmEwID0gICAgICAgKEErMSkgLSAoQS0xKSpjb3N3MCArIGNvZWZmO1xuICAgICAgICB0aGlzLmExID0gICAgMiooKEEtMSkgLSAoQSsxKSpjb3N3MCk7XG4gICAgICAgIHRoaXMuYTIgPSAgICAgICAoQSsxKSAtIChBLTEpKmNvc3cwIC0gY29lZmY7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgIFxuICAgIHRoaXMuYjBhMCA9IHRoaXMuYjAvdGhpcy5hMDtcbiAgICB0aGlzLmIxYTAgPSB0aGlzLmIxL3RoaXMuYTA7XG4gICAgdGhpcy5iMmEwID0gdGhpcy5iMi90aGlzLmEwO1xuICAgIHRoaXMuYTFhMCA9IHRoaXMuYTEvdGhpcy5hMDtcbiAgICB0aGlzLmEyYTAgPSB0aGlzLmEyL3RoaXMuYTA7XG4gIH07XG5cbiAgdGhpcy5wcm9jZXNzID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgICAvL3lbbl0gPSAoYjAvYTApKnhbbl0gKyAoYjEvYTApKnhbbi0xXSArIChiMi9hMCkqeFtuLTJdXG4gICAgICAvLyAgICAgICAtIChhMS9hMCkqeVtuLTFdIC0gKGEyL2EwKSp5W24tMl1cblxuICAgICAgdmFyIGxlbiA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgICB2YXIgb3V0cHV0ID0gbmV3IEZsb2F0MzJBcnJheShsZW4pO1xuXG4gICAgICBmb3IgKCB2YXIgaT0wOyBpPGJ1ZmZlci5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgb3V0cHV0W2ldID0gdGhpcy5iMGEwKmJ1ZmZlcltpXSArIHRoaXMuYjFhMCp0aGlzLnhfMV9sICsgdGhpcy5iMmEwKnRoaXMueF8yX2wgLSB0aGlzLmExYTAqdGhpcy55XzFfbCAtIHRoaXMuYTJhMCp0aGlzLnlfMl9sO1xuICAgICAgICB0aGlzLnlfMl9sID0gdGhpcy55XzFfbDtcbiAgICAgICAgdGhpcy55XzFfbCA9IG91dHB1dFtpXTtcbiAgICAgICAgdGhpcy54XzJfbCA9IHRoaXMueF8xX2w7XG4gICAgICAgIHRoaXMueF8xX2wgPSBidWZmZXJbaV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgdGhpcy5wcm9jZXNzU3RlcmVvID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgICAvL3lbbl0gPSAoYjAvYTApKnhbbl0gKyAoYjEvYTApKnhbbi0xXSArIChiMi9hMCkqeFtuLTJdXG4gICAgICAvLyAgICAgICAtIChhMS9hMCkqeVtuLTFdIC0gKGEyL2EwKSp5W24tMl1cblxuICAgICAgdmFyIGxlbiA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgICB2YXIgb3V0cHV0ID0gbmV3IEZsb2F0MzJBcnJheShsZW4pO1xuICAgICBcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuLzI7IGkrKykge1xuICAgICAgICBvdXRwdXRbMippXSA9IHRoaXMuYjBhMCpidWZmZXJbMippXSArIHRoaXMuYjFhMCp0aGlzLnhfMV9sICsgdGhpcy5iMmEwKnRoaXMueF8yX2wgLSB0aGlzLmExYTAqdGhpcy55XzFfbCAtIHRoaXMuYTJhMCp0aGlzLnlfMl9sO1xuICAgICAgICB0aGlzLnlfMl9sID0gdGhpcy55XzFfbDtcbiAgICAgICAgdGhpcy55XzFfbCA9IG91dHB1dFsyKmldO1xuICAgICAgICB0aGlzLnhfMl9sID0gdGhpcy54XzFfbDtcbiAgICAgICAgdGhpcy54XzFfbCA9IGJ1ZmZlclsyKmldO1xuXG4gICAgICAgIG91dHB1dFsyKmkrMV0gPSB0aGlzLmIwYTAqYnVmZmVyWzIqaSsxXSArIHRoaXMuYjFhMCp0aGlzLnhfMV9yICsgdGhpcy5iMmEwKnRoaXMueF8yX3IgLSB0aGlzLmExYTAqdGhpcy55XzFfciAtIHRoaXMuYTJhMCp0aGlzLnlfMl9yO1xuICAgICAgICB0aGlzLnlfMl9yID0gdGhpcy55XzFfcjtcbiAgICAgICAgdGhpcy55XzFfciA9IG91dHB1dFsyKmkrMV07XG4gICAgICAgIHRoaXMueF8yX3IgPSB0aGlzLnhfMV9yO1xuICAgICAgICB0aGlzLnhfMV9yID0gYnVmZmVyWzIqaSsxXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcbn1cblxuLyogXG4gKiAgTWFnbml0dWRlIHRvIGRlY2liZWxzXG4gKiBcbiAqICBDcmVhdGVkIGJ5IFJpY2FyZCBNYXJ4ZXIgPGVtYWlsQHJpY2FyZG1hcnhlci5jb20+IG9uIDIwMTAtMDUtMjMuXG4gKiAgQ29weXJpZ2h0IDIwMTAgUmljYXJkIE1hcnhlci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgQGJ1ZmZlciBhcnJheSBvZiBtYWduaXR1ZGVzIHRvIGNvbnZlcnQgdG8gZGVjaWJlbHNcbiAqXG4gKiAgQHJldHVybnMgdGhlIGFycmF5IGluIGRlY2liZWxzXG4gKlxuICovXG5EU1AubWFnMmRiID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIHZhciBtaW5EYiA9IC0xMjA7XG4gIHZhciBtaW5NYWcgPSBNYXRoLnBvdygxMC4wLCBtaW5EYiAvIDIwLjApO1xuXG4gIHZhciBsb2cgPSBNYXRoLmxvZztcbiAgdmFyIG1heCA9IE1hdGgubWF4O1xuIFxuICB2YXIgcmVzdWx0ID0gRmxvYXQzMkFycmF5KGJ1ZmZlci5sZW5ndGgpO1xuICBmb3IgKHZhciBpPTA7IGk8YnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0W2ldID0gMjAuMCpsb2cobWF4KGJ1ZmZlcltpXSwgbWluTWFnKSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyogXG4gKiAgRnJlcXVlbmN5IHJlc3BvbnNlXG4gKiBcbiAqICBDcmVhdGVkIGJ5IFJpY2FyZCBNYXJ4ZXIgPGVtYWlsQHJpY2FyZG1hcnhlci5jb20+IG9uIDIwMTAtMDUtMjMuXG4gKiAgQ29weXJpZ2h0IDIwMTAgUmljYXJkIE1hcnhlci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgQ2FsY3VsYXRlcyB0aGUgZnJlcXVlbmN5IHJlc3BvbnNlIGF0IHRoZSBnaXZlbiBwb2ludHMuXG4gKlxuICogIEBiIGIgY29lZmZpY2llbnRzIG9mIHRoZSBmaWx0ZXJcbiAqICBAYSBhIGNvZWZmaWNpZW50cyBvZiB0aGUgZmlsdGVyXG4gKiAgQHcgdyBwb2ludHMgKG5vcm1hbGx5IGJldHdlZW4gLVBJIGFuZCBQSSkgd2hlcmUgdG8gY2FsY3VsYXRlIHRoZSBmcmVxdWVuY3kgcmVzcG9uc2VcbiAqXG4gKiAgQHJldHVybnMgdGhlIGZyZXF1ZW5jeSByZXNwb25zZSBpbiBtYWduaXR1ZGVcbiAqXG4gKi9cbkRTUC5mcmVxeiA9IGZ1bmN0aW9uKGIsIGEsIHcpIHtcbiAgdmFyIGksIGo7XG5cbiAgaWYgKCF3KSB7XG4gICAgdyA9IEZsb2F0MzJBcnJheSgyMDApO1xuICAgIGZvciAoaT0wO2k8dy5sZW5ndGg7IGkrKykge1xuICAgICAgd1tpXSA9IERTUC5UV09fUEkvdy5sZW5ndGggKiBpIC0gTWF0aC5QSTtcbiAgICB9XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gRmxvYXQzMkFycmF5KHcubGVuZ3RoKTtcbiBcbiAgdmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG4gIHZhciBjb3MgPSBNYXRoLmNvcztcbiAgdmFyIHNpbiA9IE1hdGguc2luO1xuIFxuICBmb3IgKGk9MDsgaTx3Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG51bWVyYXRvciA9IHtyZWFsOjAuMCwgaW1hZzowLjB9O1xuICAgIGZvciAoaj0wOyBqPGIubGVuZ3RoOyBqKyspIHtcbiAgICAgIG51bWVyYXRvci5yZWFsICs9IGJbal0gKiBjb3MoLWoqd1tpXSk7XG4gICAgICBudW1lcmF0b3IuaW1hZyArPSBiW2pdICogc2luKC1qKndbaV0pO1xuICAgIH1cblxuICAgIHZhciBkZW5vbWluYXRvciA9IHtyZWFsOjAuMCwgaW1hZzowLjB9O1xuICAgIGZvciAoaj0wOyBqPGEubGVuZ3RoOyBqKyspIHtcbiAgICAgIGRlbm9taW5hdG9yLnJlYWwgKz0gYVtqXSAqIGNvcygtaip3W2ldKTtcbiAgICAgIGRlbm9taW5hdG9yLmltYWcgKz0gYVtqXSAqIHNpbigtaip3W2ldKTtcbiAgICB9XG4gXG4gICAgcmVzdWx0W2ldID0gIHNxcnQobnVtZXJhdG9yLnJlYWwqbnVtZXJhdG9yLnJlYWwgKyBudW1lcmF0b3IuaW1hZypudW1lcmF0b3IuaW1hZykgLyBzcXJ0KGRlbm9taW5hdG9yLnJlYWwqZGVub21pbmF0b3IucmVhbCArIGRlbm9taW5hdG9yLmltYWcqZGVub21pbmF0b3IuaW1hZyk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyogXG4gKiAgR3JhcGhpY2FsIEVxdWFsaXplclxuICpcbiAqICBJbXBsZW1lbnRhdGlvbiBvZiBhIGdyYXBoaWMgZXF1YWxpemVyIHdpdGggYSBjb25maWd1cmFibGUgYmFuZHMtcGVyLW9jdGF2ZVxuICogIGFuZCBtaW5pbXVtIGFuZCBtYXhpbXVtIGZyZXF1ZW5jaWVzXG4gKiBcbiAqICBDcmVhdGVkIGJ5IFJpY2FyZCBNYXJ4ZXIgPGVtYWlsQHJpY2FyZG1hcnhlci5jb20+IG9uIDIwMTAtMDUtMjMuXG4gKiAgQ29weXJpZ2h0IDIwMTAgUmljYXJkIE1hcnhlci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKi9cbmZ1bmN0aW9uIEdyYXBoaWNhbEVxKHNhbXBsZVJhdGUpIHtcbiAgdGhpcy5GUyA9IHNhbXBsZVJhdGU7XG4gIHRoaXMubWluRnJlcSA9IDQwLjA7XG4gIHRoaXMubWF4RnJlcSA9IDE2MDAwLjA7XG5cbiAgdGhpcy5iYW5kc1Blck9jdGF2ZSA9IDEuMDtcblxuICB0aGlzLmZpbHRlcnMgPSBbXTtcbiAgdGhpcy5mcmVxenMgPSBbXTtcblxuICB0aGlzLmNhbGN1bGF0ZUZyZXF6cyA9IHRydWU7XG5cbiAgdGhpcy5yZWNhbGN1bGF0ZUZpbHRlcnMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYmFuZENvdW50ID0gTWF0aC5yb3VuZChNYXRoLmxvZyh0aGlzLm1heEZyZXEvdGhpcy5taW5GcmVxKSAqIHRoaXMuYmFuZHNQZXJPY3RhdmUvIE1hdGguTE4yKTtcblxuICAgIHRoaXMuZmlsdGVycyA9IFtdO1xuICAgIGZvciAodmFyIGk9MDsgaTxiYW5kQ291bnQ7IGkrKykge1xuICAgICAgdmFyIGZyZXEgPSB0aGlzLm1pbkZyZXEqKE1hdGgucG93KDIsIGkvdGhpcy5iYW5kc1Blck9jdGF2ZSkpO1xuICAgICAgdmFyIG5ld0ZpbHRlciA9IG5ldyBCaXF1YWQoRFNQLlBFQUtJTkdfRVEsIHRoaXMuRlMpO1xuICAgICAgbmV3RmlsdGVyLnNldERiR2FpbigwKTtcbiAgICAgIG5ld0ZpbHRlci5zZXRCVygxL3RoaXMuYmFuZHNQZXJPY3RhdmUpO1xuICAgICAgbmV3RmlsdGVyLnNldEYwKGZyZXEpO1xuICAgICAgdGhpcy5maWx0ZXJzW2ldID0gbmV3RmlsdGVyO1xuICAgICAgdGhpcy5yZWNhbGN1bGF0ZUZyZXF6KGkpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnNldE1pbmltdW1GcmVxdWVuY3kgPSBmdW5jdGlvbihmcmVxKSB7XG4gICAgdGhpcy5taW5GcmVxID0gZnJlcTtcbiAgICB0aGlzLnJlY2FsY3VsYXRlRmlsdGVycygpO1xuICB9O1xuXG4gIHRoaXMuc2V0TWF4aW11bUZyZXF1ZW5jeSA9IGZ1bmN0aW9uKGZyZXEpIHtcbiAgICB0aGlzLm1heEZyZXEgPSBmcmVxO1xuICAgIHRoaXMucmVjYWxjdWxhdGVGaWx0ZXJzKCk7XG4gIH07XG5cbiAgdGhpcy5zZXRCYW5kc1Blck9jdGF2ZSA9IGZ1bmN0aW9uKGJhbmRzKSB7XG4gICAgdGhpcy5iYW5kc1Blck9jdGF2ZSA9IGJhbmRzO1xuICAgIHRoaXMucmVjYWxjdWxhdGVGaWx0ZXJzKCk7XG4gIH07XG5cbiAgdGhpcy5zZXRCYW5kR2FpbiA9IGZ1bmN0aW9uKGJhbmRJbmRleCwgZ2Fpbikge1xuICAgIGlmIChiYW5kSW5kZXggPCAwIHx8IGJhbmRJbmRleCA+ICh0aGlzLmZpbHRlcnMubGVuZ3RoLTEpKSB7XG4gICAgICB0aHJvdyBcIlRoZSBiYW5kIGluZGV4IG9mIHRoZSBncmFwaGljYWwgZXF1YWxpemVyIGlzIG91dCBvZiBib3VuZHMuXCI7XG4gICAgfVxuXG4gICAgaWYgKCFnYWluKSB7XG4gICAgICB0aHJvdyBcIkEgZ2FpbiBtdXN0IGJlIHBhc3NlZC5cIjtcbiAgICB9XG4gICBcbiAgICB0aGlzLmZpbHRlcnNbYmFuZEluZGV4XS5zZXREYkdhaW4oZ2Fpbik7XG4gICAgdGhpcy5yZWNhbGN1bGF0ZUZyZXF6KGJhbmRJbmRleCk7XG4gIH07XG4gXG4gIHRoaXMucmVjYWxjdWxhdGVGcmVxeiA9IGZ1bmN0aW9uKGJhbmRJbmRleCkge1xuICAgIGlmICghdGhpcy5jYWxjdWxhdGVGcmVxenMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoYmFuZEluZGV4IDwgMCB8fCBiYW5kSW5kZXggPiAodGhpcy5maWx0ZXJzLmxlbmd0aC0xKSkge1xuICAgICAgdGhyb3cgXCJUaGUgYmFuZCBpbmRleCBvZiB0aGUgZ3JhcGhpY2FsIGVxdWFsaXplciBpcyBvdXQgb2YgYm91bmRzLiBcIiArIGJhbmRJbmRleCArIFwiIGlzIG91dCBvZiBbXCIgKyAwICsgXCIsIFwiICsgdGhpcy5maWx0ZXJzLmxlbmd0aC0xICsgXCJdXCI7XG4gICAgfVxuICAgICAgIFxuICAgIGlmICghdGhpcy53KSB7XG4gICAgICB0aGlzLncgPSBGbG9hdDMyQXJyYXkoNDAwKTtcbiAgICAgIGZvciAodmFyIGk9MDsgaTx0aGlzLncubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgIHRoaXMud1tpXSA9IE1hdGguUEkvdGhpcy53Lmxlbmd0aCAqIGk7XG4gICAgICB9XG4gICAgfVxuICAgXG4gICAgdmFyIGIgPSBbdGhpcy5maWx0ZXJzW2JhbmRJbmRleF0uYjAsIHRoaXMuZmlsdGVyc1tiYW5kSW5kZXhdLmIxLCB0aGlzLmZpbHRlcnNbYmFuZEluZGV4XS5iMl07XG4gICAgdmFyIGEgPSBbdGhpcy5maWx0ZXJzW2JhbmRJbmRleF0uYTAsIHRoaXMuZmlsdGVyc1tiYW5kSW5kZXhdLmExLCB0aGlzLmZpbHRlcnNbYmFuZEluZGV4XS5hMl07XG5cbiAgICB0aGlzLmZyZXF6c1tiYW5kSW5kZXhdID0gRFNQLm1hZzJkYihEU1AuZnJlcXooYiwgYSwgdGhpcy53KSk7XG4gIH07XG5cbiAgdGhpcy5wcm9jZXNzID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgdmFyIG91dHB1dCA9IGJ1ZmZlcjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvdXRwdXQgPSB0aGlzLmZpbHRlcnNbaV0ucHJvY2VzcyhvdXRwdXQpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgdGhpcy5wcm9jZXNzU3RlcmVvID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgdmFyIG91dHB1dCA9IGJ1ZmZlcjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvdXRwdXQgPSB0aGlzLmZpbHRlcnNbaV0ucHJvY2Vzc1N0ZXJlbyhvdXRwdXQpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG59XG5cbi8qKlxuICogTXVsdGlEZWxheSBlZmZlY3QgYnkgQWxtZXIgVGhpZSAoaHR0cDovL2NvZGUuYWxtZXJvcy5jb20pLlxuICogQ29weXJpZ2h0IDIwMTAgQWxtZXIgVGhpZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEV4YW1wbGU6IGh0dHA6Ly9jb2RlLmFsbWVyb3MuY29tL2NvZGUtZXhhbXBsZXMvZGVsYXktZmlyZWZveC1hdWRpby1hcGkvXG4gKlxuICogVGhpcyBpcyBhIGRlbGF5IHRoYXQgZmVlZHMgaXQncyBvd24gZGVsYXllZCBzaWduYWwgYmFjayBpbnRvIGl0cyBjaXJjdWxhclxuICogYnVmZmVyLiBBbHNvIGtub3duIGFzIGEgQ29tYkZpbHRlci5cbiAqXG4gKiBDb21wYXRpYmxlIHdpdGggaW50ZXJsZWF2ZWQgc3RlcmVvIChvciBtb3JlIGNoYW5uZWwpIGJ1ZmZlcnMgYW5kXG4gKiBub24taW50ZXJsZWF2ZWQgbW9ubyBidWZmZXJzLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXhEZWxheUluU2FtcGxlc1NpemUgTWF4aW11bSBwb3NzaWJsZSBkZWxheSBpbiBzYW1wbGVzIChzaXplIG9mIGNpcmN1bGFyIGJ1ZmZlcilcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheUluU2FtcGxlcyBJbml0aWFsIGRlbGF5IGluIHNhbXBsZXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXN0ZXJWb2x1bWUgSW5pdGlhbCBtYXN0ZXIgdm9sdW1lLiBGbG9hdCB2YWx1ZTogMC4wIChzaWxlbmNlKSwgMS4wIChub3JtYWwpLCA+MS4wIChhbXBsaWZ5KVxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5Vm9sdW1lIEluaXRpYWwgZmVlZGJhY2sgZGVsYXkgdm9sdW1lLiBGbG9hdCB2YWx1ZTogMC4wIChzaWxlbmNlKSwgMS4wIChub3JtYWwpLCA+MS4wIChhbXBsaWZ5KVxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBNdWx0aURlbGF5KG1heERlbGF5SW5TYW1wbGVzU2l6ZSwgZGVsYXlJblNhbXBsZXMsIG1hc3RlclZvbHVtZSwgZGVsYXlWb2x1bWUpIHtcbiAgdGhpcy5kZWxheUJ1ZmZlclNhbXBsZXMgICA9IG5ldyBGbG9hdDMyQXJyYXkobWF4RGVsYXlJblNhbXBsZXNTaXplKTsgLy8gVGhlIG1heGltdW0gc2l6ZSBvZiBkZWxheVxuICB0aGlzLmRlbGF5SW5wdXRQb2ludGVyICAgICA9IGRlbGF5SW5TYW1wbGVzO1xuICB0aGlzLmRlbGF5T3V0cHV0UG9pbnRlciAgID0gMDtcbiBcbiAgdGhpcy5kZWxheUluU2FtcGxlcyAgID0gZGVsYXlJblNhbXBsZXM7XG4gIHRoaXMubWFzdGVyVm9sdW1lICAgICA9IG1hc3RlclZvbHVtZTtcbiAgdGhpcy5kZWxheVZvbHVtZSAgICAgPSBkZWxheVZvbHVtZTtcbn1cblxuLyoqXG4gKiBDaGFuZ2UgdGhlIGRlbGF5IHRpbWUgaW4gc2FtcGxlcy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsYXlJblNhbXBsZXMgRGVsYXkgaW4gc2FtcGxlc1xuICovXG5NdWx0aURlbGF5LnByb3RvdHlwZS5zZXREZWxheUluU2FtcGxlcyA9IGZ1bmN0aW9uIChkZWxheUluU2FtcGxlcykge1xuICB0aGlzLmRlbGF5SW5TYW1wbGVzID0gZGVsYXlJblNhbXBsZXM7XG4gXG4gIHRoaXMuZGVsYXlJbnB1dFBvaW50ZXIgPSB0aGlzLmRlbGF5T3V0cHV0UG9pbnRlciArIGRlbGF5SW5TYW1wbGVzO1xuXG4gIGlmICh0aGlzLmRlbGF5SW5wdXRQb2ludGVyID49IHRoaXMuZGVsYXlCdWZmZXJTYW1wbGVzLmxlbmd0aC0xKSB7XG4gICAgdGhpcy5kZWxheUlucHV0UG9pbnRlciA9IHRoaXMuZGVsYXlJbnB1dFBvaW50ZXIgLSB0aGlzLmRlbGF5QnVmZmVyU2FtcGxlcy5sZW5ndGg7IFxuICB9XG59O1xuXG4vKipcbiAqIENoYW5nZSB0aGUgbWFzdGVyIHZvbHVtZS5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbWFzdGVyVm9sdW1lIEZsb2F0IHZhbHVlOiAwLjAgKHNpbGVuY2UpLCAxLjAgKG5vcm1hbCksID4xLjAgKGFtcGxpZnkpXG4gKi9cbk11bHRpRGVsYXkucHJvdG90eXBlLnNldE1hc3RlclZvbHVtZSA9IGZ1bmN0aW9uKG1hc3RlclZvbHVtZSkge1xuICB0aGlzLm1hc3RlclZvbHVtZSA9IG1hc3RlclZvbHVtZTtcbn07XG5cbi8qKlxuICogQ2hhbmdlIHRoZSBkZWxheSBmZWVkYmFjayB2b2x1bWUuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5Vm9sdW1lIEZsb2F0IHZhbHVlOiAwLjAgKHNpbGVuY2UpLCAxLjAgKG5vcm1hbCksID4xLjAgKGFtcGxpZnkpXG4gKi9cbk11bHRpRGVsYXkucHJvdG90eXBlLnNldERlbGF5Vm9sdW1lID0gZnVuY3Rpb24oZGVsYXlWb2x1bWUpIHtcbiAgdGhpcy5kZWxheVZvbHVtZSA9IGRlbGF5Vm9sdW1lO1xufTtcblxuLyoqXG4gKiBQcm9jZXNzIGEgZ2l2ZW4gaW50ZXJsZWF2ZWQgb3IgbW9ubyBub24taW50ZXJsZWF2ZWQgZmxvYXQgdmFsdWUgQXJyYXkgYW5kIGFkZHMgdGhlIGRlbGF5ZWQgYXVkaW8uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gc2FtcGxlcyBBcnJheSBjb250YWluaW5nIEZsb2F0IHZhbHVlcyBvciBhIEZsb2F0MzJBcnJheVxuICpcbiAqIEByZXR1cm5zIEEgbmV3IEZsb2F0MzJBcnJheSBpbnRlcmxlYXZlZCBvciBtb25vIG5vbi1pbnRlcmxlYXZlZCBhcyB3YXMgZmVkIHRvIHRoaXMgZnVuY3Rpb24uXG4gKi9cbk11bHRpRGVsYXkucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbihzYW1wbGVzKSB7XG4gIC8vIE5CLiBNYWtlIGEgY29weSB0byBwdXQgaW4gdGhlIG91dHB1dCBzYW1wbGVzIHRvIHJldHVybi5cbiAgdmFyIG91dHB1dFNhbXBsZXMgPSBuZXcgRmxvYXQzMkFycmF5KHNhbXBsZXMubGVuZ3RoKTtcblxuICBmb3IgKHZhciBpPTA7IGk8c2FtcGxlcy5sZW5ndGg7IGkrKykge1xuICAgIC8vIGRlbGF5QnVmZmVyU2FtcGxlcyBjb3VsZCBjb250YWluIGluaXRpYWwgTlVMTCdzLCByZXR1cm4gc2lsZW5jZSBpbiB0aGF0IGNhc2VcbiAgICB2YXIgZGVsYXlTYW1wbGUgPSAodGhpcy5kZWxheUJ1ZmZlclNhbXBsZXNbdGhpcy5kZWxheU91dHB1dFBvaW50ZXJdID09PSBudWxsID8gMC4wIDogdGhpcy5kZWxheUJ1ZmZlclNhbXBsZXNbdGhpcy5kZWxheU91dHB1dFBvaW50ZXJdKTtcbiAgIFxuICAgIC8vIE1peCBub3JtYWwgYXVkaW8gZGF0YSB3aXRoIGRlbGF5ZWQgYXVkaW9cbiAgICB2YXIgc2FtcGxlID0gKGRlbGF5U2FtcGxlICogdGhpcy5kZWxheVZvbHVtZSkgKyBzYW1wbGVzW2ldO1xuICAgXG4gICAgLy8gQWRkIGF1ZGlvIGRhdGEgd2l0aCB0aGUgZGVsYXkgaW4gdGhlIGRlbGF5IGJ1ZmZlclxuICAgIHRoaXMuZGVsYXlCdWZmZXJTYW1wbGVzW3RoaXMuZGVsYXlJbnB1dFBvaW50ZXJdID0gc2FtcGxlO1xuICAgXG4gICAgLy8gUmV0dXJuIHRoZSBhdWRpbyB3aXRoIGRlbGF5IG1peFxuICAgIG91dHB1dFNhbXBsZXNbaV0gPSBzYW1wbGUgKiB0aGlzLm1hc3RlclZvbHVtZTtcbiAgIFxuICAgIC8vIE1hbmFnZSBjaXJjdWxhaXIgZGVsYXkgYnVmZmVyIHBvaW50ZXJzXG4gICAgdGhpcy5kZWxheUlucHV0UG9pbnRlcisrO1xuICAgIGlmICh0aGlzLmRlbGF5SW5wdXRQb2ludGVyID49IHRoaXMuZGVsYXlCdWZmZXJTYW1wbGVzLmxlbmd0aC0xKSB7XG4gICAgICB0aGlzLmRlbGF5SW5wdXRQb2ludGVyID0gMDtcbiAgICB9XG4gICAgIFxuICAgIHRoaXMuZGVsYXlPdXRwdXRQb2ludGVyKys7XG4gICAgaWYgKHRoaXMuZGVsYXlPdXRwdXRQb2ludGVyID49IHRoaXMuZGVsYXlCdWZmZXJTYW1wbGVzLmxlbmd0aC0xKSB7XG4gICAgICB0aGlzLmRlbGF5T3V0cHV0UG9pbnRlciA9IDA7IFxuICAgIH0gXG4gIH1cbiBcbiAgcmV0dXJuIG91dHB1dFNhbXBsZXM7XG59O1xuXG4vKipcbiAqIFNpbmdsZURlbGF5IGVmZmVjdCBieSBBbG1lciBUaGllIChodHRwOi8vY29kZS5hbG1lcm9zLmNvbSkuXG4gKiBDb3B5cmlnaHQgMjAxMCBBbG1lciBUaGllLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogRXhhbXBsZTogU2VlIHVzYWdlIGluIFJldmVyYiBjbGFzc1xuICpcbiAqIFRoaXMgaXMgYSBkZWxheSB0aGF0IGRvZXMgTk9UIGZlZWRzIGl0J3Mgb3duIGRlbGF5ZWQgc2lnbmFsIGJhY2sgaW50byBpdHMgXG4gKiBjaXJjdWxhciBidWZmZXIsIG5laXRoZXIgZG9lcyBpdCByZXR1cm4gdGhlIG9yaWdpbmFsIHNpZ25hbC4gQWxzbyBrbm93biBhc1xuICogYW4gQWxsUGFzc0ZpbHRlcig/KS5cbiAqXG4gKiBDb21wYXRpYmxlIHdpdGggaW50ZXJsZWF2ZWQgc3RlcmVvIChvciBtb3JlIGNoYW5uZWwpIGJ1ZmZlcnMgYW5kXG4gKiBub24taW50ZXJsZWF2ZWQgbW9ubyBidWZmZXJzLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXhEZWxheUluU2FtcGxlc1NpemUgTWF4aW11bSBwb3NzaWJsZSBkZWxheSBpbiBzYW1wbGVzIChzaXplIG9mIGNpcmN1bGFyIGJ1ZmZlcilcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheUluU2FtcGxlcyBJbml0aWFsIGRlbGF5IGluIHNhbXBsZXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheVZvbHVtZSBJbml0aWFsIGZlZWRiYWNrIGRlbGF5IHZvbHVtZS4gRmxvYXQgdmFsdWU6IDAuMCAoc2lsZW5jZSksIDEuMCAobm9ybWFsKSwgPjEuMCAoYW1wbGlmeSlcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuXG5mdW5jdGlvbiBTaW5nbGVEZWxheShtYXhEZWxheUluU2FtcGxlc1NpemUsIGRlbGF5SW5TYW1wbGVzLCBkZWxheVZvbHVtZSkge1xuICB0aGlzLmRlbGF5QnVmZmVyU2FtcGxlcyA9IG5ldyBGbG9hdDMyQXJyYXkobWF4RGVsYXlJblNhbXBsZXNTaXplKTsgLy8gVGhlIG1heGltdW0gc2l6ZSBvZiBkZWxheVxuICB0aGlzLmRlbGF5SW5wdXRQb2ludGVyICA9IGRlbGF5SW5TYW1wbGVzO1xuICB0aGlzLmRlbGF5T3V0cHV0UG9pbnRlciA9IDA7XG4gXG4gIHRoaXMuZGVsYXlJblNhbXBsZXMgICAgID0gZGVsYXlJblNhbXBsZXM7XG4gIHRoaXMuZGVsYXlWb2x1bWUgICAgICAgID0gZGVsYXlWb2x1bWU7XG59XG5cbi8qKlxuICogQ2hhbmdlIHRoZSBkZWxheSB0aW1lIGluIHNhbXBsZXMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5SW5TYW1wbGVzIERlbGF5IGluIHNhbXBsZXNcbiAqL1xuU2luZ2xlRGVsYXkucHJvdG90eXBlLnNldERlbGF5SW5TYW1wbGVzID0gZnVuY3Rpb24oZGVsYXlJblNhbXBsZXMpIHtcbiAgdGhpcy5kZWxheUluU2FtcGxlcyA9IGRlbGF5SW5TYW1wbGVzO1xuICB0aGlzLmRlbGF5SW5wdXRQb2ludGVyID0gdGhpcy5kZWxheU91dHB1dFBvaW50ZXIgKyBkZWxheUluU2FtcGxlcztcblxuICBpZiAodGhpcy5kZWxheUlucHV0UG9pbnRlciA+PSB0aGlzLmRlbGF5QnVmZmVyU2FtcGxlcy5sZW5ndGgtMSkge1xuICAgIHRoaXMuZGVsYXlJbnB1dFBvaW50ZXIgPSB0aGlzLmRlbGF5SW5wdXRQb2ludGVyIC0gdGhpcy5kZWxheUJ1ZmZlclNhbXBsZXMubGVuZ3RoOyBcbiAgfVxufTtcblxuLyoqXG4gKiBDaGFuZ2UgdGhlIHJldHVybiBzaWduYWwgdm9sdW1lLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheVZvbHVtZSBGbG9hdCB2YWx1ZTogMC4wIChzaWxlbmNlKSwgMS4wIChub3JtYWwpLCA+MS4wIChhbXBsaWZ5KVxuICovXG5TaW5nbGVEZWxheS5wcm90b3R5cGUuc2V0RGVsYXlWb2x1bWUgPSBmdW5jdGlvbihkZWxheVZvbHVtZSkge1xuICB0aGlzLmRlbGF5Vm9sdW1lID0gZGVsYXlWb2x1bWU7XG59O1xuXG4vKipcbiAqIFByb2Nlc3MgYSBnaXZlbiBpbnRlcmxlYXZlZCBvciBtb25vIG5vbi1pbnRlcmxlYXZlZCBmbG9hdCB2YWx1ZSBBcnJheSBhbmRcbiAqIHJldHVybnMgdGhlIGRlbGF5ZWQgYXVkaW8uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gc2FtcGxlcyBBcnJheSBjb250YWluaW5nIEZsb2F0IHZhbHVlcyBvciBhIEZsb2F0MzJBcnJheVxuICpcbiAqIEByZXR1cm5zIEEgbmV3IEZsb2F0MzJBcnJheSBpbnRlcmxlYXZlZCBvciBtb25vIG5vbi1pbnRlcmxlYXZlZCBhcyB3YXMgZmVkIHRvIHRoaXMgZnVuY3Rpb24uXG4gKi9cblNpbmdsZURlbGF5LnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24oc2FtcGxlcykge1xuICAvLyBOQi4gTWFrZSBhIGNvcHkgdG8gcHV0IGluIHRoZSBvdXRwdXQgc2FtcGxlcyB0byByZXR1cm4uXG4gIHZhciBvdXRwdXRTYW1wbGVzID0gbmV3IEZsb2F0MzJBcnJheShzYW1wbGVzLmxlbmd0aCk7XG5cbiAgZm9yICh2YXIgaT0wOyBpPHNhbXBsZXMubGVuZ3RoOyBpKyspIHtcblxuICAgIC8vIEFkZCBhdWRpbyBkYXRhIHdpdGggdGhlIGRlbGF5IGluIHRoZSBkZWxheSBidWZmZXJcbiAgICB0aGlzLmRlbGF5QnVmZmVyU2FtcGxlc1t0aGlzLmRlbGF5SW5wdXRQb2ludGVyXSA9IHNhbXBsZXNbaV07XG4gICBcbiAgICAvLyBkZWxheUJ1ZmZlclNhbXBsZXMgY291bGQgY29udGFpbiBpbml0aWFsIE5VTEwncywgcmV0dXJuIHNpbGVuY2UgaW4gdGhhdCBjYXNlXG4gICAgdmFyIGRlbGF5U2FtcGxlID0gdGhpcy5kZWxheUJ1ZmZlclNhbXBsZXNbdGhpcy5kZWxheU91dHB1dFBvaW50ZXJdO1xuXG4gICAgLy8gUmV0dXJuIHRoZSBhdWRpbyB3aXRoIGRlbGF5IG1peFxuICAgIG91dHB1dFNhbXBsZXNbaV0gPSBkZWxheVNhbXBsZSAqIHRoaXMuZGVsYXlWb2x1bWU7XG5cbiAgICAvLyBNYW5hZ2UgY2lyY3VsYWlyIGRlbGF5IGJ1ZmZlciBwb2ludGVyc1xuICAgIHRoaXMuZGVsYXlJbnB1dFBvaW50ZXIrKztcblxuICAgIGlmICh0aGlzLmRlbGF5SW5wdXRQb2ludGVyID49IHRoaXMuZGVsYXlCdWZmZXJTYW1wbGVzLmxlbmd0aC0xKSB7XG4gICAgICB0aGlzLmRlbGF5SW5wdXRQb2ludGVyID0gMDtcbiAgICB9XG4gICAgIFxuICAgIHRoaXMuZGVsYXlPdXRwdXRQb2ludGVyKys7XG5cbiAgICBpZiAodGhpcy5kZWxheU91dHB1dFBvaW50ZXIgPj0gdGhpcy5kZWxheUJ1ZmZlclNhbXBsZXMubGVuZ3RoLTEpIHtcbiAgICAgIHRoaXMuZGVsYXlPdXRwdXRQb2ludGVyID0gMDsgXG4gICAgfSBcbiAgfVxuIFxuICByZXR1cm4gb3V0cHV0U2FtcGxlcztcbn07XG5cbi8qKlxuICogUmV2ZXJiIGVmZmVjdCBieSBBbG1lciBUaGllIChodHRwOi8vY29kZS5hbG1lcm9zLmNvbSkuXG4gKiBDb3B5cmlnaHQgMjAxMCBBbG1lciBUaGllLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogRXhhbXBsZTogaHR0cDovL2NvZGUuYWxtZXJvcy5jb20vY29kZS1leGFtcGxlcy9yZXZlcmItZmlyZWZveC1hdWRpby1hcGkvXG4gKlxuICogVGhpcyByZXZlcmIgY29uc2lzdHMgb2YgNiBTaW5nbGVEZWxheXMsIDYgTXVsdGlEZWxheXMgYW5kIGFuIElJUkZpbHRlcjJcbiAqIGZvciBlYWNoIG9mIHRoZSB0d28gc3RlcmVvIGNoYW5uZWxzLlxuICpcbiAqIENvbXBhdGlibGUgd2l0aCBpbnRlcmxlYXZlZCBzdGVyZW8gYnVmZmVycyBvbmx5IVxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXhEZWxheUluU2FtcGxlc1NpemUgTWF4aW11bSBwb3NzaWJsZSBkZWxheSBpbiBzYW1wbGVzIChzaXplIG9mIGNpcmN1bGFyIGJ1ZmZlcnMpXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsYXlJblNhbXBsZXMgSW5pdGlhbCBkZWxheSBpbiBzYW1wbGVzIGZvciBpbnRlcm5hbCAoU2luZ2xlL011bHRpKWRlbGF5c1xuICogQHBhcmFtIHtOdW1iZXJ9IG1hc3RlclZvbHVtZSBJbml0aWFsIG1hc3RlciB2b2x1bWUuIEZsb2F0IHZhbHVlOiAwLjAgKHNpbGVuY2UpLCAxLjAgKG5vcm1hbCksID4xLjAgKGFtcGxpZnkpXG4gKiBAcGFyYW0ge051bWJlcn0gbWl4Vm9sdW1lIEluaXRpYWwgcmV2ZXJiIHNpZ25hbCBtaXggdm9sdW1lLiBGbG9hdCB2YWx1ZTogMC4wIChzaWxlbmNlKSwgMS4wIChub3JtYWwpLCA+MS4wIChhbXBsaWZ5KVxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5Vm9sdW1lIEluaXRpYWwgZmVlZGJhY2sgZGVsYXkgdm9sdW1lIGZvciBpbnRlcm5hbCAoU2luZ2xlL011bHRpKWRlbGF5cy4gRmxvYXQgdmFsdWU6IDAuMCAoc2lsZW5jZSksIDEuMCAobm9ybWFsKSwgPjEuMCAoYW1wbGlmeSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBkYW1wRnJlcXVlbmN5IEluaXRpYWwgbG93IHBhc3MgZmlsdGVyIGZyZXF1ZW5jeS4gMCB0byA0NDEwMCAoZGVwZW5kaW5nIG9uIHlvdXIgbWF4aW11bSBzYW1wbGluZyBmcmVxdWVuY3kpXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFJldmVyYihtYXhEZWxheUluU2FtcGxlc1NpemUsIGRlbGF5SW5TYW1wbGVzLCBtYXN0ZXJWb2x1bWUsIG1peFZvbHVtZSwgZGVsYXlWb2x1bWUsIGRhbXBGcmVxdWVuY3kpIHtcbiAgdGhpcy5kZWxheUluU2FtcGxlcyAgID0gZGVsYXlJblNhbXBsZXM7XG4gIHRoaXMubWFzdGVyVm9sdW1lICAgICA9IG1hc3RlclZvbHVtZTtcbiAgdGhpcy5taXhWb2x1bWUgICAgICAgPSBtaXhWb2x1bWU7XG4gIHRoaXMuZGVsYXlWb2x1bWUgICAgID0gZGVsYXlWb2x1bWU7XG4gIHRoaXMuZGFtcEZyZXF1ZW5jeSAgICAgPSBkYW1wRnJlcXVlbmN5O1xuIFxuICB0aGlzLk5SX09GX01VTFRJREVMQVlTID0gNjtcbiAgdGhpcy5OUl9PRl9TSU5HTEVERUxBWVMgPSA2O1xuIFxuICB0aGlzLkxPV1BBU1NMID0gbmV3IElJUkZpbHRlcjIoRFNQLkxPV1BBU1MsIGRhbXBGcmVxdWVuY3ksIDAsIDQ0MTAwKTtcbiAgdGhpcy5MT1dQQVNTUiA9IG5ldyBJSVJGaWx0ZXIyKERTUC5MT1dQQVNTLCBkYW1wRnJlcXVlbmN5LCAwLCA0NDEwMCk7XG4gXG4gIHRoaXMuc2luZ2xlRGVsYXlzID0gW107XG4gIFxuICB2YXIgaSwgZGVsYXlNdWx0aXBseTtcblxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5OUl9PRl9TSU5HTEVERUxBWVM7IGkrKykge1xuICAgIGRlbGF5TXVsdGlwbHkgPSAxLjAgKyAoaS83LjApOyAvLyAxLjAsIDEuMSwgMS4yLi4uXG4gICAgdGhpcy5zaW5nbGVEZWxheXNbaV0gPSBuZXcgU2luZ2xlRGVsYXkobWF4RGVsYXlJblNhbXBsZXNTaXplLCBNYXRoLnJvdW5kKHRoaXMuZGVsYXlJblNhbXBsZXMgKiBkZWxheU11bHRpcGx5KSwgdGhpcy5kZWxheVZvbHVtZSk7XG4gIH1cbiBcbiAgdGhpcy5tdWx0aURlbGF5cyA9IFtdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLk5SX09GX01VTFRJREVMQVlTOyBpKyspIHtcbiAgICBkZWxheU11bHRpcGx5ID0gMS4wICsgKGkvMTAuMCk7IC8vIDEuMCwgMS4xLCAxLjIuLi4gXG4gICAgdGhpcy5tdWx0aURlbGF5c1tpXSA9IG5ldyBNdWx0aURlbGF5KG1heERlbGF5SW5TYW1wbGVzU2l6ZSwgTWF0aC5yb3VuZCh0aGlzLmRlbGF5SW5TYW1wbGVzICogZGVsYXlNdWx0aXBseSksIHRoaXMubWFzdGVyVm9sdW1lLCB0aGlzLmRlbGF5Vm9sdW1lKTtcbiAgfVxufVxuXG4vKipcbiAqIENoYW5nZSB0aGUgZGVsYXkgdGltZSBpbiBzYW1wbGVzIGFzIGEgYmFzZSBmb3IgYWxsIGRlbGF5cy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsYXlJblNhbXBsZXMgRGVsYXkgaW4gc2FtcGxlc1xuICovXG5SZXZlcmIucHJvdG90eXBlLnNldERlbGF5SW5TYW1wbGVzID0gZnVuY3Rpb24gKGRlbGF5SW5TYW1wbGVzKXtcbiAgdGhpcy5kZWxheUluU2FtcGxlcyA9IGRlbGF5SW5TYW1wbGVzO1xuXG4gIHZhciBpLCBkZWxheU11bHRpcGx5O1xuIFxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5OUl9PRl9TSU5HTEVERUxBWVM7IGkrKykge1xuICAgIGRlbGF5TXVsdGlwbHkgPSAxLjAgKyAoaS83LjApOyAvLyAxLjAsIDEuMSwgMS4yLi4uXG4gICAgdGhpcy5zaW5nbGVEZWxheXNbaV0uc2V0RGVsYXlJblNhbXBsZXMoIE1hdGgucm91bmQodGhpcy5kZWxheUluU2FtcGxlcyAqIGRlbGF5TXVsdGlwbHkpICk7XG4gIH1cbiAgIFxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5OUl9PRl9NVUxUSURFTEFZUzsgaSsrKSB7XG4gICAgZGVsYXlNdWx0aXBseSA9IDEuMCArIChpLzEwLjApOyAvLyAxLjAsIDEuMSwgMS4yLi4uXG4gICAgdGhpcy5tdWx0aURlbGF5c1tpXS5zZXREZWxheUluU2FtcGxlcyggTWF0aC5yb3VuZCh0aGlzLmRlbGF5SW5TYW1wbGVzICogZGVsYXlNdWx0aXBseSkgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDaGFuZ2UgdGhlIG1hc3RlciB2b2x1bWUuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1hc3RlclZvbHVtZSBGbG9hdCB2YWx1ZTogMC4wIChzaWxlbmNlKSwgMS4wIChub3JtYWwpLCA+MS4wIChhbXBsaWZ5KVxuICovXG5SZXZlcmIucHJvdG90eXBlLnNldE1hc3RlclZvbHVtZSA9IGZ1bmN0aW9uIChtYXN0ZXJWb2x1bWUpe1xuICB0aGlzLm1hc3RlclZvbHVtZSA9IG1hc3RlclZvbHVtZTtcbn07XG5cbi8qKlxuICogQ2hhbmdlIHRoZSByZXZlcmIgc2lnbmFsIG1peCBsZXZlbC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbWl4Vm9sdW1lIEZsb2F0IHZhbHVlOiAwLjAgKHNpbGVuY2UpLCAxLjAgKG5vcm1hbCksID4xLjAgKGFtcGxpZnkpXG4gKi9cblJldmVyYi5wcm90b3R5cGUuc2V0TWl4Vm9sdW1lID0gZnVuY3Rpb24gKG1peFZvbHVtZSl7XG4gIHRoaXMubWl4Vm9sdW1lID0gbWl4Vm9sdW1lO1xufTtcblxuLyoqXG4gKiBDaGFuZ2UgYWxsIGRlbGF5cyBmZWVkYmFjayB2b2x1bWUuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5Vm9sdW1lIEZsb2F0IHZhbHVlOiAwLjAgKHNpbGVuY2UpLCAxLjAgKG5vcm1hbCksID4xLjAgKGFtcGxpZnkpXG4gKi9cblJldmVyYi5wcm90b3R5cGUuc2V0RGVsYXlWb2x1bWUgPSBmdW5jdGlvbiAoZGVsYXlWb2x1bWUpe1xuICB0aGlzLmRlbGF5Vm9sdW1lID0gZGVsYXlWb2x1bWU7XG4gXG4gIHZhciBpO1xuXG4gIGZvciAoaSA9IDA7IGk8dGhpcy5OUl9PRl9TSU5HTEVERUxBWVM7IGkrKykge1xuICAgIHRoaXMuc2luZ2xlRGVsYXlzW2ldLnNldERlbGF5Vm9sdW1lKHRoaXMuZGVsYXlWb2x1bWUpO1xuICB9IFxuIFxuICBmb3IgKGkgPSAwOyBpPHRoaXMuTlJfT0ZfTVVMVElERUxBWVM7IGkrKykge1xuICAgIHRoaXMubXVsdGlEZWxheXNbaV0uc2V0RGVsYXlWb2x1bWUodGhpcy5kZWxheVZvbHVtZSk7XG4gIH0gXG59O1xuXG4vKipcbiAqIENoYW5nZSB0aGUgTG93IFBhc3MgZmlsdGVyIGZyZXF1ZW5jeS5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gZGFtcEZyZXF1ZW5jeSBsb3cgcGFzcyBmaWx0ZXIgZnJlcXVlbmN5LiAwIHRvIDQ0MTAwIChkZXBlbmRpbmcgb24geW91ciBtYXhpbXVtIHNhbXBsaW5nIGZyZXF1ZW5jeSlcbiAqL1xuUmV2ZXJiLnByb3RvdHlwZS5zZXREYW1wRnJlcXVlbmN5ID0gZnVuY3Rpb24gKGRhbXBGcmVxdWVuY3kpe1xuICB0aGlzLmRhbXBGcmVxdWVuY3kgPSBkYW1wRnJlcXVlbmN5O1xuIFxuICB0aGlzLkxPV1BBU1NMLnNldChkYW1wRnJlcXVlbmN5LCAwKTtcbiAgdGhpcy5MT1dQQVNTUi5zZXQoZGFtcEZyZXF1ZW5jeSwgMCk7IFxufTtcblxuLyoqXG4gKiBQcm9jZXNzIGEgZ2l2ZW4gaW50ZXJsZWF2ZWQgZmxvYXQgdmFsdWUgQXJyYXkgYW5kIGNvcGllcyBhbmQgYWRkcyB0aGUgcmV2ZXJiIHNpZ25hbC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBzYW1wbGVzIEFycmF5IGNvbnRhaW5pbmcgRmxvYXQgdmFsdWVzIG9yIGEgRmxvYXQzMkFycmF5XG4gKlxuICogQHJldHVybnMgQSBuZXcgRmxvYXQzMkFycmF5IGludGVybGVhdmVkIGJ1ZmZlci5cbiAqL1xuUmV2ZXJiLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gKGludGVybGVhdmVkU2FtcGxlcyl7IFxuICAvLyBOQi4gTWFrZSBhIGNvcHkgdG8gcHV0IGluIHRoZSBvdXRwdXQgc2FtcGxlcyB0byByZXR1cm4uXG4gIHZhciBvdXRwdXRTYW1wbGVzID0gbmV3IEZsb2F0MzJBcnJheShpbnRlcmxlYXZlZFNhbXBsZXMubGVuZ3RoKTtcbiBcbiAgLy8gUGVyZm9ybSBsb3cgcGFzcyBvbiB0aGUgaW5wdXQgc2FtcGxlcyB0byBtaW1pY2sgZGFtcFxuICB2YXIgbGVmdFJpZ2h0TWl4ID0gRFNQLmRlaW50ZXJsZWF2ZShpbnRlcmxlYXZlZFNhbXBsZXMpO1xuICB0aGlzLkxPV1BBU1NMLnByb2Nlc3MoIGxlZnRSaWdodE1peFtEU1AuTEVGVF0gKTtcbiAgdGhpcy5MT1dQQVNTUi5wcm9jZXNzKCBsZWZ0UmlnaHRNaXhbRFNQLlJJR0hUXSApOyBcbiAgdmFyIGZpbHRlcmVkU2FtcGxlcyA9IERTUC5pbnRlcmxlYXZlKGxlZnRSaWdodE1peFtEU1AuTEVGVF0sIGxlZnRSaWdodE1peFtEU1AuUklHSFRdKTtcblxuICB2YXIgaTtcblxuICAvLyBQcm9jZXNzIE11bHRpRGVsYXlzIGluIHBhcmFsbGVsXG4gIGZvciAoaSA9IDA7IGk8dGhpcy5OUl9PRl9NVUxUSURFTEFZUzsgaSsrKSB7XG4gICAgLy8gSW52ZXJ0IHRoZSBzaWduYWwgb2YgZXZlcnkgZXZlbiBtdWx0aURlbGF5XG4gICAgb3V0cHV0U2FtcGxlcyA9IERTUC5taXhTYW1wbGVCdWZmZXJzKG91dHB1dFNhbXBsZXMsIHRoaXMubXVsdGlEZWxheXNbaV0ucHJvY2VzcyhmaWx0ZXJlZFNhbXBsZXMpLCAyJWkgPT09IDAsIHRoaXMuTlJfT0ZfTVVMVElERUxBWVMpO1xuICB9XG4gXG4gIC8vIFByb2Nlc3MgU2luZ2xlRGVsYXlzIGluIHNlcmllc1xuICB2YXIgc2luZ2xlRGVsYXlTYW1wbGVzID0gbmV3IEZsb2F0MzJBcnJheShvdXRwdXRTYW1wbGVzLmxlbmd0aCk7XG4gIGZvciAoaSA9IDA7IGk8dGhpcy5OUl9PRl9TSU5HTEVERUxBWVM7IGkrKykge1xuICAgIC8vIEludmVydCB0aGUgc2lnbmFsIG9mIGV2ZXJ5IGV2ZW4gc2luZ2xlRGVsYXlcbiAgICBzaW5nbGVEZWxheVNhbXBsZXMgPSBEU1AubWl4U2FtcGxlQnVmZmVycyhzaW5nbGVEZWxheVNhbXBsZXMsIHRoaXMuc2luZ2xlRGVsYXlzW2ldLnByb2Nlc3Mob3V0cHV0U2FtcGxlcyksIDIlaSA9PT0gMCwgMSk7XG4gIH1cblxuICAvLyBBcHBseSB0aGUgdm9sdW1lIG9mIHRoZSByZXZlcmIgc2lnbmFsXG4gIGZvciAoaSA9IDA7IGk8c2luZ2xlRGVsYXlTYW1wbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgc2luZ2xlRGVsYXlTYW1wbGVzW2ldICo9IHRoaXMubWl4Vm9sdW1lO1xuICB9XG4gXG4gIC8vIE1peCB0aGUgb3JpZ2luYWwgc2lnbmFsIHdpdGggdGhlIHJldmVyYiBzaWduYWxcbiAgb3V0cHV0U2FtcGxlcyA9IERTUC5taXhTYW1wbGVCdWZmZXJzKHNpbmdsZURlbGF5U2FtcGxlcywgaW50ZXJsZWF2ZWRTYW1wbGVzLCAwLCAxKTtcblxuICAvLyBBcHBseSB0aGUgbWFzdGVyIHZvbHVtZSB0byB0aGUgY29tcGxldGUgc2lnbmFsXG4gIGZvciAoaSA9IDA7IGk8b3V0cHV0U2FtcGxlcy5sZW5ndGg7IGkrKykge1xuICAgIG91dHB1dFNhbXBsZXNbaV0gKj0gdGhpcy5tYXN0ZXJWb2x1bWU7XG4gIH1cbiAgIFxuICByZXR1cm4gb3V0cHV0U2FtcGxlcztcbn07XG5cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCIvVXNlcnMvdHR0L1dvcmsvRGV2L3NwZWN0cnVtL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2luc2VydC1tb2R1bGUtZ2xvYmFscy9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2RzcC9kc3AuanNcIixcIi8uLi8uLi9ub2RlX21vZHVsZXMvZHNwXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuLyoqXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBBdXRob3I6ICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIExpY2Vuc2U6ICBNSVRcbiAqXG4gKiBgbnBtIGluc3RhbGwgYnVmZmVyYFxuICovXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5fdXNlVHlwZWRBcnJheXNgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAoY29tcGF0aWJsZSBkb3duIHRvIElFNilcbiAqL1xuQnVmZmVyLl91c2VUeXBlZEFycmF5cyA9IChmdW5jdGlvbiAoKSB7XG4gICAvLyBEZXRlY3QgaWYgYnJvd3NlciBzdXBwb3J0cyBUeXBlZCBBcnJheXMuIFN1cHBvcnRlZCBicm93c2VycyBhcmUgSUUgMTArLFxuICAgLy8gRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKywgT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIEFycmF5QnVmZmVyICE9PSAnZnVuY3Rpb24nKVxuICAgIHJldHVybiBmYWxzZVxuXG4gIC8vIERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBhZGRpbmcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzPyBJZlxuICAvLyBub3QsIHRoZW4gdGhhdCdzIHRoZSBzYW1lIGFzIG5vIGBVaW50OEFycmF5YCBzdXBwb3J0LiBXZSBuZWVkIHRvIGJlIGFibGUgdG9cbiAgLy8gYWRkIGFsbCB0aGUgbm9kZSBCdWZmZXIgQVBJIG1ldGhvZHMuXG4gIC8vIEJ1ZyBpbiBGaXJlZm94IDQtMjksIG5vdyBmaXhlZDogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDApXG4gICAgYXJyLmZvbyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH1cbiAgICByZXR1cm4gNDIgPT09IGFyci5mb28oKSAmJlxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nIC8vIENocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn0pKClcblxuLyoqXG4gKiBDbGFzczogQnVmZmVyXG4gKiA9PT09PT09PT09PT09XG4gKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBhcmUgYXVnbWVudGVkXG4gKiB3aXRoIGZ1bmN0aW9uIHByb3BlcnRpZXMgZm9yIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBBUEkgZnVuY3Rpb25zLiBXZSB1c2VcbiAqIGBVaW50OEFycmF5YCBzbyB0aGF0IHNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0IHJldHVybnNcbiAqIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIEJ5IGF1Z21lbnRpbmcgdGhlIGluc3RhbmNlcywgd2UgY2FuIGF2b2lkIG1vZGlmeWluZyB0aGUgYFVpbnQ4QXJyYXlgXG4gKiBwcm90b3R5cGUuXG4gKi9cbmZ1bmN0aW9uIEJ1ZmZlciAoc3ViamVjdCwgZW5jb2RpbmcsIG5vWmVybykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSlcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihzdWJqZWN0LCBlbmNvZGluZywgbm9aZXJvKVxuXG4gIHZhciB0eXBlID0gdHlwZW9mIHN1YmplY3RcblxuICAvLyBXb3JrYXJvdW5kOiBub2RlJ3MgYmFzZTY0IGltcGxlbWVudGF0aW9uIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBzdHJpbmdzXG4gIC8vIHdoaWxlIGJhc2U2NC1qcyBkb2VzIG5vdC5cbiAgaWYgKGVuY29kaW5nID09PSAnYmFzZTY0JyAmJiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgIHN1YmplY3QgPSBzdHJpbmd0cmltKHN1YmplY3QpXG4gICAgd2hpbGUgKHN1YmplY3QubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgICAgc3ViamVjdCA9IHN1YmplY3QgKyAnPSdcbiAgICB9XG4gIH1cblxuICAvLyBGaW5kIHRoZSBsZW5ndGhcbiAgdmFyIGxlbmd0aFxuICBpZiAodHlwZSA9PT0gJ251bWJlcicpXG4gICAgbGVuZ3RoID0gY29lcmNlKHN1YmplY3QpXG4gIGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnKVxuICAgIGxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHN1YmplY3QsIGVuY29kaW5nKVxuICBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JylcbiAgICBsZW5ndGggPSBjb2VyY2Uoc3ViamVjdC5sZW5ndGgpIC8vIGFzc3VtZSB0aGF0IG9iamVjdCBpcyBhcnJheS1saWtlXG4gIGVsc2VcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG5lZWRzIHRvIGJlIGEgbnVtYmVyLCBhcnJheSBvciBzdHJpbmcuJylcblxuICB2YXIgYnVmXG4gIGlmIChCdWZmZXIuX3VzZVR5cGVkQXJyYXlzKSB7XG4gICAgLy8gUHJlZmVycmVkOiBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIGJ1ZiA9IEJ1ZmZlci5fYXVnbWVudChuZXcgVWludDhBcnJheShsZW5ndGgpKVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gVEhJUyBpbnN0YW5jZSBvZiBCdWZmZXIgKGNyZWF0ZWQgYnkgYG5ld2ApXG4gICAgYnVmID0gdGhpc1xuICAgIGJ1Zi5sZW5ndGggPSBsZW5ndGhcbiAgICBidWYuX2lzQnVmZmVyID0gdHJ1ZVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKEJ1ZmZlci5fdXNlVHlwZWRBcnJheXMgJibCoHR5cGVvZiBzdWJqZWN0LmJ5dGVMZW5ndGggPT09ICdudW1iZXInKSB7XG4gICAgLy8gU3BlZWQgb3B0aW1pemF0aW9uIC0tIHVzZSBzZXQgaWYgd2UncmUgY29weWluZyBmcm9tIGEgdHlwZWQgYXJyYXlcbiAgICBidWYuX3NldChzdWJqZWN0KVxuICB9IGVsc2UgaWYgKGlzQXJyYXlpc2goc3ViamVjdCkpIHtcbiAgICAvLyBUcmVhdCBhcnJheS1pc2ggb2JqZWN0cyBhcyBhIGJ5dGUgYXJyYXlcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoc3ViamVjdCkpXG4gICAgICAgIGJ1ZltpXSA9IHN1YmplY3QucmVhZFVJbnQ4KGkpXG4gICAgICBlbHNlXG4gICAgICAgIGJ1ZltpXSA9IHN1YmplY3RbaV1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBidWYud3JpdGUoc3ViamVjdCwgMCwgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgIUJ1ZmZlci5fdXNlVHlwZWRBcnJheXMgJiYgIW5vWmVybykge1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgYnVmW2ldID0gMFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWZcbn1cblxuLy8gU1RBVElDIE1FVEhPRFNcbi8vID09PT09PT09PT09PT09XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICdyYXcnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiAoYikge1xuICByZXR1cm4gISEoYiAhPT0gbnVsbCAmJiBiICE9PSB1bmRlZmluZWQgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gKHN0ciwgZW5jb2RpbmcpIHtcbiAgdmFyIHJldFxuICBzdHIgPSBzdHIgKyAnJ1xuICBzd2l0Y2ggKGVuY29kaW5nIHx8ICd1dGY4Jykge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgICByZXQgPSBzdHIubGVuZ3RoIC8gMlxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgICByZXQgPSB1dGY4VG9CeXRlcyhzdHIpLmxlbmd0aFxuICAgICAgYnJlYWtcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdyYXcnOlxuICAgICAgcmV0ID0gc3RyLmxlbmd0aFxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgcmV0ID0gYmFzZTY0VG9CeXRlcyhzdHIpLmxlbmd0aFxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0ID0gc3RyLmxlbmd0aCAqIDJcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZycpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gKGxpc3QsIHRvdGFsTGVuZ3RoKSB7XG4gIGFzc2VydChpc0FycmF5KGxpc3QpLCAnVXNhZ2U6IEJ1ZmZlci5jb25jYXQobGlzdCwgW3RvdGFsTGVuZ3RoXSlcXG4nICtcbiAgICAgICdsaXN0IHNob3VsZCBiZSBhbiBBcnJheS4nKVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKDApXG4gIH0gZWxzZSBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gbGlzdFswXVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB0b3RhbExlbmd0aCAhPT0gJ251bWJlcicpIHtcbiAgICB0b3RhbExlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgdG90YWxMZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcih0b3RhbExlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV1cbiAgICBpdGVtLmNvcHkoYnVmLCBwb3MpXG4gICAgcG9zICs9IGl0ZW0ubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG4vLyBCVUZGRVIgSU5TVEFOQ0UgTUVUSE9EU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gX2hleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgYXNzZXJ0KHN0ckxlbiAlIDIgPT09IDAsICdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYnl0ZSA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBhc3NlcnQoIWlzTmFOKGJ5dGUpLCAnSW52YWxpZCBoZXggc3RyaW5nJylcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlXG4gIH1cbiAgQnVmZmVyLl9jaGFyc1dyaXR0ZW4gPSBpICogMlxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBfdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IEJ1ZmZlci5fY2hhcnNXcml0dGVuID1cbiAgICBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuZnVuY3Rpb24gX2FzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICB2YXIgY2hhcnNXcml0dGVuID0gQnVmZmVyLl9jaGFyc1dyaXR0ZW4gPVxuICAgIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuZnVuY3Rpb24gX2JpbmFyeVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIF9hc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gX2Jhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IEJ1ZmZlci5fY2hhcnNXcml0dGVuID1cbiAgICBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbiAgcmV0dXJuIGNoYXJzV3JpdHRlblxufVxuXG5mdW5jdGlvbiBfdXRmMTZsZVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IEJ1ZmZlci5fY2hhcnNXcml0dGVuID1cbiAgICBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBTdXBwb3J0IGJvdGggKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKVxuICAvLyBhbmQgdGhlIGxlZ2FjeSAoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpXG4gIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgaWYgKCFpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2UgeyAgLy8gbGVnYWN5XG4gICAgdmFyIHN3YXAgPSBlbmNvZGluZ1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgb2Zmc2V0ID0gbGVuZ3RoXG4gICAgbGVuZ3RoID0gc3dhcFxuICB9XG5cbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZyB8fCAndXRmOCcpLnRvTG93ZXJDYXNlKClcblxuICB2YXIgcmV0XG4gIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgICAgcmV0ID0gX2hleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHJldCA9IF91dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYXNjaWknOlxuICAgICAgcmV0ID0gX2FzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgIHJldCA9IF9iaW5hcnlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgcmV0ID0gX2Jhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXQgPSBfdXRmMTZsZVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2RpbmcnKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZyB8fCAndXRmOCcpLnRvTG93ZXJDYXNlKClcbiAgc3RhcnQgPSBOdW1iZXIoc3RhcnQpIHx8IDBcbiAgZW5kID0gKGVuZCAhPT0gdW5kZWZpbmVkKVxuICAgID8gTnVtYmVyKGVuZClcbiAgICA6IGVuZCA9IHNlbGYubGVuZ3RoXG5cbiAgLy8gRmFzdHBhdGggZW1wdHkgc3RyaW5nc1xuICBpZiAoZW5kID09PSBzdGFydClcbiAgICByZXR1cm4gJydcblxuICB2YXIgcmV0XG4gIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgICAgcmV0ID0gX2hleFNsaWNlKHNlbGYsIHN0YXJ0LCBlbmQpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHJldCA9IF91dGY4U2xpY2Uoc2VsZiwgc3RhcnQsIGVuZClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYXNjaWknOlxuICAgICAgcmV0ID0gX2FzY2lpU2xpY2Uoc2VsZiwgc3RhcnQsIGVuZClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgIHJldCA9IF9iaW5hcnlTbGljZShzZWxmLCBzdGFydCwgZW5kKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgcmV0ID0gX2Jhc2U2NFNsaWNlKHNlbGYsIHN0YXJ0LCBlbmQpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXQgPSBfdXRmMTZsZVNsaWNlKHNlbGYsIHN0YXJ0LCBlbmQpXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2RpbmcnKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0X3N0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzXG5cbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKCF0YXJnZXRfc3RhcnQpIHRhcmdldF9zdGFydCA9IDBcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVyblxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCBzb3VyY2UubGVuZ3RoID09PSAwKSByZXR1cm5cblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGFzc2VydChlbmQgPj0gc3RhcnQsICdzb3VyY2VFbmQgPCBzb3VyY2VTdGFydCcpXG4gIGFzc2VydCh0YXJnZXRfc3RhcnQgPj0gMCAmJiB0YXJnZXRfc3RhcnQgPCB0YXJnZXQubGVuZ3RoLFxuICAgICAgJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBhc3NlcnQoc3RhcnQgPj0gMCAmJiBzdGFydCA8IHNvdXJjZS5sZW5ndGgsICdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgYXNzZXJ0KGVuZCA+PSAwICYmIGVuZCA8PSBzb3VyY2UubGVuZ3RoLCAnc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aClcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldF9zdGFydCA8IGVuZCAtIHN0YXJ0KVxuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRfc3RhcnQgKyBzdGFydFxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuXG4gIGlmIChsZW4gPCAxMDAgfHwgIUJ1ZmZlci5fdXNlVHlwZWRBcnJheXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRfc3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0Ll9zZXQodGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLCB0YXJnZXRfc3RhcnQpXG4gIH1cbn1cblxuZnVuY3Rpb24gX2Jhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiBfdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJlcyA9ICcnXG4gIHZhciB0bXAgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICBpZiAoYnVmW2ldIDw9IDB4N0YpIHtcbiAgICAgIHJlcyArPSBkZWNvZGVVdGY4Q2hhcih0bXApICsgU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gICAgICB0bXAgPSAnJ1xuICAgIH0gZWxzZSB7XG4gICAgICB0bXAgKz0gJyUnICsgYnVmW2ldLnRvU3RyaW5nKDE2KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXMgKyBkZWNvZGVVdGY4Q2hhcih0bXApXG59XG5cbmZ1bmN0aW9uIF9hc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKylcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gX2JpbmFyeVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIF9hc2NpaVNsaWNlKGJ1Ziwgc3RhcnQsIGVuZClcbn1cblxuZnVuY3Rpb24gX2hleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gX3V0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSsxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSBjbGFtcChzdGFydCwgbGVuLCAwKVxuICBlbmQgPSBjbGFtcChlbmQsIGxlbiwgbGVuKVxuXG4gIGlmIChCdWZmZXIuX3VzZVR5cGVkQXJyYXlzKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5fYXVnbWVudCh0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpKVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgdmFyIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZCwgdHJ1ZSlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyBpKyspIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgICByZXR1cm4gbmV3QnVmXG4gIH1cbn1cblxuLy8gYGdldGAgd2lsbCBiZSByZW1vdmVkIGluIE5vZGUgMC4xMytcbkJ1ZmZlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKG9mZnNldCkge1xuICBjb25zb2xlLmxvZygnLmdldCgpIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB1c2luZyBhcnJheSBpbmRleGVzIGluc3RlYWQuJylcbiAgcmV0dXJuIHRoaXMucmVhZFVJbnQ4KG9mZnNldClcbn1cblxuLy8gYHNldGAgd2lsbCBiZSByZW1vdmVkIGluIE5vZGUgMC4xMytcbkJ1ZmZlci5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHYsIG9mZnNldCkge1xuICBjb25zb2xlLmxvZygnLnNldCgpIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB1c2luZyBhcnJheSBpbmRleGVzIGluc3RlYWQuJylcbiAgcmV0dXJuIHRoaXMud3JpdGVVSW50OCh2LCBvZmZzZXQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCA8IHRoaXMubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+PSB0aGlzLmxlbmd0aClcbiAgICByZXR1cm5cblxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbmZ1bmN0aW9uIF9yZWFkVUludDE2IChidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDEgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgdmFyIHZhbFxuICBpZiAobGl0dGxlRW5kaWFuKSB7XG4gICAgdmFsID0gYnVmW29mZnNldF1cbiAgICBpZiAob2Zmc2V0ICsgMSA8IGxlbilcbiAgICAgIHZhbCB8PSBidWZbb2Zmc2V0ICsgMV0gPDwgOFxuICB9IGVsc2Uge1xuICAgIHZhbCA9IGJ1ZltvZmZzZXRdIDw8IDhcbiAgICBpZiAob2Zmc2V0ICsgMSA8IGxlbilcbiAgICAgIHZhbCB8PSBidWZbb2Zmc2V0ICsgMV1cbiAgfVxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkVUludDE2KHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkVUludDE2KHRoaXMsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiBfcmVhZFVJbnQzMiAoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAzIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIHZhciB2YWxcbiAgaWYgKGxpdHRsZUVuZGlhbikge1xuICAgIGlmIChvZmZzZXQgKyAyIDwgbGVuKVxuICAgICAgdmFsID0gYnVmW29mZnNldCArIDJdIDw8IDE2XG4gICAgaWYgKG9mZnNldCArIDEgPCBsZW4pXG4gICAgICB2YWwgfD0gYnVmW29mZnNldCArIDFdIDw8IDhcbiAgICB2YWwgfD0gYnVmW29mZnNldF1cbiAgICBpZiAob2Zmc2V0ICsgMyA8IGxlbilcbiAgICAgIHZhbCA9IHZhbCArIChidWZbb2Zmc2V0ICsgM10gPDwgMjQgPj4+IDApXG4gIH0gZWxzZSB7XG4gICAgaWYgKG9mZnNldCArIDEgPCBsZW4pXG4gICAgICB2YWwgPSBidWZbb2Zmc2V0ICsgMV0gPDwgMTZcbiAgICBpZiAob2Zmc2V0ICsgMiA8IGxlbilcbiAgICAgIHZhbCB8PSBidWZbb2Zmc2V0ICsgMl0gPDwgOFxuICAgIGlmIChvZmZzZXQgKyAzIDwgbGVuKVxuICAgICAgdmFsIHw9IGJ1ZltvZmZzZXQgKyAzXVxuICAgIHZhbCA9IHZhbCArIChidWZbb2Zmc2V0XSA8PCAyNCA+Pj4gMClcbiAgfVxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkVUludDMyKHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkVUludDMyKHRoaXMsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsXG4gICAgICAgICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCA8IHRoaXMubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+PSB0aGlzLmxlbmd0aClcbiAgICByZXR1cm5cblxuICB2YXIgbmVnID0gdGhpc1tvZmZzZXRdICYgMHg4MFxuICBpZiAobmVnKVxuICAgIHJldHVybiAoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTFcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuZnVuY3Rpb24gX3JlYWRJbnQxNiAoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAxIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIHZhciB2YWwgPSBfcmVhZFVJbnQxNihidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCB0cnVlKVxuICB2YXIgbmVnID0gdmFsICYgMHg4MDAwXG4gIGlmIChuZWcpXG4gICAgcmV0dXJuICgweGZmZmYgLSB2YWwgKyAxKSAqIC0xXG4gIGVsc2VcbiAgICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRJbnQxNih0aGlzLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkSW50MTYodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF9yZWFkSW50MzIgKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgMyA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gcmVhZCBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICB2YXIgdmFsID0gX3JlYWRVSW50MzIoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgdHJ1ZSlcbiAgdmFyIG5lZyA9IHZhbCAmIDB4ODAwMDAwMDBcbiAgaWYgKG5lZylcbiAgICByZXR1cm4gKDB4ZmZmZmZmZmYgLSB2YWwgKyAxKSAqIC0xXG4gIGVsc2VcbiAgICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRJbnQzMih0aGlzLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkSW50MzIodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF9yZWFkRmxvYXQgKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCArIDMgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgcmV0dXJuIGllZWU3NTQucmVhZChidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZEZsb2F0KHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRGbG9hdCh0aGlzLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gX3JlYWREb3VibGUgKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCArIDcgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgcmV0dXJuIGllZWU3NTQucmVhZChidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWREb3VibGUodGhpcywgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWREb3VibGUodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgPCB0aGlzLmxlbmd0aCwgJ3RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZ1aW50KHZhbHVlLCAweGZmKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+PSB0aGlzLmxlbmd0aCkgcmV0dXJuXG5cbiAgdGhpc1tvZmZzZXRdID0gdmFsdWVcbn1cblxuZnVuY3Rpb24gX3dyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpXG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDEgPCBidWYubGVuZ3RoLCAndHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgICB2ZXJpZnVpbnQodmFsdWUsIDB4ZmZmZilcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4obGVuIC0gb2Zmc2V0LCAyKTsgaSA8IGo7IGkrKykge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9XG4gICAgICAgICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAgICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gX3dyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpXG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDMgPCBidWYubGVuZ3RoLCAndHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgICB2ZXJpZnVpbnQodmFsdWUsIDB4ZmZmZmZmZmYpXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGxlbiAtIG9mZnNldCwgNCk7IGkgPCBqOyBpKyspIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPVxuICAgICAgICAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCA8IHRoaXMubGVuZ3RoLCAnVHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgICB2ZXJpZnNpbnQodmFsdWUsIDB4N2YsIC0weDgwKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+PSB0aGlzLmxlbmd0aClcbiAgICByZXR1cm5cblxuICBpZiAodmFsdWUgPj0gMClcbiAgICB0aGlzLndyaXRlVUludDgodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpXG4gIGVsc2VcbiAgICB0aGlzLndyaXRlVUludDgoMHhmZiArIHZhbHVlICsgMSwgb2Zmc2V0LCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gX3dyaXRlSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJylcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgMSA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICAgIHZlcmlmc2ludCh2YWx1ZSwgMHg3ZmZmLCAtMHg4MDAwKVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgaWYgKHZhbHVlID49IDApXG4gICAgX3dyaXRlVUludDE2KGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydClcbiAgZWxzZVxuICAgIF93cml0ZVVJbnQxNihidWYsIDB4ZmZmZiArIHZhbHVlICsgMSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiBfd3JpdGVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKVxuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAzIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZzaW50KHZhbHVlLCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIGlmICh2YWx1ZSA+PSAwKVxuICAgIF93cml0ZVVJbnQzMihidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpXG4gIGVsc2VcbiAgICBfd3JpdGVVSW50MzIoYnVmLCAweGZmZmZmZmZmICsgdmFsdWUgKyAxLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF93cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpXG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDMgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgICB2ZXJpZklFRUU3NTQodmFsdWUsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF93cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKVxuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyA3IDwgYnVmLmxlbmd0aCxcbiAgICAgICAgJ1RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZJRUVFNzU0KHZhbHVlLCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBmaWxsKHZhbHVlLCBzdGFydD0wLCBlbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uICh2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXZhbHVlKSB2YWx1ZSA9IDBcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kKSBlbmQgPSB0aGlzLmxlbmd0aFxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5jaGFyQ29kZUF0KDApXG4gIH1cblxuICBhc3NlcnQodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsdWUpLCAndmFsdWUgaXMgbm90IGEgbnVtYmVyJylcbiAgYXNzZXJ0KGVuZCA+PSBzdGFydCwgJ2VuZCA8IHN0YXJ0JylcblxuICAvLyBGaWxsIDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVyblxuICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVyblxuXG4gIGFzc2VydChzdGFydCA+PSAwICYmIHN0YXJ0IDwgdGhpcy5sZW5ndGgsICdzdGFydCBvdXQgb2YgYm91bmRzJylcbiAgYXNzZXJ0KGVuZCA+PSAwICYmIGVuZCA8PSB0aGlzLmxlbmd0aCwgJ2VuZCBvdXQgb2YgYm91bmRzJylcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIHRoaXNbaV0gPSB2YWx1ZVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG91dCA9IFtdXG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgb3V0W2ldID0gdG9IZXgodGhpc1tpXSlcbiAgICBpZiAoaSA9PT0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUykge1xuICAgICAgb3V0W2kgKyAxXSA9ICcuLi4nXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIG91dC5qb2luKCcgJykgKyAnPidcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGBBcnJheUJ1ZmZlcmAgd2l0aCB0aGUgKmNvcGllZCogbWVtb3J5IG9mIHRoZSBidWZmZXIgaW5zdGFuY2UuXG4gKiBBZGRlZCBpbiBOb2RlIDAuMTIuIE9ubHkgYXZhaWxhYmxlIGluIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBBcnJheUJ1ZmZlci5cbiAqL1xuQnVmZmVyLnByb3RvdHlwZS50b0FycmF5QnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoQnVmZmVyLl91c2VUeXBlZEFycmF5cykge1xuICAgICAgcmV0dXJuIChuZXcgQnVmZmVyKHRoaXMpKS5idWZmZXJcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGJ1ZiA9IG5ldyBVaW50OEFycmF5KHRoaXMubGVuZ3RoKVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGJ1Zi5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSlcbiAgICAgICAgYnVmW2ldID0gdGhpc1tpXVxuICAgICAgcmV0dXJuIGJ1Zi5idWZmZXJcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCdWZmZXIudG9BcnJheUJ1ZmZlciBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlcicpXG4gIH1cbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG52YXIgQlAgPSBCdWZmZXIucHJvdG90eXBlXG5cbi8qKlxuICogQXVnbWVudCBhIFVpbnQ4QXJyYXkgKmluc3RhbmNlKiAobm90IHRoZSBVaW50OEFycmF5IGNsYXNzISkgd2l0aCBCdWZmZXIgbWV0aG9kc1xuICovXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5faXNCdWZmZXIgPSB0cnVlXG5cbiAgLy8gc2F2ZSByZWZlcmVuY2UgdG8gb3JpZ2luYWwgVWludDhBcnJheSBnZXQvc2V0IG1ldGhvZHMgYmVmb3JlIG92ZXJ3cml0aW5nXG4gIGFyci5fZ2V0ID0gYXJyLmdldFxuICBhcnIuX3NldCA9IGFyci5zZXRcblxuICAvLyBkZXByZWNhdGVkLCB3aWxsIGJlIHJlbW92ZWQgaW4gbm9kZSAwLjEzK1xuICBhcnIuZ2V0ID0gQlAuZ2V0XG4gIGFyci5zZXQgPSBCUC5zZXRcblxuICBhcnIud3JpdGUgPSBCUC53cml0ZVxuICBhcnIudG9TdHJpbmcgPSBCUC50b1N0cmluZ1xuICBhcnIudG9Mb2NhbGVTdHJpbmcgPSBCUC50b1N0cmluZ1xuICBhcnIudG9KU09OID0gQlAudG9KU09OXG4gIGFyci5jb3B5ID0gQlAuY29weVxuICBhcnIuc2xpY2UgPSBCUC5zbGljZVxuICBhcnIucmVhZFVJbnQ4ID0gQlAucmVhZFVJbnQ4XG4gIGFyci5yZWFkVUludDE2TEUgPSBCUC5yZWFkVUludDE2TEVcbiAgYXJyLnJlYWRVSW50MTZCRSA9IEJQLnJlYWRVSW50MTZCRVxuICBhcnIucmVhZFVJbnQzMkxFID0gQlAucmVhZFVJbnQzMkxFXG4gIGFyci5yZWFkVUludDMyQkUgPSBCUC5yZWFkVUludDMyQkVcbiAgYXJyLnJlYWRJbnQ4ID0gQlAucmVhZEludDhcbiAgYXJyLnJlYWRJbnQxNkxFID0gQlAucmVhZEludDE2TEVcbiAgYXJyLnJlYWRJbnQxNkJFID0gQlAucmVhZEludDE2QkVcbiAgYXJyLnJlYWRJbnQzMkxFID0gQlAucmVhZEludDMyTEVcbiAgYXJyLnJlYWRJbnQzMkJFID0gQlAucmVhZEludDMyQkVcbiAgYXJyLnJlYWRGbG9hdExFID0gQlAucmVhZEZsb2F0TEVcbiAgYXJyLnJlYWRGbG9hdEJFID0gQlAucmVhZEZsb2F0QkVcbiAgYXJyLnJlYWREb3VibGVMRSA9IEJQLnJlYWREb3VibGVMRVxuICBhcnIucmVhZERvdWJsZUJFID0gQlAucmVhZERvdWJsZUJFXG4gIGFyci53cml0ZVVJbnQ4ID0gQlAud3JpdGVVSW50OFxuICBhcnIud3JpdGVVSW50MTZMRSA9IEJQLndyaXRlVUludDE2TEVcbiAgYXJyLndyaXRlVUludDE2QkUgPSBCUC53cml0ZVVJbnQxNkJFXG4gIGFyci53cml0ZVVJbnQzMkxFID0gQlAud3JpdGVVSW50MzJMRVxuICBhcnIud3JpdGVVSW50MzJCRSA9IEJQLndyaXRlVUludDMyQkVcbiAgYXJyLndyaXRlSW50OCA9IEJQLndyaXRlSW50OFxuICBhcnIud3JpdGVJbnQxNkxFID0gQlAud3JpdGVJbnQxNkxFXG4gIGFyci53cml0ZUludDE2QkUgPSBCUC53cml0ZUludDE2QkVcbiAgYXJyLndyaXRlSW50MzJMRSA9IEJQLndyaXRlSW50MzJMRVxuICBhcnIud3JpdGVJbnQzMkJFID0gQlAud3JpdGVJbnQzMkJFXG4gIGFyci53cml0ZUZsb2F0TEUgPSBCUC53cml0ZUZsb2F0TEVcbiAgYXJyLndyaXRlRmxvYXRCRSA9IEJQLndyaXRlRmxvYXRCRVxuICBhcnIud3JpdGVEb3VibGVMRSA9IEJQLndyaXRlRG91YmxlTEVcbiAgYXJyLndyaXRlRG91YmxlQkUgPSBCUC53cml0ZURvdWJsZUJFXG4gIGFyci5maWxsID0gQlAuZmlsbFxuICBhcnIuaW5zcGVjdCA9IEJQLmluc3BlY3RcbiAgYXJyLnRvQXJyYXlCdWZmZXIgPSBCUC50b0FycmF5QnVmZmVyXG5cbiAgcmV0dXJuIGFyclxufVxuXG4vLyBzbGljZShzdGFydCwgZW5kKVxuZnVuY3Rpb24gY2xhbXAgKGluZGV4LCBsZW4sIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJykgcmV0dXJuIGRlZmF1bHRWYWx1ZVxuICBpbmRleCA9IH5+aW5kZXg7ICAvLyBDb2VyY2UgdG8gaW50ZWdlci5cbiAgaWYgKGluZGV4ID49IGxlbikgcmV0dXJuIGxlblxuICBpZiAoaW5kZXggPj0gMCkgcmV0dXJuIGluZGV4XG4gIGluZGV4ICs9IGxlblxuICBpZiAoaW5kZXggPj0gMCkgcmV0dXJuIGluZGV4XG4gIHJldHVybiAwXG59XG5cbmZ1bmN0aW9uIGNvZXJjZSAobGVuZ3RoKSB7XG4gIC8vIENvZXJjZSBsZW5ndGggdG8gYSBudW1iZXIgKHBvc3NpYmx5IE5hTiksIHJvdW5kIHVwXG4gIC8vIGluIGNhc2UgaXQncyBmcmFjdGlvbmFsIChlLmcuIDEyMy40NTYpIHRoZW4gZG8gYVxuICAvLyBkb3VibGUgbmVnYXRlIHRvIGNvZXJjZSBhIE5hTiB0byAwLiBFYXN5LCByaWdodD9cbiAgbGVuZ3RoID0gfn5NYXRoLmNlaWwoK2xlbmd0aClcbiAgcmV0dXJuIGxlbmd0aCA8IDAgPyAwIDogbGVuZ3RoXG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkgKHN1YmplY3QpIHtcbiAgcmV0dXJuIChBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChzdWJqZWN0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzdWJqZWN0KSA9PT0gJ1tvYmplY3QgQXJyYXldJ1xuICB9KShzdWJqZWN0KVxufVxuXG5mdW5jdGlvbiBpc0FycmF5aXNoIChzdWJqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5KHN1YmplY3QpIHx8IEJ1ZmZlci5pc0J1ZmZlcihzdWJqZWN0KSB8fFxuICAgICAgc3ViamVjdCAmJiB0eXBlb2Ygc3ViamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIHR5cGVvZiBzdWJqZWN0Lmxlbmd0aCA9PT0gJ251bWJlcidcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIHZhciBiID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBpZiAoYiA8PSAweDdGKVxuICAgICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkpXG4gICAgZWxzZSB7XG4gICAgICB2YXIgc3RhcnQgPSBpXG4gICAgICBpZiAoYiA+PSAweEQ4MDAgJiYgYiA8PSAweERGRkYpIGkrK1xuICAgICAgdmFyIGggPSBlbmNvZGVVUklDb21wb25lbnQoc3RyLnNsaWNlKHN0YXJ0LCBpKzEpKS5zdWJzdHIoMSkuc3BsaXQoJyUnKVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBoLmxlbmd0aDsgaisrKVxuICAgICAgICBieXRlQXJyYXkucHVzaChwYXJzZUludChoW2pdLCAxNikpXG4gICAgfVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KHN0cilcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBwb3NcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSlcbiAgICAgIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gZGVjb2RlVXRmOENoYXIgKHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSgweEZGRkQpIC8vIFVURiA4IGludmFsaWQgY2hhclxuICB9XG59XG5cbi8qXG4gKiBXZSBoYXZlIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSB2YWx1ZSBpcyBhIHZhbGlkIGludGVnZXIuIFRoaXMgbWVhbnMgdGhhdCBpdFxuICogaXMgbm9uLW5lZ2F0aXZlLiBJdCBoYXMgbm8gZnJhY3Rpb25hbCBjb21wb25lbnQgYW5kIHRoYXQgaXQgZG9lcyBub3RcbiAqIGV4Y2VlZCB0aGUgbWF4aW11bSBhbGxvd2VkIHZhbHVlLlxuICovXG5mdW5jdGlvbiB2ZXJpZnVpbnQgKHZhbHVlLCBtYXgpIHtcbiAgYXNzZXJ0KHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsICdjYW5ub3Qgd3JpdGUgYSBub24tbnVtYmVyIGFzIGEgbnVtYmVyJylcbiAgYXNzZXJ0KHZhbHVlID49IDAsICdzcGVjaWZpZWQgYSBuZWdhdGl2ZSB2YWx1ZSBmb3Igd3JpdGluZyBhbiB1bnNpZ25lZCB2YWx1ZScpXG4gIGFzc2VydCh2YWx1ZSA8PSBtYXgsICd2YWx1ZSBpcyBsYXJnZXIgdGhhbiBtYXhpbXVtIHZhbHVlIGZvciB0eXBlJylcbiAgYXNzZXJ0KE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZSwgJ3ZhbHVlIGhhcyBhIGZyYWN0aW9uYWwgY29tcG9uZW50Jylcbn1cblxuZnVuY3Rpb24gdmVyaWZzaW50ICh2YWx1ZSwgbWF4LCBtaW4pIHtcbiAgYXNzZXJ0KHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsICdjYW5ub3Qgd3JpdGUgYSBub24tbnVtYmVyIGFzIGEgbnVtYmVyJylcbiAgYXNzZXJ0KHZhbHVlIDw9IG1heCwgJ3ZhbHVlIGxhcmdlciB0aGFuIG1heGltdW0gYWxsb3dlZCB2YWx1ZScpXG4gIGFzc2VydCh2YWx1ZSA+PSBtaW4sICd2YWx1ZSBzbWFsbGVyIHRoYW4gbWluaW11bSBhbGxvd2VkIHZhbHVlJylcbiAgYXNzZXJ0KE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZSwgJ3ZhbHVlIGhhcyBhIGZyYWN0aW9uYWwgY29tcG9uZW50Jylcbn1cblxuZnVuY3Rpb24gdmVyaWZJRUVFNzU0ICh2YWx1ZSwgbWF4LCBtaW4pIHtcbiAgYXNzZXJ0KHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsICdjYW5ub3Qgd3JpdGUgYSBub24tbnVtYmVyIGFzIGEgbnVtYmVyJylcbiAgYXNzZXJ0KHZhbHVlIDw9IG1heCwgJ3ZhbHVlIGxhcmdlciB0aGFuIG1heGltdW0gYWxsb3dlZCB2YWx1ZScpXG4gIGFzc2VydCh2YWx1ZSA+PSBtaW4sICd2YWx1ZSBzbWFsbGVyIHRoYW4gbWluaW11bSBhbGxvd2VkIHZhbHVlJylcbn1cblxuZnVuY3Rpb24gYXNzZXJ0ICh0ZXN0LCBtZXNzYWdlKSB7XG4gIGlmICghdGVzdCkgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UgfHwgJ0ZhaWxlZCBhc3NlcnRpb24nKVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcIi9Vc2Vycy90dHQvV29yay9EZXYvc3BlY3RydW0vbm9kZV9tb2R1bGVzL2d1bHAtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvaW5zZXJ0LW1vZHVsZS1nbG9iYWxzL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLi8uLi9ub2RlX21vZHVsZXMvZ3VscC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanNcIixcIi8uLi8uLi9ub2RlX21vZHVsZXMvZ3VscC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9idWZmZXJcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG52YXIgbG9va3VwID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nO1xuXG47KGZ1bmN0aW9uIChleHBvcnRzKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuICB2YXIgQXJyID0gKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJylcbiAgICA/IFVpbnQ4QXJyYXlcbiAgICA6IEFycmF5XG5cblx0dmFyIFpFUk8gICA9ICcwJy5jaGFyQ29kZUF0KDApXG5cdHZhciBQTFVTICAgPSAnKycuY2hhckNvZGVBdCgwKVxuXHR2YXIgU0xBU0ggID0gJy8nLmNoYXJDb2RlQXQoMClcblx0dmFyIE5VTUJFUiA9ICcwJy5jaGFyQ29kZUF0KDApXG5cdHZhciBMT1dFUiAgPSAnYScuY2hhckNvZGVBdCgwKVxuXHR2YXIgVVBQRVIgID0gJ0EnLmNoYXJDb2RlQXQoMClcblxuXHRmdW5jdGlvbiBkZWNvZGUgKGVsdCkge1xuXHRcdHZhciBjb2RlID0gZWx0LmNoYXJDb2RlQXQoMClcblx0XHRpZiAoY29kZSA9PT0gUExVUylcblx0XHRcdHJldHVybiA2MiAvLyAnKydcblx0XHRpZiAoY29kZSA9PT0gU0xBU0gpXG5cdFx0XHRyZXR1cm4gNjMgLy8gJy8nXG5cdFx0aWYgKGNvZGUgPCBOVU1CRVIpXG5cdFx0XHRyZXR1cm4gLTEgLy9ubyBtYXRjaFxuXHRcdGlmIChjb2RlIDwgTlVNQkVSICsgMTApXG5cdFx0XHRyZXR1cm4gY29kZSAtIE5VTUJFUiArIDI2ICsgMjZcblx0XHRpZiAoY29kZSA8IFVQUEVSICsgMjYpXG5cdFx0XHRyZXR1cm4gY29kZSAtIFVQUEVSXG5cdFx0aWYgKGNvZGUgPCBMT1dFUiArIDI2KVxuXHRcdFx0cmV0dXJuIGNvZGUgLSBMT1dFUiArIDI2XG5cdH1cblxuXHRmdW5jdGlvbiBiNjRUb0J5dGVBcnJheSAoYjY0KSB7XG5cdFx0dmFyIGksIGosIGwsIHRtcCwgcGxhY2VIb2xkZXJzLCBhcnJcblxuXHRcdGlmIChiNjQubGVuZ3RoICUgNCA+IDApIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG5cdFx0fVxuXG5cdFx0Ly8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycylcblx0XHQvLyBpZiB0aGVyZSBhcmUgdHdvIHBsYWNlaG9sZGVycywgdGhhbiB0aGUgdHdvIGNoYXJhY3RlcnMgYmVmb3JlIGl0XG5cdFx0Ly8gcmVwcmVzZW50IG9uZSBieXRlXG5cdFx0Ly8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzXG5cdFx0Ly8gdGhpcyBpcyBqdXN0IGEgY2hlYXAgaGFjayB0byBub3QgZG8gaW5kZXhPZiB0d2ljZVxuXHRcdHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cdFx0cGxhY2VIb2xkZXJzID0gJz0nID09PSBiNjQuY2hhckF0KGxlbiAtIDIpID8gMiA6ICc9JyA9PT0gYjY0LmNoYXJBdChsZW4gLSAxKSA/IDEgOiAwXG5cblx0XHQvLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcblx0XHRhcnIgPSBuZXcgQXJyKGI2NC5sZW5ndGggKiAzIC8gNCAtIHBsYWNlSG9sZGVycylcblxuXHRcdC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcblx0XHRsID0gcGxhY2VIb2xkZXJzID4gMCA/IGI2NC5sZW5ndGggLSA0IDogYjY0Lmxlbmd0aFxuXG5cdFx0dmFyIEwgPSAwXG5cblx0XHRmdW5jdGlvbiBwdXNoICh2KSB7XG5cdFx0XHRhcnJbTCsrXSA9IHZcblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBqID0gMDsgaSA8IGw7IGkgKz0gNCwgaiArPSAzKSB7XG5cdFx0XHR0bXAgPSAoZGVjb2RlKGI2NC5jaGFyQXQoaSkpIDw8IDE4KSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMSkpIDw8IDEyKSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMikpIDw8IDYpIHwgZGVjb2RlKGI2NC5jaGFyQXQoaSArIDMpKVxuXHRcdFx0cHVzaCgodG1wICYgMHhGRjAwMDApID4+IDE2KVxuXHRcdFx0cHVzaCgodG1wICYgMHhGRjAwKSA+PiA4KVxuXHRcdFx0cHVzaCh0bXAgJiAweEZGKVxuXHRcdH1cblxuXHRcdGlmIChwbGFjZUhvbGRlcnMgPT09IDIpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMikgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDEpKSA+PiA0KVxuXHRcdFx0cHVzaCh0bXAgJiAweEZGKVxuXHRcdH0gZWxzZSBpZiAocGxhY2VIb2xkZXJzID09PSAxKSB7XG5cdFx0XHR0bXAgPSAoZGVjb2RlKGI2NC5jaGFyQXQoaSkpIDw8IDEwKSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMSkpIDw8IDQpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAyKSkgPj4gMilcblx0XHRcdHB1c2goKHRtcCA+PiA4KSAmIDB4RkYpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFyclxuXHR9XG5cblx0ZnVuY3Rpb24gdWludDhUb0Jhc2U2NCAodWludDgpIHtcblx0XHR2YXIgaSxcblx0XHRcdGV4dHJhQnl0ZXMgPSB1aW50OC5sZW5ndGggJSAzLCAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuXHRcdFx0b3V0cHV0ID0gXCJcIixcblx0XHRcdHRlbXAsIGxlbmd0aFxuXG5cdFx0ZnVuY3Rpb24gZW5jb2RlIChudW0pIHtcblx0XHRcdHJldHVybiBsb29rdXAuY2hhckF0KG51bSlcblx0XHR9XG5cblx0XHRmdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuXHRcdFx0cmV0dXJuIGVuY29kZShudW0gPj4gMTggJiAweDNGKSArIGVuY29kZShudW0gPj4gMTIgJiAweDNGKSArIGVuY29kZShudW0gPj4gNiAmIDB4M0YpICsgZW5jb2RlKG51bSAmIDB4M0YpXG5cdFx0fVxuXG5cdFx0Ly8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuXHRcdGZvciAoaSA9IDAsIGxlbmd0aCA9IHVpbnQ4Lmxlbmd0aCAtIGV4dHJhQnl0ZXM7IGkgPCBsZW5ndGg7IGkgKz0gMykge1xuXHRcdFx0dGVtcCA9ICh1aW50OFtpXSA8PCAxNikgKyAodWludDhbaSArIDFdIDw8IDgpICsgKHVpbnQ4W2kgKyAyXSlcblx0XHRcdG91dHB1dCArPSB0cmlwbGV0VG9CYXNlNjQodGVtcClcblx0XHR9XG5cblx0XHQvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG5cdFx0c3dpdGNoIChleHRyYUJ5dGVzKSB7XG5cdFx0XHRjYXNlIDE6XG5cdFx0XHRcdHRlbXAgPSB1aW50OFt1aW50OC5sZW5ndGggLSAxXVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKHRlbXAgPj4gMilcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSgodGVtcCA8PCA0KSAmIDB4M0YpXG5cdFx0XHRcdG91dHB1dCArPSAnPT0nXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRjYXNlIDI6XG5cdFx0XHRcdHRlbXAgPSAodWludDhbdWludDgubGVuZ3RoIC0gMl0gPDwgOCkgKyAodWludDhbdWludDgubGVuZ3RoIC0gMV0pXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUodGVtcCA+PiAxMClcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSgodGVtcCA+PiA0KSAmIDB4M0YpXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUoKHRlbXAgPDwgMikgJiAweDNGKVxuXHRcdFx0XHRvdXRwdXQgKz0gJz0nXG5cdFx0XHRcdGJyZWFrXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dFxuXHR9XG5cblx0bW9kdWxlLmV4cG9ydHMudG9CeXRlQXJyYXkgPSBiNjRUb0J5dGVBcnJheVxuXHRtb2R1bGUuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gdWludDhUb0Jhc2U2NFxufSgpKVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcIi9Vc2Vycy90dHQvV29yay9EZXYvc3BlY3RydW0vbm9kZV9tb2R1bGVzL2d1bHAtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvaW5zZXJ0LW1vZHVsZS1nbG9iYWxzL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLi8uLi9ub2RlX21vZHVsZXMvZ3VscC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9idWZmZXIvbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9saWIvYjY0LmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2d1bHAtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnVmZmVyL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvbGliXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24oYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSxcbiAgICAgIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDEsXG4gICAgICBlTWF4ID0gKDEgPDwgZUxlbikgLSAxLFxuICAgICAgZUJpYXMgPSBlTWF4ID4+IDEsXG4gICAgICBuQml0cyA9IC03LFxuICAgICAgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwLFxuICAgICAgZCA9IGlzTEUgPyAtMSA6IDEsXG4gICAgICBzID0gYnVmZmVyW29mZnNldCArIGldO1xuXG4gIGkgKz0gZDtcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKTtcbiAgcyA+Pj0gKC1uQml0cyk7XG4gIG5CaXRzICs9IGVMZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpO1xuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpO1xuICBlID4+PSAoLW5CaXRzKTtcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCk7XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKTtcbiAgICBlID0gZSAtIGVCaWFzO1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pO1xufTtcblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjLFxuICAgICAgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMSxcbiAgICAgIGVNYXggPSAoMSA8PCBlTGVuKSAtIDEsXG4gICAgICBlQmlhcyA9IGVNYXggPj4gMSxcbiAgICAgIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKSxcbiAgICAgIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKSxcbiAgICAgIGQgPSBpc0xFID8gMSA6IC0xLFxuICAgICAgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMDtcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKTtcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbTtcbiAgZUxlbiArPSBtTGVuO1xuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyODtcbn07XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiL1VzZXJzL3R0dC9Xb3JrL0Rldi9zcGVjdHJ1bS9ub2RlX21vZHVsZXMvZ3VscC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9pbnNlcnQtbW9kdWxlLWdsb2JhbHMvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2J1ZmZlci9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qc1wiLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2J1ZmZlci9ub2RlX21vZHVsZXMvaWVlZTc1NFwiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbnByb2Nlc3MubmV4dFRpY2sgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBjYW5TZXRJbW1lZGlhdGUgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHdpbmRvdy5zZXRJbW1lZGlhdGU7XG4gICAgdmFyIGNhblBvc3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHdpbmRvdy5wb3N0TWVzc2FnZSAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lclxuICAgIDtcblxuICAgIGlmIChjYW5TZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmKSB7IHJldHVybiB3aW5kb3cuc2V0SW1tZWRpYXRlKGYpIH07XG4gICAgfVxuXG4gICAgaWYgKGNhblBvc3QpIHtcbiAgICAgICAgdmFyIHF1ZXVlID0gW107XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gZXYuc291cmNlO1xuICAgICAgICAgICAgaWYgKChzb3VyY2UgPT09IHdpbmRvdyB8fCBzb3VyY2UgPT09IG51bGwpICYmIGV2LmRhdGEgPT09ICdwcm9jZXNzLXRpY2snKSB7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZuID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuICAgICAgICAgICAgcXVldWUucHVzaChmbik7XG4gICAgICAgICAgICB3aW5kb3cucG9zdE1lc3NhZ2UoJ3Byb2Nlc3MtdGljaycsICcqJyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZm4sIDApO1xuICAgIH07XG59KSgpO1xuXG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufVxuXG4vLyBUT0RPKHNodHlsbWFuKVxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiL1VzZXJzL3R0dC9Xb3JrL0Rldi9zcGVjdHJ1bS9ub2RlX21vZHVsZXMvZ3VscC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9pbnNlcnQtbW9kdWxlLWdsb2JhbHMvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2luc2VydC1tb2R1bGUtZ2xvYmFscy9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2d1bHAtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvaW5zZXJ0LW1vZHVsZS1nbG9iYWxzL25vZGVfbW9kdWxlcy9wcm9jZXNzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xudmFyIFNwZWN0cnVtQW5hbHl6ZXIgPSByZXF1aXJlKCcuL3ZlbmRvci9kMy1hdWRpby1zcGVjdHJ1bS9zcGVjdHJ1bV9hbmFseXplci5qcycpO1xudmFyIElucHV0QXVkaW9Tb3VyY2UgPSByZXF1aXJlKCcuL3ZlbmRvci9kMy1hdWRpby1zcGVjdHJ1bS9pbnB1dF9hdWRpb19zb3VyY2UuanMnKTtcbnZhciBBdWRpbyA9IHJlcXVpcmUoJy4vdmVuZG9yL2QzLWF1ZGlvLXNwZWN0cnVtL2lucHV0X2F1ZGlvX3NvdXJjZS5qcycpO1xuXG5mdW5jdGlvbiBBcHBsaWNhdGlvbigpIHtcbiAgdGhpcy5hdWRpbyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jb250ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLm1vZGVsID0gdW5kZWZpbmVkO1xuICB0aGlzLnNvdXJjZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy52aWV3ID0gdW5kZWZpbmVkO1xufVxuXG5BcHBsaWNhdGlvbi5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYXBwID0gdGhpcztcbiAgdGhpcy5wb3B1bGF0ZUNvbnRleHQoKTtcbiAgdGhpcy5hdWRpbyA9IG5ldyBBdWRpbyh0aGlzLmNvbnRleHQpO1xuXG4gIHRoaXMuc291cmNlID0gdGhpcy5zb3VyY2VGcm9tSW5wdXQoKTtcbiAgYXBwLm9uU291cmNlTG9hZGVkKGZ1bmN0aW9uKCkge1xuICAgIGFwcC5tb2RlbCA9IG5ldyBTcGVjdHJ1bUFuYWx5emVyKGFwcC5hdWRpbyk7XG4gICAgYXBwLnZpZXcgPSBuZXcgU3BlY3RydW1BbmFseXplclZpZXcoYXBwLm1vZGVsLCBcIiNzcGVjdHJ1bV9hbmFseXplclwiKTtcbiAgICBhcHAudmlldy51cGRhdGUoKTtcbiAgfSk7XG5cbiAgJChcIiNwbGF5XCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgIEFwcGxpY2F0aW9uLnRvZ2dsZVBsYXkoKTtcbiAgfSk7XG59O1xuXG5BcHBsaWNhdGlvbi5wcm90b3R5cGUuc291cmNlRnJvbUlucHV0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBhcHAgPSB0aGlzO1xuICByZXR1cm4gbmV3IElucHV0QXVkaW9Tb3VyY2UodGhpcy5jb250ZXh0KTtcbn07XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5vblNvdXJjZUxvYWRlZCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHRoaXMuYXVkaW8uc291cmNlID0gdGhpcy5zb3VyY2U7XG4gIGlmIChjYWxsYmFjayAhPT0gbnVsbCkge1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cbn07XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXknKTtcbiAgZWxlbWVudC52YWx1ZSA9IFwiU3RvcFwiO1xuICB0aGlzLm1vZGVsLnBsYXkoKTtcbn07XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS50b2dnbGVQbGF5ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmF1ZGlvLnBsYXlpbmcpIHtcbiAgICB0aGlzLnN0b3AoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnBsYXkoKTtcbiAgfVxufTtcblxuQXBwbGljYXRpb24ucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5hdWRpby5zdG9wKCk7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXknKTtcbiAgZWxlbWVudC52YWx1ZSA9IFwiU3RhcnRcIjtcbn07XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5wb3B1bGF0ZUNvbnRleHQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIEF1ZGlvQ29udGV4dCA9IHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dDtcblxuICBpZiAoQXVkaW9Db250ZXh0KSB7XG4gICAgdGhpcy5jb250ZXh0ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xuICB9IGVsc2Uge1xuICAgIGFsZXJ0KFwiU29ycnksIHlvdXIgYnJvd3NlciBpcyBub3Qgc3VwcG9ydGVkLlwiKTtcbiAgfVxufTtcblxuLy8gQ2xhc3MgTWV0aG9kc1xuXG5BcHBsaWNhdGlvbi5sb2FkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW5zdGFuY2UgPSBuZXcgQXBwbGljYXRpb24oKTtcbiAgdGhpcy5pbnN0YW5jZS5sb2FkKCk7XG5cbiAgLy8gU3RhcnQgYXV0b21hdGljYWxseVxuICB0aGlzLnBsYXkoKTtcbn07XG5cbkFwcGxpY2F0aW9uLnBsYXkgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbnN0YW5jZS5wbGF5KCk7XG59O1xuXG5BcHBsaWNhdGlvbi50b2dnbGVQbGF5ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW5zdGFuY2UudG9nZ2xlUGxheSgpO1xufTtcblxuQXBwbGljYXRpb24uc3RvcCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmluc3RhbmNlLnN0b3AoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwbGljYXRpb247XG5cbi8vIEV4cG9ydCBhcyBhIGdsb2JhbCBvYmplY3RcbndpbmRvdy5BcHBsaWNhdGlvbiA9IEFwcGxpY2F0aW9uO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcIi9Vc2Vycy90dHQvV29yay9EZXYvc3BlY3RydW0vbm9kZV9tb2R1bGVzL2d1bHAtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvaW5zZXJ0LW1vZHVsZS1nbG9iYWxzL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9mYWtlX2Q0ZDc2YTQwLmpzXCIsXCIvXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuZnVuY3Rpb24gSW5wdXRBdWRpb1NvdXJjZShjb250ZXh0KSB7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG5cbiAgLy8gRnJlcXVlbmN5IHJhbmdlc1xuICBmcmVxUmFuZ2VzID0gIHtcbiAgICBodW1hbkF1ZGlibGU6IHtcbiAgICAgIG1pbjogMjAsXG4gICAgICBtYXg6IDIwMDAwXG4gICAgfSxcblxuICAgIC8vIEVnLCBiYXNzXG4gICAgaHVtYW5BdWRpYmxlTG93UmFuZ2U6IHtcbiAgICAgIG1pbjogMjAsXG4gICAgICBtYXg6IDI1MFxuICAgIH0sXG5cbiAgICBodW1hbkF1ZGlibGVNaWRSYW5nZToge1xuICAgICAgbWluOiAyNTAsXG4gICAgICBtYXg6IDQwMDBcbiAgICB9LFxuXG4gICAgaHVtYW5BdWRpYmxlSGlnaFJhbmdlOiB7XG4gICAgICBtaW46IDQwMDAsXG4gICAgICBtYXg6IDIwMDAwXG4gICAgfSxcblxuICAgIC8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVm9pY2VfZnJlcXVlbmN5XG4gICAgdm9pY2U6IHtcbiAgICAgIG1pbjogMzAwLFxuICAgICAgbWF4OiAzNDAwXG4gICAgfVxuICB9O1xuXG4gIC8vIE1pZCBodW1hbiBhdWRpYmxlIHJhbmdlXG4gIHRoaXMuZnJlcSA9IGZyZXFSYW5nZXMudm9pY2U7XG59XG5cbklucHV0QXVkaW9Tb3VyY2UucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhID0gKG5hdmlnYXRvci5nZXRVc2VyTWVkaWEgfHxcbiAgICBuYXZpZ2F0b3Iud2Via2l0R2V0VXNlck1lZGlhIHx8XG4gICAgbmF2aWdhdG9yLm1vekdldFVzZXJNZWRpYSB8fFxuICAgIG5hdmlnYXRvci5tc0dldFVzZXJNZWRpYSk7XG5cbiAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSh7IGF1ZGlvOnRydWUgfSxcbiAgICB0aGlzLnN0cmVhbUNhbGxiYWNrKGNhbGxiYWNrKSk7XG59O1xuXG5JbnB1dEF1ZGlvU291cmNlLnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24oKSB7fTtcblxuSW5wdXRBdWRpb1NvdXJjZS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmRpc2Nvbm5lY3QoKTtcbn07XG5cbklucHV0QXVkaW9Tb3VyY2UucHJvdG90eXBlLnN0cmVhbUNhbGxiYWNrID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIHNvdXJjZSA9IHRoaXM7XG5cbiAgdmFyIGFkZEJhbmRQYXNzRmlsdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gRmlsdGVyIG91dCBsb3cgZnJlcXVlbmNpZXNcbiAgICAvLyAoYWxsb3cgaGlnaCBmcmVxdWVuY2VzIHRvIHBhc3MgdGhyb3VnaClcbiAgICB2YXIgaGlnaFBhc3NGaWx0ZXIgPSBzb3VyY2UuY29udGV4dC5jcmVhdGVCaXF1YWRGaWx0ZXIoKTtcbiAgICBoaWdoUGFzc0ZpbHRlci50eXBlID0gJ2hpZ2hwYXNzJztcbiAgICBoaWdoUGFzc0ZpbHRlci5mcmVxdWVuY3kudmFsdWUgPSBzb3VyY2UuZnJlcS5taW47XG5cbiAgICAvLyBGaWx0ZXIgb3V0IGhpZ2ggZnJlcXVlbmNpZXNcbiAgICAvLyAoYWxsb3cgbG93IGZyZXF1ZW5jZXMgdG8gcGFzcyB0aHJvdWdoKVxuICAgIHZhciBsb3dQYXNzRmlsdGVyID0gc291cmNlLmNvbnRleHQuY3JlYXRlQmlxdWFkRmlsdGVyKCk7XG4gICAgbG93UGFzc0ZpbHRlci50eXBlID0gJ2xvd3Bhc3MnO1xuICAgIGxvd1Bhc3NGaWx0ZXIuZnJlcXVlbmN5LnZhbHVlID0gc291cmNlLmZyZXEubWF4O1xuXG4gICAgc291cmNlLnNvdXJjZS5jb25uZWN0KGhpZ2hQYXNzRmlsdGVyKTtcbiAgICBoaWdoUGFzc0ZpbHRlci5jb25uZWN0KGxvd1Bhc3NGaWx0ZXIpO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICBzb3VyY2Uuc291cmNlID0gc291cmNlLmNvbnRleHQuY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2Uoc3RyZWFtKTtcbiAgICBhZGRCYW5kUGFzc0ZpbHRlcigpO1xuXG4gICAgY2FsbGJhY2soKTtcbiAgfTtcbn07XG5cbklucHV0QXVkaW9Tb3VyY2UucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbihjb25uZWN0b3IpIHtcbiAgdGhpcy5zb3VyY2UuY29ubmVjdChjb25uZWN0b3IpO1xufTtcblxuSW5wdXRBdWRpb1NvdXJjZS5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNvdXJjZS5kaXNjb25uZWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IElucHV0QXVkaW9Tb3VyY2U7XG59KS5jYWxsKHRoaXMscmVxdWlyZShcIi9Vc2Vycy90dHQvV29yay9EZXYvc3BlY3RydW0vbm9kZV9tb2R1bGVzL2d1bHAtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvaW5zZXJ0LW1vZHVsZS1nbG9iYWxzL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi92ZW5kb3IvZDMtYXVkaW8tc3BlY3RydW0vaW5wdXRfYXVkaW9fc291cmNlLmpzXCIsXCIvdmVuZG9yL2QzLWF1ZGlvLXNwZWN0cnVtXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xudmFyIGRzcCA9IHJlcXVpcmUoJ2RzcC9kc3AnKTtcbnZhciBGRlQgPSBkc3AuRkZUO1xuXG4vKipcbiAqIFRoaXMgaXMgd2hlcmUgdGhlIGF1ZGlvIGlzIGFuYWx5emVkXG4gKi9cbmZ1bmN0aW9uIFNwZWN0cnVtQW5hbHl6ZXIoYXVkaW8pIHtcbiAgdGhpcy5hdWRpbyA9IGF1ZGlvO1xuICB0aGlzLmFuYWx5c2lzID0gdGhpcy5hdWRpby5jb250ZXh0LmNyZWF0ZUphdmFTY3JpcHROb2RlKHRoaXMuYXVkaW8uYnVmZmVyU2l6ZSk7XG4gIHRoaXMuY3VydmUgPSAxNjtcbiAgdGhpcy5pbnRlbnNpdHkgPSA1MDtcbiAgdGhpcy5zZXRSZXNvbHV0aW9uKDE2KTtcblxuICB0aGlzLm1pbiA9IDA7XG4gIHRoaXMubWF4ID0gMDtcbiAgdGhpcy5hdmVyYWdlID0gMDtcbn1cblxuU3BlY3RydW1BbmFseXplci5wcm90b3R5cGUuc2V0UmVzb2x1dGlvbiA9IGZ1bmN0aW9uKG4pIHtcbiAgdGhpcy5yZXNvbHV0aW9uID0gdGhpcy5saW5Mb2codGhpcy5hdWRpby5idWZmZXJTaXplIC8gbik7XG4gIHRoaXMucmVzZXQoKTtcbn07XG5cblNwZWN0cnVtQW5hbHl6ZXIucHJvdG90eXBlLnNldEN1cnZlID0gZnVuY3Rpb24obikge1xuICB0aGlzLmN1cnZlID0gbjtcbiAgdGhpcy5yZXNldCgpO1xufTtcblxuU3BlY3RydW1BbmFseXplci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5kYXRhID0gW107XG4gIHRoaXMuZGVsdGEgPSBbXTtcbiAgdmFyIGZmdFNpemUgPSB0aGlzLnJlc29sdXRpb247XG4gIHRoaXMuYXVkaW8ubW9ubyA9IG5ldyBGbG9hdDMyQXJyYXkoZmZ0U2l6ZSk7XG4gIHRoaXMuZmZ0ID0gbmV3IEZGVChmZnRTaXplLCB0aGlzLmF1ZGlvLnNhbXBsZVJhdGUpO1xuICB2YXIgYW5hbHl6ZXIgPSB0aGlzO1xuICB0aGlzLmFuYWx5c2lzLm9uYXVkaW9wcm9jZXNzID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBhbmFseXplci5hdWRpb1JlY2VpdmVkKGV2ZW50KTtcbiAgfTtcbn07XG5cblNwZWN0cnVtQW5hbHl6ZXIucHJvdG90eXBlLmxpbkxvZyA9IGZ1bmN0aW9uKG4pIHtcbiAgcmV0dXJuIE1hdGgucG93KCAyLCBNYXRoLnJvdW5kKCBNYXRoLmxvZyggbiApIC8gTWF0aC5sb2coIDIgKSApICk7XG59O1xuXG5TcGVjdHJ1bUFuYWx5emVyLnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZmZ0LnNwZWN0cnVtLmxlbmd0aC8yO1xufTtcblxuU3BlY3RydW1BbmFseXplci5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBhbmFseXplciA9IHRoaXM7XG4gIHRoaXMuYXVkaW8ucGxheShmdW5jdGlvbigpIHtcbiAgICBhbmFseXplci5hdWRpby5jb25uZWN0UHJvY2Vzc29yKGFuYWx5emVyLmFuYWx5c2lzKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9KTtcbn07XG5cblNwZWN0cnVtQW5hbHl6ZXIucHJvdG90eXBlLmdldEluaXRpYWxEYXRhID0gZnVuY3Rpb24oKSB7XG4gIHZhciBkYXRhID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGgoKTsgaSsrKSB7XG4gICAgZGF0YS5wdXNoKDEpO1xuICB9XG4gIHJldHVybiBkYXRhO1xufTtcblxuU3BlY3RydW1BbmFseXplci5wcm90b3R5cGUud2l0aEN1cnZlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIHNlZ21lbnRMZW5ndGggPSB0aGlzLmxlbmd0aCgpIC8gdGhpcy5jdXJ2ZTtcbiAgdmFyIHNlZ21lbnRDb3VudGVyID0gMDtcbiAgdmFyIHNlZ21lbnQgPSAwO1xuICB2YXIgY291bnRlciA9IDA7XG4gIHZhciBpbmRleCA9IDA7XG4gIHdoaWxlIChpbmRleCA8PSB0aGlzLmxlbmd0aCgpIC0gMSkge1xuICAgIGNhbGxiYWNrKGluZGV4LCBjb3VudGVyKTtcbiAgICBpbmRleCArPSAoc2VnbWVudCAqIHRoaXMuY3VydmUpICsgMTtcbiAgICBjb3VudGVyICs9IDE7XG4gICAgc2VnbWVudENvdW50ZXIgKz0gMTtcbiAgICBpZiAoc2VnbWVudENvdW50ZXIgPiBzZWdtZW50TGVuZ3RoIC0gMSkge1xuICAgICAgc2VnbWVudCArPSAxO1xuICAgICAgc2VnbWVudENvdW50ZXIgPSAwO1xuICAgIH1cbiAgfVxufTtcblxuU3BlY3RydW1BbmFseXplci5wcm90b3R5cGUucG9wdWxhdGVEYXRhID0gZnVuY3Rpb24oaW5kZXgsIGNvdW50ZXIpIHtcbiAgYW1wbGl0dWRlID0gdGhpcy5mZnQuc3BlY3RydW1baW5kZXhdICogKHRoaXMuaW50ZW5zaXR5ICogMjAwKTtcbiAgdGhpcy5kZWx0YVtjb3VudGVyXSA9IGFtcGxpdHVkZSAtIHRoaXMuZGF0YVtjb3VudGVyXTtcbiAgdGhpcy5kYXRhW2NvdW50ZXJdID0gYW1wbGl0dWRlO1xufTtcblxuLyoqXG4gKiBGaW5kIHRoZSBtaW4gb2YgdGhlIGRhdGFcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IG1pbiB2YWx1ZVxuICovXG5TcGVjdHJ1bUFuYWx5emVyLnByb3RvdHlwZS5nZXREYXRhTWluID0gZnVuY3Rpb24oKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmRhdGEubGVuZ3RoO1xuXG4gIGlmIChsZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciBtaW4gPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdmFsID0gdGhpcy5kYXRhW2ldO1xuICAgIGlmICh2YWwgPCBtaW4pIHtcbiAgICAgIG1pbiA9IHZhbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWluO1xufTtcblxuLyoqXG4gKiBGaW5kIHRoZSBtYXggb2YgdGhlIGRhdGFcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IG1heCB2YWx1ZVxuICovXG5TcGVjdHJ1bUFuYWx5emVyLnByb3RvdHlwZS5nZXREYXRhTWF4ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmRhdGEubGVuZ3RoO1xuXG4gIGlmIChsZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciBtYXggPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdmFsID0gdGhpcy5kYXRhW2ldO1xuICAgIGlmICh2YWwgPiBtYXgpIHtcbiAgICAgIG1heCA9IHZhbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF4O1xufTtcblxuLyoqXG4gKiBGaW5kIHRoZSBhdmVyYWdlIG9mIHRoZSBkYXRhXG4gKlxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5TcGVjdHJ1bUFuYWx5emVyLnByb3RvdHlwZS5nZXREYXRhQXZnID0gZnVuY3Rpb24oKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmRhdGEubGVuZ3RoO1xuXG4gIGlmIChsZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciB0b3RhbCA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHRvdGFsID0gdG90YWwgKyB0aGlzLmRhdGFbaV07XG4gIH1cblxuICByZXR1cm4gdG90YWwgLyBsZW5ndGg7XG59O1xuXG5TcGVjdHJ1bUFuYWx5emVyLnByb3RvdHlwZS5hdWRpb1JlY2VpdmVkID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgdmFyIGFuYWx5emVyID0gdGhpcztcbiAgdGhpcy5hdWRpby5yb3V0ZUF1ZGlvKGV2ZW50LCBmYWxzZSk7XG4gIHRoaXMuZmZ0LmZvcndhcmQodGhpcy5hdWRpby5tb25vKTtcbiAgdGhpcy53aXRoQ3VydmUoZnVuY3Rpb24oaW5kZXgsIGNvdW50ZXIpIHtcbiAgICBhbmFseXplci5wb3B1bGF0ZURhdGEoaW5kZXgsIGNvdW50ZXIpO1xuICB9KTtcblxuICB0aGlzLm1pbiA9IHRoaXMuZ2V0RGF0YU1pbigpO1xuICB0aGlzLm1heCA9IHRoaXMuZ2V0RGF0YU1heCgpO1xuICB0aGlzLmF2ZXJhZ2UgPSB0aGlzLmdldERhdGFBdmcoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3BlY3RydW1BbmFseXplcjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCIvVXNlcnMvdHR0L1dvcmsvRGV2L3NwZWN0cnVtL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2luc2VydC1tb2R1bGUtZ2xvYmFscy9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvdmVuZG9yL2QzLWF1ZGlvLXNwZWN0cnVtL3NwZWN0cnVtX2FuYWx5emVyLmpzXCIsXCIvdmVuZG9yL2QzLWF1ZGlvLXNwZWN0cnVtXCIpIl19
